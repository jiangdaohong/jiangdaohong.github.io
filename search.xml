<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[关于仪式感]]></title>
      <url>https://jiangdaohong.github.io./2017/12/31/%E5%85%B3%E4%BA%8E%E4%BB%AA%E5%BC%8F%E6%84%9F/</url>
      <content type="html"><![CDATA[<p>2017 年就要过去了，还是要总结一下。<br><a id="more"></a></p>
<p>2017 年就快要过去了，年龄越来越大，时间越过越快，焦虑感愈重。<br>有这样一种说法：由于人不够强大，所以会通过仪式来进行自我暗示，自我激励。想想还是挺有道理：出生要办满月酒，生日大家也要一起嗨，更别说结婚生子，更是要大肆庆祝。<br>而我作为一个是在“闷”的人，平时也不参加什么活动，这种仪式感很弱，遇到挫折最多也是跟朋友倾诉一下，就算是一个形式吧，也不算什么仪式。<br>过年，是一个重要的节日。节日最重要的就是那种仪式感，通俗说也就是“年味”。对于这个仪式，本来是不怎么在意的，不过年龄越来越大，身上的责任越来越重，开始注意这些仪式。还是要审视一下即将过去一年的事情，无论好坏，都是自己的经历，往者不可谏，来者犹可追。</p>
<h4 id="做了什么"><a href="#做了什么" class="headerlink" title="做了什么"></a>做了什么</h4><p>今年的工作方面，主要是新开发两个 APP，公司的业务线开始复杂，但是还是没有重点，前一段时间和老板沟通，老板说接下来的事情就是砍掉一些业务，集中一个方面。其实这个东西已经做了两年了，但是还没有找准一个切入点，感觉没啥希望了。年后看看新的机会吧，耗不起。<br>学习方面学习了一些优秀的代码，关于设计模式方面的思考更多了，毕竟做了不少从头开始构建的工作，经过近两年的经验，对于框架的搭建以及模块化思考变多。现在的项目能够复用的模块也变多，提高了团队的开发效率，还是很开心的。而且开始尝试一些以前不怎么用的框架，踩了一些坑，对个人也是一种新的开发体验吧。<br>生活方面最大的变化是搬到滨江，和同学合租了，平时周末一起喝酒聊天，很爽。公司附近有个图书馆，夏天的时候去那年蹭空调，学习氛围不错，可是十月份之后日常加班，就没去过了。还是喜欢图书馆，虽然不怎么看书，安静的时光总是美好的。<br>感情方面基本是nil，席八。</p>
<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>今年觉得收获就是和同学在一起住，平时有人沟通聊天，确实人更积极了。学习方面按部就班，但是效率不是很高，开发的效率得到了锻炼，毕竟一周开发了一个 APP。。。</p>
<h3 id="新的仪式"><a href="#新的仪式" class="headerlink" title="新的仪式"></a>新的仪式</h3><p>新的一年就要来临，不知道未来是什么样子，还有一点小期待吧，希望有一个仪式，足够撑起我对未来的遐想。<br>于杭州。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cell中使用定时器]]></title>
      <url>https://jiangdaohong.github.io./2017/12/16/cell%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>cell 中使用定时器的小探索<br><a id="more"></a></p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>最近有一个需求，是需要在 cell 中开启定时器，并且更新计时时间。<br>需求并不复杂，涉及到如何封装定时器的问题。在网上看了一些例子，觉得和控制器的耦合太严重了，自己实现了一个。</p>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>由于每个 cell 只是负责 UI 的显示，所以并不需要关心定时器的逻辑，而控制器的复用性太差，所以将定时器的逻辑写在 模型 中最为合适。可以为 模型 创建一个计时的分类。使用<code>objc_setAssociatedObject</code> 关联属性，创建一个定时器，添加定时器的开启和关闭方法。并定时以 block的形式将计时开始的时间返回出来，更新 UI 的显示。</p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TimerObj</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSTimer</span> *timer; <span class="comment">/**&lt; 定时器*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDate</span> *start; <span class="comment">/**&lt; 实际开始时间，用于定时器计算*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDate</span> *end; <span class="comment">/**&lt; 结束计时时间*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span>(^didChangeTime)(<span class="built_in">NSDate</span> *date);</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)fire;</div><div class="line">- (<span class="keyword">void</span>)invalid;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)isCounting;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TimerObj</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)fire &#123;</div><div class="line">    <span class="keyword">if</span> (_timer.isValid) &#123;</div><div class="line">        [_timer invalidate];</div><div class="line">    &#125;</div><div class="line">    _timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(updateDate) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>] ;</div><div class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:_timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">    _start = [<span class="built_in">NSDate</span> new];</div><div class="line">    </div><div class="line">    [_timer fire];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)invalid &#123;</div><div class="line">    [_timer invalidate];</div><div class="line">    _end = [<span class="built_in">NSDate</span> new];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)isCounting &#123;</div><div class="line">    <span class="keyword">return</span> _start &amp;&amp; !_end;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateDate &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.didChangeTime) &#123;</div><div class="line">        <span class="keyword">self</span>.didChangeTime(<span class="keyword">self</span>.start);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RootViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *list;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RootViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> configureUI];</div><div class="line">    [<span class="keyword">self</span> testDate];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)configureUI &#123;</div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> lightGrayColor];</div><div class="line">    <span class="keyword">self</span>.tableView.tableFooterView = [<span class="built_in">UIView</span> new];</div><div class="line">    <span class="keyword">self</span>.title = <span class="string">@"Timer Test"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)testDate &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableArray</span> *mAry = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        [mAry addObject:[TimerObj new]];</div><div class="line">    &#125;</div><div class="line">    _list = [<span class="built_in">NSArray</span> arrayWithArray:mAry];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - table view delegete &amp; datasource</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    <span class="keyword">return</span> _list.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> *identifier = <span class="string">@"identifier"</span>;</div><div class="line">    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:identifier];</div><div class="line">    <span class="keyword">if</span> (!cell) &#123;</div><div class="line">        cell = [[<span class="built_in">UITableViewCell</span> alloc] initWithStyle:<span class="built_in">UITableViewCellStyleValue1</span> reuseIdentifier:identifier];</div><div class="line">    &#125;</div><div class="line">    TimerObj *obj =  _list[indexPath.row];</div><div class="line">    obj.didChangeTime = ^(<span class="built_in">NSDate</span> *date) &#123;</div><div class="line">        <span class="built_in">CGFloat</span> now = [<span class="built_in">NSDate</span> new].timeIntervalSince1970 - date.timeIntervalSince1970;</div><div class="line">        cell.textLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.2f"</span>, now];</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    [tableView deselectRowAtIndexPath:indexPath animated:<span class="literal">YES</span>];</div><div class="line">    TimerObj *obj =  _list[indexPath.row];</div><div class="line">    <span class="keyword">if</span> (obj.isCounting) &#123;</div><div class="line">        [obj invalid];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [obj fire];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[区间合并]]></title>
      <url>https://jiangdaohong.github.io./2017/12/15/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</url>
      <content type="html"><![CDATA[<p>最近搞个新项目，涉及到区间合并的问题。<br><a id="more"></a></p>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>最近公司开启新项目，其中有一个这样的需求：会员可以根据医生的排班表进行预约，当预约完成之后，会以矩形的形式占据预约的时间段落，大概是下面这样：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fmizf3j6ckj30ku112gn1.jpg" alt="占位"><br>如果是已经预约的，其他会员可以长按或者进行其他操作，进行再次预约，即同一时间段可以被多人预约。例如，如果 A 预约了医生 08:00 – 10:00，B 预约了医生 09:00 – 10:00，那么，这两段数据就会重合。<br>刚开始开发的时候并没有这个需求，经过讨论，我们决定进行区间合并，将预约相同时间段内的数据统一绘制在一个矩形框内。</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>需求清晰之后，就是如何将时间段进行合并的问题了。<br>首先服务器返回近期的数据，然后我们按照天数，分组，一天数据绘制一列。<br>然后，进行区间合并。将一天的数据安装预约开始时间从早到晚排序产生数组A。使用区间表示，比如 08:00 – 10:00 表示为 [8,10]，以数组 A 第一个元素初始化一个区间 a[start,end], 开始时间记作<code>a.start</code>，结束时间记作<code>a.end</code>，接下来遍历 A，当前区间元素记作<code>c</code>，，会出现以下情况：</p>
<ol>
<li>c.start &gt;= a.start &amp;&amp; c.end &lt;= a.end，即，当前时间在区间内，不处理；</li>
<li>c.start &gt;= a.start &amp;&amp; c.end &gt; a.end，即，开始时间在区间内，结束时间晚于当前结束时间，那么，修改 a.end = c.end;</li>
<li>c.start &gt; a.end，即 c 不在 a 之内，那么修改当前的开始和结束。</li>
<li>完成合并</li>
</ol>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)testCode &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSArray</span> *a = @[@<span class="number">8</span>,@<span class="number">11</span>];</div><div class="line">    <span class="built_in">NSArray</span> *b = @[@<span class="number">2</span>,@<span class="number">4</span>];</div><div class="line">    <span class="built_in">NSArray</span> *c = @[@<span class="number">0</span>,@<span class="number">2</span>];</div><div class="line">    <span class="built_in">NSArray</span> *d = @[@<span class="number">15</span>,@<span class="number">18</span>];</div><div class="line">    <span class="built_in">NSArray</span> *e = @[@<span class="number">7</span>,@<span class="number">16</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">NSArray</span> *all = @[a, b, c, d, e];</div><div class="line">    </div><div class="line">    <span class="comment">/// 区间排序</span></div><div class="line">    <span class="built_in">NSArray</span> *sortAry = [all sortedArrayUsingComparator:^<span class="built_in">NSComparisonResult</span>(<span class="built_in">NSArray</span> *obj1, <span class="built_in">NSArray</span> *obj2) &#123;</div><div class="line">        <span class="keyword">return</span> [obj1.firstObject integerValue] &gt; [obj2.firstObject integerValue];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableArray</span> *result = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="built_in">NSInteger</span> pre = <span class="number">0</span>;</div><div class="line">    <span class="built_in">NSInteger</span> next = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; sortAry.count; i++) &#123;</div><div class="line">        <span class="built_in">NSArray</span> &lt;<span class="built_in">NSNumber</span> *&gt; *c = sortAry[i];</div><div class="line">        <span class="built_in">NSInteger</span> start = c.firstObject.integerValue;</div><div class="line">        <span class="built_in">NSInteger</span> end = c.lastObject.integerValue;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">            pre = start;</div><div class="line">            next = end;</div><div class="line">            [result addObject:c];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (start &gt;= pre &amp;&amp; end &lt;= next) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (start &gt;= pre &amp;&amp; end &gt;= next) &#123;</div><div class="line">            <span class="keyword">if</span> (start &gt; next) &#123;</div><div class="line">                pre = start;</div><div class="line">                next = end;</div><div class="line">                [result addObject:c];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                next = end;</div><div class="line">                <span class="built_in">NSArray</span> *ary = mAry.lastObject;</div><div class="line">                [result removeLastObject];</div><div class="line">                [result addObject:@[ary.firstObject, @(next)]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用block简化API设计]]></title>
      <url>https://jiangdaohong.github.io./2017/11/01/%E4%BD%BF%E7%94%A8block%E7%AE%80%E5%8C%96API%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>使用 block 简化 API 设计的小技巧。<br><a id="more"></a></p>
<p>在做项目的过程中，常常会遇到这种情况：需要做一些类似的操作，但是又有一些差别，以数据库查询为例，经常需要查询符合某种条件的所有用户，比如性别为男的用户，或者年龄大于45的用户等。通常遇到这种情况，是根据查询条件写多个查询，然后分多个 API 进行实现。大概是下面这个样子：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ (<span class="built_in">NSArray</span>&lt;UserInfo *&gt; *)db_selectMale &#123;</div><div class="line">    <span class="built_in">NSString</span> *sql = <span class="string">@"SELECT userInfo FROM UserInfo_t where gender = 1;"</span>;</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> @[];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSArray</span>&lt;UserInfo *&gt; *)db_selectAgeMoreThan:(<span class="built_in">NSUInteger</span>)age &#123;</div><div class="line">    <span class="built_in">NSString</span> *sql = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"SELECT userInfo FROM UserInfo_t where age &gt; %@;"</span>, @(age)];</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> @[];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果查询条件更多的话，是不是写的接口更多了呢？<br>仔细看一下的话，就会发现，实际上每次查询都是根据一定条件来进行查询，之后的数据组合方式是一样的，那进行优化的方向就是如何传递查询条件。一个是直接写查询的 sql 语句，这样写就失去了效率。系统的 API 在这方面已经给出了范例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[ary sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) &#123;</div><div class="line">// 写排序条件，返回结果</div><div class="line">    return obj1 &gt; obj2;</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>通过 block 将排序的条件直接返回给数组。<br>那我们就可以简单这么写：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSArray</span>&lt;UserInfo *&gt; *)db_selectAllCondation:(UserInfo *(^)(UserInfo *info))condation &#123;</div><div class="line">    __block <span class="built_in">NSMutableArray</span> *ary = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    </div><div class="line">    __block <span class="built_in">NSString</span> *sql = <span class="string">@"SELECT userInfo FROM UserInfo_t;"</span>;</div><div class="line">    __block FMResultSet *result = <span class="literal">nil</span>;</div><div class="line">    [[FMDatabaseQueue sharedInstance] inDatabase:^(FMDatabase *db) &#123;</div><div class="line">        result = [db executeQuery:sql];</div><div class="line">        <span class="keyword">while</span> ([result next]) &#123;</div><div class="line">            UserInfo *info = [UserInfo yy_modelWithJSON:[result dataForColumn:<span class="string">@"userInfo"</span>]];</div><div class="line">            UserInfo *result = condation(info);</div><div class="line">            <span class="keyword">if</span> (result) &#123;</div><div class="line">                [ary addObject:result];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        [result close];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ary;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样，上面两个 API 就可以使用这个 API 实现。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSArray</span>&lt;UserInfo *&gt; *)db_selectMale &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> db_selectAllCondation:^UserInfo *(UserInfo *info) &#123;</div><div class="line">        <span class="keyword">if</span> (info.gender == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> info;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSArray</span>&lt;UserInfo *&gt; *)db_selectAgeMoreThan:(<span class="built_in">NSUInteger</span>)age &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> db_selectAllCondation:^UserInfo *(UserInfo *info) &#123;</div><div class="line">        <span class="keyword">if</span> (info.age &gt; age) &#123;</div><div class="line">            <span class="keyword">return</span> info;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样查询的条件就可以和 API 独立，并且不影响查询的灵活性。<br>实际上这样的 API 设计在流行的第三方框架中很常见，比如自动布局框架<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客收集]]></title>
      <url>https://jiangdaohong.github.io./2017/09/28/%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>备忘录<br><a id="more"></a></p>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p><a href="https://imququ.com/" target="_blank" rel="external">访问速度很快，专注前端</a></p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><a href="http://frozengene.github.io" target="_blank" rel="external">基于LLVM开发编译器</a></p>
<h3 id="不断更新看到的文章"><a href="#不断更新看到的文章" class="headerlink" title="不断更新看到的文章"></a>不断更新看到的文章</h3><h4 id="多线程相关"><a href="#多线程相关" class="headerlink" title="多线程相关"></a>多线程相关</h4><p><a href="http://blog.xcodev.com/posts/operation-queue-intro/" target="_blank" rel="external">http://blog.xcodev.com/posts/operation-queue-intro/</a><br><a href="http://blog.xcodev.com/posts/gcd-intro/" target="_blank" rel="external">http://blog.xcodev.com/posts/gcd-intro/</a><br><a href="http://blog.csdn.net/jacobkong/article/details/47858563" target="_blank" rel="external">http://blog.csdn.net/jacobkong/article/details/47858563</a><br><a href="http://www.dreamingwish.com/article/ios-multi-threaded-programming-the-thread-management.html" target="_blank" rel="external">http://www.dreamingwish.com/article/ios-multi-threaded-programming-the-thread-management.html</a><br><a href="http://www.dreamingwish.com/article/gcd-practice-io-race.html" target="_blank" rel="external">http://www.dreamingwish.com/article/gcd-practice-io-race.html</a><br><a href="https://github.com/ChenYilong/ParseSourceCodeStudy/blob/master/01_Parse的多线程处理思路/Parse的底层多线程处理思路.md#使用dispatch-semaphore控制并发线程数量" target="_blank" rel="external">https://github.com/ChenYilong/ParseSourceCodeStudy/blob/master/01_Parse的多线程处理思路/Parse的底层多线程处理思路.md#使用dispatch-semaphore控制并发线程数量</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDAzMzk0MQ==&amp;mid=203702345&amp;idx=1&amp;sn=226f6f784d37b89718f6949c9214e1e6&amp;scene=1&amp;srcid=kl2ZmcSfYHuB6bMvYPEq#rd" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzAxNDAzMzk0MQ==&amp;mid=203702345&amp;idx=1&amp;sn=226f6f784d37b89718f6949c9214e1e6&amp;scene=1&amp;srcid=kl2ZmcSfYHuB6bMvYPEq#rd</a></p>
<h4 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h4><p><a href="http://www.knowsky.com/980422.html" target="_blank" rel="external">http://www.knowsky.com/980422.html</a></p>
<h4 id="ccache"><a href="#ccache" class="headerlink" title="ccache"></a>ccache</h4><p><a href="http://www.cnblogs.com/fishbay/p/7217398.html" target="_blank" rel="external">http://www.cnblogs.com/fishbay/p/7217398.html</a></p>
<h4 id="webview获取内容高度常用方法的差别"><a href="#webview获取内容高度常用方法的差别" class="headerlink" title="webview获取内容高度常用方法的差别"></a>webview获取内容高度常用方法的差别</h4><p><a href="http://blog.csdn.net/fengjun10000/article/details/52668574" target="_blank" rel="external">http://blog.csdn.net/fengjun10000/article/details/52668574</a></p>
<h4 id="iOS-crash文件符号化"><a href="#iOS-crash文件符号化" class="headerlink" title="iOS crash文件符号化"></a>iOS crash文件符号化</h4><p><a href="http://wufawei.com/2014/03/symbolicating-ios-crash-logs/" target="_blank" rel="external">http://wufawei.com/2014/03/symbolicating-ios-crash-logs/</a></p>
<h4 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h4><p><a href="https://github.com/wg689/Security-And-CodeConfuse" target="_blank" rel="external">https://github.com/wg689/Security-And-CodeConfuse</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NexT主题设置]]></title>
      <url>https://jiangdaohong.github.io./2017/09/05/NexT%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>最近博客主题换成<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>，记录一下主题使用过程中遇到的小问题。<br><a id="more"></a></p>
<h3 id="谷歌字体问题"><a href="#谷歌字体问题" class="headerlink" title="谷歌字体问题"></a>谷歌字体问题</h3><p>有天打开本地服务器预览站点，发现加载非常慢，开发者工具中发现加载字体404了。然后查了一下，禁用font就好了，或者替换为可用的链接。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font</span>:</div><div class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">false</span></div></pre></td></tr></table></figure></p>
<h3 id="添加favicon"><a href="#添加favicon" class="headerlink" title="添加favicon"></a>添加favicon</h3><p>之前没注意网站的favicon，现在添加了···一张白色的图片，实在不知道用什么。<a href="http://www.faviconico.org" target="_blank" rel="external">faviconico.org</a>可以在线制作，32*32的就好了。然后我把文件放在主题下面的images文件夹<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">favicon: images/favicon.ico</div></pre></td></tr></table></figure></p>
<h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><p>头像也放在上面的文件夹了，之前用的github的头像URL链接。</p>
<h3 id="关于页面"><a href="#关于页面" class="headerlink" title="关于页面"></a>关于页面</h3><p>在5.1.2版本中，如果设置了<code>&lt;h&gt;</code>标签，会是<code>post</code>类型的文章会自动生成目录，<code>sidebar</code>的<code>dispalay</code>属性是<code>post</code>，这样的话，在关于页面使用标题，会自动打开侧边栏，本渣的解决方法是，自己写html，找不到好的方法啊。</p>
<h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>没有绑定一级域名，github默认分配的域名是不支持显示404页面的，所以要想显示自定义404页面，买买买解决。<br>但是<a href="https://neveryu.github.io/page/3/fdsa" target="_blank" rel="external">这个人的博客</a>可以，搞不清楚。</p>
<h3 id="增加SEO"><a href="#增加SEO" class="headerlink" title="增加SEO"></a>增加SEO</h3><p>站点配置文件添加配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div></pre></td></tr></table></figure></p>
<p>主题设置里面有开关。然后主要生成站点地图，以及在谷歌站长工具里面提交自己的网址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">seo: true</div><div class="line">// 通常有两种方式，一是上次一个验证文件，一种是填写一个验证码，这里使用验证码</div><div class="line">google_site_verification: xxxx你的验证码</div></pre></td></tr></table></figure></p>
<p>生成站点地图，只用Google的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 站点目录下运行npm命令</div><div class="line">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure></p>
<p>在站点source目录下手动生成一个robots.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">User-agent: *</div><div class="line">Allow: /</div><div class="line">Allow: /archives/</div><div class="line">Allow: /categories/</div><div class="line">Allow: /tags/ </div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /js/</div><div class="line">Disallow: /css/</div><div class="line">Disallow: /fonts/</div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /fancybox/</div><div class="line">Sitemap: https://你的域名/sitemap.xml</div></pre></td></tr></table></figure></p>
<p>然后重新<code>hexo g</code>。之后向谷歌提交你的网页，具体参考文章：<br><a href="http://www.jianshu.com/p/86557c34b671" target="_blank" rel="external">Hexo Seo优化让你的博客在google搜索排名第一</a>，文章还介绍了一些其他优化技巧。<br>知乎的一个回答：<br><a href="https://www.zhihu.com/question/56808910/answer/151018586" target="_blank" rel="external">2017年搭建hexo博客如何解决seo问题？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用dumpdecrypted砸壳微信]]></title>
      <url>https://jiangdaohong.github.io./2017/09/01/%E4%BD%BF%E7%94%A8dumpdecrypted%E7%A0%B8%E5%A3%B3%E5%BE%AE%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p>查看APP UI使用Reveal，但是想看一些代码的头文件，则需要使用class-dump。之前看一些APP的头文件偷懒都是直接在某助手上直接下载的砸壳成功的文件，今天有时间，手动试一下砸壳，参考文章：<a href="http://www.blogfshare.com/dumpdecrypted-app.html" target="_blank" rel="external"><br>iOS安全—dumpdecrypted APP砸壳</a><br><a id="more"></a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>设备：iPhone5c 9.0.2 已越狱<br>Cycript：0.9.594<br>微信：6.5.12<br><a href="https://github.com/stefanesser/dumpdecrypted/" target="_blank" rel="external">dumpdecrypted地址</a></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>要砸壳，首先要找到APP，然后通过dumpdecrypted生成的动态库，进行注入，然后自动砸壳，之后拷贝出砸壳后的文件就好了。<br>首先，找到微信，需要借助<code>Cycript</code>，这是什么玩意呢？<a href="http://www.cycript.org" target="_blank" rel="external">官网</a>有说</p>
<blockquote>
<p>Cycript allows developers to explore and modify running applications on<br>either iOS or Mac OS X using a hybrid of Objective-C++ and JavaScript syntax<br>through an interactive console that features syntax highlighting and tab<br>completion.(It also runs standalone on Android and Linux and provides access<br>to Java, but without injection.)</p>
</blockquote>
<p>通过这个东西的几个命令可以方便的找到微信的pid。详细语法可以以后看，今天先砸了微信再说。<br>在<code>Cydia</code>中搜索<code>Cycript</code>，进行安装，之后ssh到设备，输入<code>cycript</code>，terminal输出<code>cy#</code>，表示安装成功，进行一个测试，在<code>SpringBoard</code>中弹出一个AlertView，成功。然后查看微信的pid，是<code>7351</code>。<br>查看<code>NSDocumentDirectory</code>的<code>A路径</code>备用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.1.17</div><div class="line">root@192.168.1.17&apos;s password:</div><div class="line">Silence:~ root# cycript</div><div class="line">cy#</div><div class="line">Silence:~ root# ps -e | grep SpringBoard</div><div class="line"> 7248 ??         0:27.37 /System/Library/CoreServices/SpringBoard.app/SpringBoard</div><div class="line"> 7335 ttys000    0:00.01 grep SpringBoard</div><div class="line">Silence:~ root# cycript -p 7248</div><div class="line">cy# a = [[UIAlertView alloc] initWithTitle:@&quot;Hello World&quot; message:@&quot;Test&quot; delegate:nil cancelButtonTitle:@&quot;Cancle&quot; otherButtonTitles:nil] </div><div class="line">#&quot;&lt;UIAlertView: 0x170768d0; frame = (0 0; 0 0); layer = &lt;CALayer: 0x19a885a0&gt;&gt;&quot;</div><div class="line">cy# [a show] </div><div class="line">cy# </div><div class="line">Silence:~ root# ps aux | grep WeChat</div><div class="line">mobile    7351   0.6  6.1   762096  63004   ??  Ss    2:57PM   0:18.49 /var/mobile/Containers/Bundle/Application/6881D1C5-06FE-492A-B05C-9C4A1BD06443/WeChat.app/WeChat</div><div class="line">root      7440   0.0  0.0   538336    496 s000  S+    3:26PM   0:00.01 grep WeChat</div><div class="line">Silence:~ root# cycript -p 7351</div><div class="line">cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomans:NSUserDomainMask][0] </div><div class="line">#&quot;file:///var/mobile/Containers/Data/Application/F855AB52-3333-4B75-8676-866C8B1F1D67/Documents/&quot;</div><div class="line">cy# ^Z</div><div class="line">[1]+  Stopped(SIGTSTP)        cycript -p 7351</div></pre></td></tr></table></figure></p>
<p>下载<code>dumpdecrypted</code>，使用<code>make</code>进行编译，生成<code>dumpdecrypted.dylib</code>，使用<code>scp 本地路径 root@设备ip:A路径</code>，将库文件拷贝到iPhone中。<code>ls</code>查看文件夹下面又这个文件，拷贝成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">scp /Users/aaa/Downloads/dumpdecrypted-master/dumpdecrypted.dylib root@192.168.1.17:/var/mobile/Containers/Data/Application/F855AB52-3333-4B75-8676-866C8B1F1D67/Documents/</div><div class="line">root@192.168.1.17&apos;s password:</div><div class="line">dumpdecrypted.dylib                           100%  193KB 192.9KB/s   00:00 </div><div class="line">Silence:~ root#</div><div class="line">Display all 305 possibilities? (y or n)</div><div class="line">Silence:~ root# cd /var/mobile/Containers/Data/Application/F855AB52-3333-4B75-8</div><div class="line">676-866C8B1F1D67/Documents/</div><div class="line">Silence:/var/mobile/Containers/Data/Application/F855AB52-3333-4B75-8676-866C8B1</div><div class="line">F1D67/Documents root# ls -l</div><div class="line">total 220</div><div class="line">drwxr-xr-x  6 mobile mobile    272 Sep  1 14:57 00000000000000000000000000000000</div><div class="line">drwxr-xr-x 24 mobile mobile   1258 Aug  2 16:02 00f8dadbcfd42004516b055fefefd0f1</div><div class="line">-rw-r--r--  1 mobile mobile    286 Jun 20 17:23 Ksid</div><div class="line">-rw-r--r--  1 mobile mobile   1200 Sep  1 14:57 LocalInfo.lst</div><div class="line">drwxr-xr-x 11 mobile mobile    476 Sep  1 14:57 MMResourceMgr</div><div class="line">drwxr-xr-x  2 mobile mobile   1360 Aug 16 10:36 MMappedKV</div><div class="line">drwxr-xr-x  4 mobile mobile    170 Sep  1 14:57 MemoryStat</div><div class="line">-rw-r--r--  1 mobile mobile     15 Sep  1 15:00 SafeMode.dat</div><div class="line">-rw-r--r--  1 mobile mobile      4 Sep  1 14:57 db.globalconfig</div><div class="line">-rwxr-xr-x  1 root   mobile 197528 Sep  1 15:30 dumpdecrypted.dylib</div><div class="line">-rw-r--r--  1 mobile mobile    285 Jul 27 19:30 heavy_user_id_mapping.dat</div><div class="line">-rw-r--r--  1 mobile mobile    448 Jun 20 17:23 mmupdateinfo.archive</div></pre></td></tr></table></figure></p>
<p>然后砸壳，在动态库目录下执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Con</div><div class="line">tainers/Bundle/Application/6881D1C5-06FE-492A-B05C-9C4A1BD06443/WeChat.app/WeChat </div><div class="line">mach-o decryption dumper</div><div class="line">DISCLAIMER: This tool is only meant for security research purposes, not for application crackers.</div><div class="line">[+] detected 32bit ARM binary in memory.</div><div class="line">[+] offset to cryptid found: @0xe0a4c(from 0xe0000) = a4c</div><div class="line">[+] Found encrypted data at address 00004000 of length 55377920 bytes - type 1.</div><div class="line">[+] Opening /private/var/mobile/Containers/Bundle/Application/6881D1C5-06FE-492A-B05C-9C4A1BD06443/WeChat.app/WeChat for reading.</div><div class="line">[+] Reading header</div><div class="line">[+] Detecting header type</div><div class="line">[+] Executable is a plain MACH-O image</div><div class="line">[+] Opening WeChat.decrypted for writing.</div><div class="line">[+] Copying the not encrypted start of the file</div><div class="line">[+] Dumping the decrypted data into the file</div><div class="line">[+] Copying the not encrypted remainder of the file</div><div class="line">[+] Setting the LC_ENCRYPTION_INFO-&gt;cryptid to 0 at offset a4c</div><div class="line">[+] Closing original file</div><div class="line">[+] Closing dump file</div><div class="line">Silence:/var/mobile/Containers/Data/Application/F855AB52-3333-4B75-8676-866C8B1</div><div class="line">F1D67/Documents</div></pre></td></tr></table></figure></p>
<p><code>ls</code>查看，多了一个文件<code>WeChat.decrypted</code>，将这个文件拷贝到Mac上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root# ls</div><div class="line">00000000000000000000000000000000  MMappedKV    dumpdecrypted.dylib</div><div class="line">00f8dadbcfd42004516b055fefefd0f1  MemoryStat    heavy_user_id_mapping.dat</div><div class="line">Ksid  SafeMode.dat    mmupdateinfo.archive</div><div class="line">LocalInfo.lst  WeChat.decrypted</div><div class="line">MMResourceMgr  db.globalconfig</div><div class="line">Silence:/var/mobile/Containers/Data/Application/F855AB52-3333-4B75-8676-866C8B1</div><div class="line">scp root@192.168.1.17:/var/mobile/Containers/Data/Application/F855AB52-3333-4B75-8676-866C8B1F1D67/Documents/WeChat.decrypted /Users/aaa/Desktop/WeChat</div></pre></td></tr></table></figure></p>
<p>然后使用class-dump查看头文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class-dump -H /Users/aaa/Desktop/WeChat/WeChat.decrypted -o /Users/aaa/Desktop/WeChat/H</div></pre></td></tr></table></figure></p>
<p>也可以把砸壳文件直接丢到<code>Hopper</code>搜索查看感兴趣的API。<br>砸壳完成。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最近生活的总结]]></title>
      <url>https://jiangdaohong.github.io./2017/08/31/%E6%9C%80%E8%BF%91%E7%94%9F%E6%B4%BB%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>最近公司刚搬到滨江，也刚发布了项目，加之前一段时间参加了一个线下的iOS逆向开发者聚会，大家聊了一个关于职业规划的问题，有些感受。<br><a id="more"></a></p>
<h3 id="最近在干什么"><a href="#最近在干什么" class="headerlink" title="最近在干什么"></a>最近在干什么</h3><p>最近主要在开发关于女性抗衰老方向的APP，没什么特别的，就是一些业务代码，越发感受到一个项目框架的设计对项目的影响力。这个项目是从原来的APP移植过来的，所以大部分的代码都是相同的，但是部分需求差异性比较大，最初的项目是我自己刚毕业的时候搭建的，设计的时候没什么深层次的考虑，虽然也在近两年的开发中不断调整，但是已经有种积重难返的感觉了，所以再思考怎么将项目模块化。<br>生活方法最大的变化应该是三个月前搬到滨江住，房子发了，房租也贵了，买不起房子······但是跟两个同学住一起还是很开心，平时吃吃饭喝喝酒，好像回到了大学。<br>前两周参加了一个开发者聚会，见到了传说中的狗神和AloneMonkey，还有几个大公司的开发者，谈了一下职业规划的问题，大家有的准备转产品，有的还是想搞技术，也说了工作中的疑惑，还是引发了不少思考。附上狗神的关于创业的文章，他在聚会上提出一个观点：长期进行一项你认为好的投资，比如学英语之类，以后可能会有大帮助，比如他现在就因为英语好而可以短期转岗。<br><a href="http://iosre.com/t/topic/4152" target="_blank" rel="external"><strong>我的失败与伟大 —— 纪念历时18个月的初次创业</strong></a></p>
<h3 id="关于技术"><a href="#关于技术" class="headerlink" title="关于技术"></a>关于技术</h3><p>聚会上比谈的比较多的一个问题是：学习技术的广度和深度如何平衡？<br>我在学习过程中也遇到这个问题，并且走了不少弯路，比如现在流行全栈工程师，那就需要学习前端、后台和APP知识。所有在大学的时候也是东看看西看看，学会了各种软件的安装与卸载，着实浪费了不少时间，到最后才发现，数据结构和算法，数据库，计算机网络等基础知识才是最重要的。<br>大家也各抒己见，以自己的经历为例，谈了下自己的看法。<br>A君（资深逆向工程师）认为学习技术应先精后广，在学习过程中不断追问，加深对知识的理解，逐渐对一门技术精通，而在这个过程中，会遇到很多困难，会学习很多其他知识，自然知识的广度也会拓展，而且真正掌握一门技术之后再学习其他知识也是事半功倍的。我比较赞同这种，盲目贪多求全往往是丢了西瓜捡了芝麻。<br>B君（手机淘宝架构师）则认为学习技术先广后精。想精深一门技术难度大，而知识更新地很快，往往深入研究之后再研究其他的，精力会跟不上技术的迭代。平时只需要了解这个知识，然后到具体业务瓶颈，再进行深入研究。<br>C君（某公司主程）的想法是实用主义。他在工作中只关心这个技术带来的价值，简言之：能不能挣钱。他举了个例子，他们公司之前做的im模块是外包的，然后经常出问题，由于是静态库的形式接入的，每次出问题都要找原来开发的公司修复，一次5k rmb，他学习了逆向技术，搞定了这个问题，给公司节省了数百万的资金；还有一个例子就是之前项目打包每次都是手动，尤其是安卓，发包需要多渠道打包，既没有技术含量，又很繁琐，于是他写了个脚本，解决了这个问题，得到了大家的赞赏。<br>基本主流的就这三种看法。<br>关于未来怎么发展，狗神阐述了他的看法，他是要做一个问题的解决者。<br>何谓「问题解决者」？<br>他举例说明：他之前在部队工作，之后进行创业，并没有什么让大企业认可的简历。然而他还是被阿里录用了，原因在于当时刚好缺少一个懂逆向的资深开发，他满足需求，能解决他们业务中的逆向问题；最近阿里需要拓展国际业务，需要抽调既英文好，沟通能力佳，又技术好的人，人事找到了他，虽然到公司不足一年是不允许转岗的，但是缺乏人手，他刚好符合需求。<br>同时他还举了一个例子，说有个小伙子之前没学过逆向，买了他的书，学习非常刻苦，一年之内技术大进。然后他创业的时候需要搞个微信机器人，做自动回复功能，他就找了那个小伙子，小伙子一天做出来这个功能，后来陌陌需要逆向开发的人，狗神就把小伙子推荐到那里了，之后又推荐到盘古团队。小伙子的经历也说明了，需要掌握两门不同的技术，然后能实际解决别人的问题，才是有价值的。<br>然后狗神觉得自己的技术也达到了一定的程度，面临两个选择，一是继续搞技术，iOS应用层的逆向已经是如入无人之境了，之后就要研究内核相关了；另一个选择是做产品。他选择了做不同的事情，做产品，所以最近经常看一些名人推荐的书籍，努力提高自己。<br>说了这么多，重要的是，不要停止学习，不要停止思考。<br>KISS</p>
<h3 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h3><p>生活上还是很空白，每天上班，吃饭，码代码，面基。简单，甚至有些无缺了。想想年初的目标，好像都快忘了呢，买的书也没看完，在结合大神们的学习经历，真是羞愧，年龄差不多，人和人的差距就是这么大。以前没周末都跟家里打电话，最近也不怎么打了，国庆节马上到了，回家一次吧。学习上，准备制定个近期的学习目标。</p>
<h3 id="近期目标"><a href="#近期目标" class="headerlink" title="近期目标"></a>近期目标</h3><ol>
<li>阅读一个开源库代码</li>
<li>复习学习一下数据结构和算法</li>
<li>学习一下Python<br>以上学习最好记笔记或者写博客，向上吧，少年！</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于OC运行机制的几篇博客]]></title>
      <url>https://jiangdaohong.github.io./2017/08/31/%E5%85%B3%E4%BA%8EOC%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E7%9A%84%E5%87%A0%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>整理一下讲解OC语言相关博客<br><a id="more"></a></p>
<h3 id="ibireme的博客"><a href="#ibireme的博客" class="headerlink" title="ibireme的博客"></a><a href="https://blog.ibireme.com/archive/" target="_blank" rel="external">ibireme的博客</a></h3><p><a href="https://blog.ibireme.com/2013/11/26/objective-c-messaging/" target="_blank" rel="external">Objective-C 中的消息与消息转发</a><br><a href="https://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="external">深入理解RunLoop</a><br><a href="https://blog.ibireme.com/2013/11/25/objc-object/" target="_blank" rel="external">Objective-C 中的类和对象</a></p>
<h3 id="雷纯锋的技术博客"><a href="#雷纯锋的技术博客" class="headerlink" title="雷纯锋的技术博客"></a><a href="http://blog.leichunfeng.com/" target="_blank" rel="external">雷纯锋的技术博客</a></h3><p><a href="http://blog.leichunfeng.com/blog/2015/04/25/objective-c-object-model/" target="_blank" rel="external">Objective-C 对象模型</a><br><a href="http://blog.leichunfeng.com/blog/2015/05/02/objective-c-plus-load-vs-plus-initialize/" target="_blank" rel="external">Objective-C +load vs +initialize</a><br><a href="http://blog.leichunfeng.com/blog/2015/05/18/objective-c-category-implementation-principle/" target="_blank" rel="external">Objective-C Category 的实现原理</a><br><a href="http://blog.leichunfeng.com/blog/2015/05/31/objective-c-autorelease-pool-implementation-principle/" target="_blank" rel="external">Objective-C Autorelease Pool 的实现原理</a><br><a href="http://blog.leichunfeng.com/blog/2015/06/14/objective-c-method-swizzling-best-practice/" target="_blank" rel="external">Objective-C Method Swizzling 的最佳实践</a><br><a href="http://blog.leichunfeng.com/blog/2015/06/26/objective-c-associated-objects-implementation-principle/" target="_blank" rel="external">Objective-C Associated Objects 的实现原理</a><br><a href="http://blog.leichunfeng.com/blog/2016/06/20/objective-c-fast-enumeration-implementation-principle/" target="_blank" rel="external">Objective-C Fast Enumeration 的实现原理</a></p>
<h3 id="OneV’s-Den"><a href="#OneV’s-Den" class="headerlink" title="OneV’s Den"></a><a href="https://onevcat.com/#blog" target="_blank" rel="external">OneV’s Den</a></h3><p><a href="https://onevcat.com/2013/05/talk-about-warning/" target="_blank" rel="external">谈谈Objective-C的警告</a><br><a href="https://onevcat.com/2012/04/objective-c-runtime/" target="_blank" rel="external">深入Objective-C的动态特性</a><br><a href="https://onevcat.com/2011/12/debug-2/" target="_blank" rel="external">Objective-C中的Debug表达式</a><br><a href="https://onevcat.com/2011/11/objc-block/" target="_blank" rel="external">Objective-C中的Block</a></p>
<h3 id="sunnyxx"><a href="#sunnyxx" class="headerlink" title="sunnyxx"></a><a href="http://blog.sunnyxx.com" target="_blank" rel="external">sunnyxx</a></h3><p><a href="http://blog.sunnyxx.com/2016/08/13/reunderstanding-runtime-1/" target="_blank" rel="external">重识 Objective-C Runtime - 看透 Type 与 Value</a><br><a href="http://blog.sunnyxx.com/2016/08/13/reunderstanding-runtime-0/" target="_blank" rel="external">重识 Objective-C Runtime - Smalltalk 与 C 的融合</a><br><a href="http://blog.sunnyxx.com/2016/05/14/clang-attributes/" target="_blank" rel="external">Clang Attributes 黑魔法小记</a><br><a href="http://blog.sunnyxx.com/2016/04/22/objc-class-extension-tips/" target="_blank" rel="external">巧用 Class Extension 分离接口依赖</a><br><a href="http://blog.sunnyxx.com/2015/09/13/class-ivar-layout/" target="_blank" rel="external">Objective-C Class Ivar Layout 探索</a><br><a href="http://blog.sunnyxx.com/2015/06/12/objc-new-features-in-2015/" target="_blank" rel="external">2015 Objective-C 新特性</a><br><a href="http://blog.sunnyxx.com/2015/01/17/self-in-arc/" target="_blank" rel="external">ARC对self的内存管理</a><br><a href="http://blog.sunnyxx.com/2014/12/18/class-cluster/" target="_blank" rel="external">从NSArray看类簇</a></p>
<h3 id="唐巧的博客"><a href="#唐巧的博客" class="headerlink" title="唐巧的博客"></a><a href="http://blog.devtang.com/" target="_blank" rel="external">唐巧的博客</a></h3><p><a href="http://blog.devtang.com/2016/07/30/ios-memory-management/" target="_blank" rel="external">理解 iOS 的内存管理</a><br><a href="http://blog.devtang.com/2013/10/15/objective-c-object-model/" target="_blank" rel="external">Objective-C对象模型及应用</a><br><a href="http://blog.devtang.com/2013/01/13/two-stage-creation-on-cocoa/" target="_blank" rel="external">谈ObjC对象的两段构造模式</a></p>
<h3 id="王晓磊贴代码用的Blog"><a href="#王晓磊贴代码用的Blog" class="headerlink" title="王晓磊贴代码用的Blog"></a><a href="http://quotation.github.io" target="_blank" rel="external">王晓磊贴代码用的Blog</a></h3><p><a href="http://quotation.github.io/objc/2015/05/21/objc-runtime-ivar-access.html" target="_blank" rel="external">Objective-C类成员变量深度剖析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SDWebImage源码阅读笔记]]></title>
      <url>https://jiangdaohong.github.io./2017/08/21/SDWebImage%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>阅读一下iOS开发中最常用的 OC 图片加载缓存库<br><a id="more"></a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>SDWebImage地址: <a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">https://github.com/rs/SDWebImage</a></li>
<li>版本: 4.1.0</li>
<li>只分析 iOS OC 版本的相关实现， MacOS， watchOS等平台以及 Swift 版本暂不涉及， 代码实现大同小异</li>
</ol>
<h3 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h3><p>以下面代码为例：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[imageView sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://abc.com/1.png"</span>] placeholderImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"placeholderImage.png"</span>]];</div></pre></td></tr></table></figure></p>
<p>内部调用<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Set the imageView `image` with an `url` and optionally a placeholder image.</div><div class="line"> *</div><div class="line"> * The download is asynchronous and cached.</div><div class="line"> *</div><div class="line"> * @param url            The url for the image.</div><div class="line"> * @param placeholder    The image to be set initially， until the image request finishes.</div><div class="line"> * @param options        The options to use when downloading the image. @see SDWebImageOptions for the possible values.</div><div class="line"> * @param operationKey   A string to be used as the operation key. If nil， will use the class name</div><div class="line"> * @param setImageBlock  Block used for custom set image code</div><div class="line"> * @param progressBlock  A block called while image is downloading</div><div class="line"> *                       @note the progress block is executed on a background queue</div><div class="line"> * @param completedBlock A block called when operation has been completed. This block has no return value</div><div class="line"> *                       and takes the requested UIImage as first parameter. In case of error the image parameter</div><div class="line"> *                       is nil and the second parameter may contain an NSError. The third parameter is a Boolean</div><div class="line"> *                       indicating if the image was retrieved from the local cache or from the network.</div><div class="line"> *                       The fourth parameter is the original image url.</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)sd_internalSetImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                  placeholderImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)placeholder</div><div class="line">                           options:(SDWebImageOptions)options</div><div class="line">                      operationKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)operationKey</div><div class="line">                     setImageBlock:(<span class="keyword">nullable</span> SDSetImageBlock)setImageBlock</div><div class="line">                          progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                         completed:(<span class="keyword">nullable</span> SDExternalCompletionBlock)completedBlock;</div></pre></td></tr></table></figure></p>
<h3 id="项目目录结构及其功能"><a href="#项目目录结构及其功能" class="headerlink" title="项目目录结构及其功能"></a>项目目录结构及其功能</h3><ol>
<li><code>SDWebImageOperation</code> : 是一个<code>protocol</code>， 就定义了一个<code>cancle</code>方法; <code>SDWebImageCompat</code> 类: 主要是一些不同系统平台下的常用宏定义</li>
<li>Downloader : 下载类，主要是对<code>NSOperation</code>以及<code>NSURLSessionTask</code>以及相关操作</li>
<li>Cache : 缓存类， 主要是<code>SDImageCache</code>以及<code>SDImageCacheConfig</code>，内部涉及memory cache 和 disk cache的处理</li>
<li>Utils : 工具类， 主要是管理调用上层接口，以及一些解压图片的工具，外加一个图片预取工具类</li>
<li>Categories : 项目中使用系统类的扩展方法</li>
<li>WebCache Categories : 一些 UI 控件的扩展方法，一般是我们直接调用的接口</li>
</ol>
<h3 id="SDWebImageCompat"><a href="#SDWebImageCompat" class="headerlink" title="SDWebImageCompat"></a>SDWebImageCompat</h3><p>兼容各个平台系统的类。<br>TargetConditionals.h 这个头文件定义了系统常用的宏，比如 CPU 平台，编译器版本等。<br><code>__OBJC_GC__</code>这个宏用来判断是否当前平台是否支持GC，诸如此类。<br><code>FOUNDATION_EXPORT</code>等同于<code>FOUNDATION_EXTERN</code>，用来兼容C++，实际代码如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#if defined(__cplusplus)</span></div><div class="line"><span class="meta">#define FOUNDATION_EXTERN extern <span class="meta-string">"C"</span></span></div><div class="line"><span class="meta">#else</span></div><div class="line"><span class="meta">#define FOUNDATION_EXTERN extern</span></div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure></p>
<p>重新定义了NS_ENUM的枚举定义，兼容旧语法<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#ifndef NS_ENUM</span></div><div class="line"><span class="meta">#define NS_ENUM(_type， _name) enum _name : _type _name; enum _name : _type</span></div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line"><span class="meta">#ifndef NS_OPTIONS</span></div><div class="line"><span class="meta">#define NS_OPTIONS(_type， _name) enum _name : _type _name; enum _name : _type</span></div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure></p>
<p>快速使用主线程回调的宏：通过<code>dispatch_queue_get_label()</code>获取当前线程的<code>label</code>，<code>strcmp()</code>进行比较主线程的<code>label</code>，如果是主线程，返回；否则，异步回调到主线程，调用block<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#ifndef dispatch_main_async_safe</span></div><div class="line"><span class="meta">#define dispatch_main_async_safe(block)\</span></div><div class="line">    <span class="keyword">if</span> (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL)， dispatch_queue_get_label(dispatch_get_main_queue())) == <span class="number">0</span>) &#123;\</div><div class="line">        block();\</div><div class="line">    &#125; <span class="keyword">else</span> &#123;\</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue()， block);\</div><div class="line">    &#125;</div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure></p>
<p>根据<code>key</code>生成图片2x和3x的图片，<code>key</code>的生成之后可以看到是根据URL生成的<br><code>FOUNDATION_EXPORT UIImage *SDScaledImageForKey(NSString *key， UIImage *image);</code><br>在这个方法的实现中，为了兼容<code>WebP</code>格式的图片，使用了<code>objc_setAssociatedObject</code>动态生成一个对象用于存储循环次数。<br><code>QQ音乐技术团队</code>的微信号里面<a href="https://mp.weixin.qq.com/s/nl8SXjEycRTMfa2aMzmxSg" target="_blank" rel="external">这篇文章</a>介绍了WebP这种图片格式的优缺点，可以看一下。</p>
<h3 id="Downloader"><a href="#Downloader" class="headerlink" title="Downloader"></a>Downloader</h3><p>主要是两个类<code>SDWebImageDownloader</code>和<code>SDWebImageDownloaderOperation</code></p>
<h4 id="SDWebImageDownloader类的功能"><a href="#SDWebImageDownloader类的功能" class="headerlink" title="SDWebImageDownloader类的功能"></a>SDWebImageDownloader类的功能</h4><p>包含下载策略的枚举：首先定义了<code>SDWebImageDownloaderOptions</code>，这是下载策略的定义，初始值使用了位移操作，默认是<code>SDWebImageDownloaderUseNSURLCache</code>，支持缓存。<br><code>SDWebImageDownloaderExecutionOrder</code>这个枚举定义了下载队列的执行策略，分别为<code>FIFO</code>（队列，默认）和<code>LIFO</code>（栈）两种。<br>定义<code>SDWebImageDownloadToken</code>类，用于标记每一个下载任务，可以用于取消下载。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  A token associated with each download. Can be used to cancel a download</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SDWebImageDownloadToken</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>， <span class="keyword">strong</span>， <span class="keyword">nullable</span>) <span class="built_in">NSURL</span> *url;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>， <span class="keyword">strong</span>， <span class="keyword">nullable</span>) <span class="keyword">id</span> downloadOperationCancelToken;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h4 id="SDWebImageDownloader类的关键实现"><a href="#SDWebImageDownloader类的关键实现" class="headerlink" title="SDWebImageDownloader类的关键实现"></a>SDWebImageDownloader类的关键实现</h4><p>下载器，是一个单例，继承自<code>NSObject</code>，遵循<code>&lt;NSURLSessionTaskDelegate， NSURLSessionDataDelegate&gt;</code>协议，重点查看指定初始化方法<br><code>NS_DESIGNATED_INITIALIZER</code>用来指明此方法是指定初始化方法。<br><code>+ (void)initialize;</code>方法里面对下载开始结束进行监听，并对下载指示器<code>SDNetworkActivityIndicator</code>进行开启和关闭的操作。<br>初始化:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)initWithSessionConfiguration:(<span class="keyword">nullable</span> <span class="built_in">NSURLSessionConfiguration</span> *)sessionConfiguration &#123;</div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">    <span class="comment">// 下载队列的类， 稍后会查看这个类的实现以及作用</span></div><div class="line">        _operationClass = [SDWebImageDownloaderOperation <span class="keyword">class</span>];</div><div class="line">        <span class="comment">// 默认解压图片</span></div><div class="line">        _shouldDecompressImages = <span class="literal">YES</span>;</div><div class="line">        <span class="comment">// 下载队列，默认先进先出</span></div><div class="line">        _executionOrder = SDWebImageDownloaderFIFOExecutionOrder;</div><div class="line">        <span class="comment">// 初始化下载队列</span></div><div class="line">        _downloadQueue = [<span class="built_in">NSOperationQueue</span> new];</div><div class="line">        <span class="comment">// 最大下载数，默认6</span></div><div class="line">        _downloadQueue.maxConcurrentOperationCount = <span class="number">6</span>;</div><div class="line">        <span class="comment">// 队列名称</span></div><div class="line">        _downloadQueue.name = <span class="string">@"com.hackemist.SDWebImageDownloader"</span>;</div><div class="line">        <span class="comment">// 用于存储下载的URL</span></div><div class="line">        _URLOperations = [<span class="built_in">NSMutableDictionary</span> new];</div><div class="line"><span class="meta">#ifdef SD_WEBP</span></div><div class="line">        _HTTPHeaders = [@&#123;<span class="string">@"Accept"</span>: <span class="string">@"image/webp，image/*;q=0.8"</span>&#125; mutableCopy];</div><div class="line"><span class="meta">#else</span></div><div class="line">		<span class="comment">// 设置请求头，默认接受所有格式的图片，权重默认0.8</span></div><div class="line">        _HTTPHeaders = [@&#123;<span class="string">@"Accept"</span>: <span class="string">@"image/*;q=0.8"</span>&#125; mutableCopy];</div><div class="line"><span class="meta">#endif</span></div><div class="line">		<span class="comment">// 并发队列类型的， 用于统一操作， 保证执行完当前操作之后才进行之后的操作， 可以查看相关用法</span></div><div class="line">        _barrierQueue = dispatch_queue_create(<span class="string">"com.hackemist.SDWebImageDownloaderBarrierQueue"</span>， DISPATCH_QUEUE_CONCURRENT);</div><div class="line">        <span class="comment">// 超时时间， 默认15秒</span></div><div class="line">        _downloadTimeout = <span class="number">15.0</span>;</div><div class="line">        <span class="comment">// 配置下载任务，新建一个NSURLSession，设置当前对象为代理,delegateQueue为nil</span></div><div class="line">        [<span class="keyword">self</span> createNewSessionWithConfiguration:sessionConfiguration];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于<a href="https://jiangdaohong.github.io/2016/10/22/项目开发中的GCD实战应用/" target="_blank" rel="external">项目开发中的GCD实战应用</a>有写_barrierQueue的一般用法。<br>支持方法:<br>核心方法，下载操作，代码大致如下:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加下载进度，主要是根据URL创建一个下载队列</span></div><div class="line">- (<span class="keyword">nullable</span> SDWebImageDownloadToken *)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                                           completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock</div><div class="line">                                                   forURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                                           createCallback:(SDWebImageDownloaderOperation *(^)(<span class="keyword">void</span>))createCallback &#123;</div><div class="line">                                           </div><div class="line">   	...</div><div class="line">   	<span class="comment">// 定义一个下载任务的token</span></div><div class="line">    __block SDWebImageDownloadToken *token = <span class="literal">nil</span>;</div><div class="line">    <span class="comment">// 在barrierQueue</span></div><div class="line">    dispatch_barrier_sync(<span class="keyword">self</span>.barrierQueue， ^&#123;</div><div class="line">    	<span class="comment">// 根据URL取出下载任务，不存在则创建一个</span></div><div class="line">        SDWebImageDownloaderOperation *operation = <span class="keyword">self</span>.URLOperations[url];</div><div class="line">        <span class="keyword">if</span> (!operation) &#123;</div><div class="line">        <span class="comment">//  根据URL生成下载队列，如果一张图片会被多次下载，那么这个队列也只会创建一次</span></div><div class="line">            operation = createCallback();</div><div class="line">            <span class="keyword">self</span>.URLOperations[url] = operation;</div><div class="line">            __<span class="keyword">weak</span> SDWebImageDownloaderOperation *woperation = operation;</div><div class="line">            operation.completionBlock = ^&#123;</div><div class="line">				dispatch_barrier_sync(<span class="keyword">self</span>.barrierQueue， ^&#123;</div><div class="line">					SDWebImageDownloaderOperation *soperation = woperation;</div><div class="line">					<span class="keyword">if</span> (!soperation) <span class="keyword">return</span>;</div><div class="line">					<span class="comment">// 移除已经下载成功的URL</span></div><div class="line">					<span class="keyword">if</span> (<span class="keyword">self</span>.URLOperations[url] == soperation) &#123;</div><div class="line">						[<span class="keyword">self</span>.URLOperations removeObjectForKey:url];</div><div class="line">					&#125;;</div><div class="line">				&#125;);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置下载进度，返回一个字典，记录下载的状态</span></div><div class="line">        <span class="keyword">id</span> downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</div><div class="line">        <span class="comment">// 生成token</span></div><div class="line">        token = [SDWebImageDownloadToken new];</div><div class="line">        token.url = url;</div><div class="line">        token.downloadOperationCancelToken = downloadOperationCancelToken;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> token;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 下载任务</span></div><div class="line">- (<span class="keyword">nullable</span> SDWebImageDownloadToken *)downloadImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                                                   options:(SDWebImageDownloaderOptions)options</div><div class="line">                                                  progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                                                 completed:(<span class="keyword">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock &#123;</div><div class="line">    __<span class="keyword">weak</span> SDWebImageDownloader *wself = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addProgressCallback:progressBlock completedBlock:completedBlock forURL:url createCallback:^SDWebImageDownloaderOperation *&#123;</div><div class="line">    	...</div><div class="line">        <span class="comment">// In order to prevent from potential duplicate caching (NSURLCache + SDImageCache) we disable the cache for image requests if told otherwise</span></div><div class="line">        <span class="comment">// 注释说的很明显，这样可以防止系统重复缓存同一张图片</span></div><div class="line">        <span class="built_in">NSURLRequestCachePolicy</span> cachePolicy = <span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span>;</div><div class="line">        <span class="keyword">if</span> (options &amp; SDWebImageDownloaderUseNSURLCache) &#123;</div><div class="line">            <span class="keyword">if</span> (options &amp; SDWebImageDownloaderIgnoreCachedResponse) &#123;</div><div class="line">                cachePolicy = <span class="built_in">NSURLRequestReturnCacheDataDontLoad</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                cachePolicy = <span class="built_in">NSURLRequestUseProtocolCachePolicy</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 生成一个网络请求</span></div><div class="line">        <span class="built_in">NSMutableURLRequest</span> *request = [[<span class="built_in">NSMutableURLRequest</span> alloc] initWithURL:url cachePolicy:cachePolicy timeoutInterval:timeoutInterval];</div><div class="line">        </div><div class="line">        request.HTTPShouldHandleCookies = (options &amp; SDWebImageDownloaderHandleCookies);</div><div class="line">        <span class="comment">// HTTP管道，默认为NO，设置YES，可以允许前一个请求服务器未返回结果的时候重新发起新的请求</span></div><div class="line">        request.HTTPShouldUsePipelining = <span class="literal">YES</span>;</div><div class="line">        <span class="keyword">if</span> (sself.headersFilter) &#123;</div><div class="line">            request.allHTTPHeaderFields = sself.headersFilter(url， [sself.HTTPHeaders <span class="keyword">copy</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            request.allHTTPHeaderFields = sself.HTTPHeaders;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 生成SDWebImageDownloaderOperation类型的下载任务</span></div><div class="line">        SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];</div><div class="line">        operation.shouldDecompressImages = sself.shouldDecompressImages;</div><div class="line">        <span class="comment">// 设置证书</span></div><div class="line">        <span class="keyword">if</span> (sself.urlCredential) &#123;</div><div class="line">            operation.credential = sself.urlCredential;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sself.username &amp;&amp; sself.password) &#123;</div><div class="line">            operation.credential = [<span class="built_in">NSURLCredential</span> credentialWithUser:sself.username password:sself.password persistence:<span class="built_in">NSURLCredentialPersistenceForSession</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置队列中操作的优先级</span></div><div class="line">        <span class="keyword">if</span> (options &amp; SDWebImageDownloaderHighPriority) &#123;</div><div class="line">            operation.queuePriority = <span class="built_in">NSOperationQueuePriorityHigh</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options &amp; SDWebImageDownloaderLowPriority) &#123;</div><div class="line">            operation.queuePriority = <span class="built_in">NSOperationQueuePriorityLow</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 将操作添加到下载队列</span></div><div class="line">        [sself.downloadQueue addOperation:operation];</div><div class="line">        <span class="keyword">if</span> (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) &#123;</div><div class="line">            <span class="comment">// Emulate LIFO execution order by systematically adding new operations as last operation's dependency</span></div><div class="line">            <span class="comment">// 栈模式， 添加依赖,后进先出，所以顺序添加进来的操作，前一个操作依赖新添加进来的操作</span></div><div class="line">            [sself.lastAddedOperation addDependency:operation];</div><div class="line">            sself.lastAddedOperation = operation;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> operation;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>取消和暂停下载操作，主要是对下载队列进行操作，原生的<code>NSOperationQueue</code>是支持这些操作的，只是API的包装。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)cancel:(<span class="keyword">nullable</span> SDWebImageDownloadToken *)token &#123;</div><div class="line">    dispatch_barrier_async(<span class="keyword">self</span>.barrierQueue， ^&#123;</div><div class="line">    	<span class="comment">// 根据请求的URL取出对应的下载operation</span></div><div class="line">        SDWebImageDownloaderOperation *operation = <span class="keyword">self</span>.URLOperations[token.url];</div><div class="line">        <span class="comment">// 调用operation 的 cancle方法</span></div><div class="line">        <span class="built_in">BOOL</span> canceled = [operation cancel:token.downloadOperationCancelToken];</div><div class="line">        <span class="keyword">if</span> (canceled) &#123;</div><div class="line">        	<span class="comment">// 在字典中移除已经取消的operation</span></div><div class="line">            [<span class="keyword">self</span>.URLOperations removeObjectForKey:token.url];</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setSuspended:(<span class="built_in">BOOL</span>)suspended &#123;</div><div class="line">    <span class="keyword">self</span>.downloadQueue.suspended = suspended;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)cancelAllDownloads &#123;</div><div class="line">    [<span class="keyword">self</span>.downloadQueue cancelAllOperations];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="SDWebImageDownloaderOperation类"><a href="#SDWebImageDownloaderOperation类" class="headerlink" title="SDWebImageDownloaderOperation类"></a>SDWebImageDownloaderOperation类</h4><p><code>SDWebImageDownloaderOperationInterface</code>是一个<code>protocol</code>，定义了<code>SDWebImageDownloaderOperation</code>的一些重要方法，包括初始化方法以及添加进度的方法<br> <code>SDWebImageDownloaderOperation</code>的声明，<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 继承自 NSOperation</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SDWebImageDownloaderOperation</span> : <span class="title">NSOperation</span> &lt;<span class="title">SDWebImageDownloaderOperationInterface</span>, <span class="title">SDWebImageOperation</span>, <span class="title">NSURLSessionTaskDelegate</span>, <span class="title">NSURLSessionDataDelegate</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p> 其中后两个协议<code>SDWebImageDownloader</code>也实现了，并且回调中只是把回调传递给operation类，即真实的NSURLSession 的 Delegate方法实际是在operation类中进行回调处理，下载器只是一层回调包装。<br>查看这个类中的实现,初始化方法中生成一些默认属性以及一个队列<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This is weak because it is injected by whoever manages this session. If this gets nil-ed out, we won't be able to run</span></div><div class="line"><span class="comment">// the task associated with this operation</span></div><div class="line"><span class="comment">// 初始化中的session,使用这个弱引用保存</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSURLSession</span> *unownedSession;</div><div class="line"><span class="comment">// This is set if we're using not using an injected NSURLSession. We're responsible of invalidating this one</span></div><div class="line"><span class="comment">// 强引用的session需要手动销毁</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSURLSession</span> *ownedSession;</div></pre></td></tr></table></figure></p>
<p><code>SDWebImageDownloaderOperationInterface</code>中的一个方法引人注目:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)addHandlersForProgress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                            completed:(<span class="keyword">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock &#123;</div><div class="line">                            <span class="comment">// 一个字典,用户保存执行状态,并按照顺序添加到队列中</span></div><div class="line">    SDCallbacksDictionary *callbacks = [<span class="built_in">NSMutableDictionary</span> new];</div><div class="line">    <span class="keyword">if</span> (progressBlock) callbacks[kProgressCallbackKey] = [progressBlock <span class="keyword">copy</span>];</div><div class="line">    <span class="keyword">if</span> (completedBlock) callbacks[kCompletedCallbackKey] = [completedBlock <span class="keyword">copy</span>];</div><div class="line">    <span class="comment">// 异步顺序添加到队列中,所有状态都保存在self.callbackBlocks中</span></div><div class="line">    dispatch_barrier_async(<span class="keyword">self</span>.barrierQueue, ^&#123;</div><div class="line">        [<span class="keyword">self</span>.callbackBlocks addObject:callbacks];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> callbacks;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关注开始,取消,重置,完成等方法。<br>完成:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)done &#123;</div><div class="line">	<span class="comment">// 调用set方法</span></div><div class="line">    <span class="keyword">self</span>.finished = <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">self</span>.executing = <span class="literal">NO</span>;</div><div class="line">    <span class="comment">// 调用重置方法</span></div><div class="line">    [<span class="keyword">self</span> reset];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 手动调用kvo,在下载类中进行监听</span></div><div class="line">- (<span class="keyword">void</span>)setFinished:(<span class="built_in">BOOL</span>)finished &#123;</div><div class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isFinished"</span>];</div><div class="line">    _finished = finished;</div><div class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isFinished"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setExecuting:(<span class="built_in">BOOL</span>)executing &#123;</div><div class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isExecuting"</span>];</div><div class="line">    _executing = executing;</div><div class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isExecuting"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重置:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)reset &#123;</div><div class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</div><div class="line">    dispatch_barrier_async(<span class="keyword">self</span>.barrierQueue, ^&#123;</div><div class="line">    	<span class="comment">// 移除所有状态</span></div><div class="line">        [weakSelf.callbackBlocks removeAllObjects];</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// 置空操作</span></div><div class="line">    <span class="keyword">self</span>.dataTask = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">self</span>.imageData = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.ownedSession) &#123;</div><div class="line">    	<span class="comment">// 销毁session,立即取消所有任务</span></div><div class="line">        [<span class="keyword">self</span>.ownedSession invalidateAndCancel];</div><div class="line">        <span class="keyword">self</span>.ownedSession = <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>取消:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SDWebImageDownloaderOperationInterface协议方法</span></div><div class="line">- (<span class="built_in">BOOL</span>)cancel:(<span class="keyword">nullable</span> <span class="keyword">id</span>)token &#123;</div><div class="line">    __block <span class="built_in">BOOL</span> shouldCancel = <span class="literal">NO</span>;</div><div class="line">    dispatch_barrier_sync(<span class="keyword">self</span>.barrierQueue, ^&#123;</div><div class="line">    	<span class="comment">// 移除所有token类型的对象,即保存下载状态的字典</span></div><div class="line">        [<span class="keyword">self</span>.callbackBlocks removeObjectIdenticalTo:token];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.callbackBlocks.count == <span class="number">0</span>) &#123;</div><div class="line">            shouldCancel = <span class="literal">YES</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">if</span> (shouldCancel) &#123;</div><div class="line">        [<span class="keyword">self</span> cancel];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> shouldCancel;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)cancel &#123;</div><div class="line">	<span class="comment">// 同步锁,实际调用cancelInternal</span></div><div class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> cancelInternal];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)cancelInternal &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.isFinished) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">// 调用父类方法</span></div><div class="line">    [<span class="keyword">super</span> cancel];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.dataTask) &#123;</div><div class="line">        [<span class="keyword">self</span>.dataTask cancel];</div><div class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:weakSelf];</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// As we cancelled the connection, its callback won't be called and thus won't</span></div><div class="line">        <span class="comment">// maintain the isFinished and isExecuting flags.</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.isExecuting) <span class="keyword">self</span>.executing = <span class="literal">NO</span>;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">self</span>.isFinished) <span class="keyword">self</span>.finished = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> reset];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重写了<code>start</code>方法:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)start &#123;</div><div class="line">	<span class="comment">// 同步锁</span></div><div class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</div><div class="line">    	<span class="comment">// 如果被标记为结束</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.isCancelled) &#123;</div><div class="line">        	<span class="comment">// 任务结束</span></div><div class="line">            <span class="keyword">self</span>.finished = <span class="literal">YES</span>;</div><div class="line">            <span class="comment">// 重置</span></div><div class="line">            [<span class="keyword">self</span> reset];</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="meta">#if SD_UIKIT</span></div><div class="line">        Class <span class="built_in">UIApplicationClass</span> = <span class="built_in">NSClassFromString</span>(<span class="string">@"UIApplication"</span>);</div><div class="line">        <span class="built_in">BOOL</span> hasApplication = <span class="built_in">UIApplicationClass</span> &amp;&amp; [<span class="built_in">UIApplicationClass</span> respondsToSelector:<span class="keyword">@selector</span>(sharedApplication)];</div><div class="line">        <span class="comment">// 是否进入后台工作</span></div><div class="line">        <span class="keyword">if</span> (hasApplication &amp;&amp; [<span class="keyword">self</span> shouldContinueWhenAppEntersBackground]) &#123;</div><div class="line">            __<span class="keyword">weak</span> __typeof__ (<span class="keyword">self</span>) wself = <span class="keyword">self</span>;</div><div class="line">            <span class="built_in">UIApplication</span> * app = [<span class="built_in">UIApplicationClass</span> performSelector:<span class="keyword">@selector</span>(sharedApplication)];</div><div class="line">            <span class="comment">// 后台任务</span></div><div class="line">            <span class="keyword">self</span>.backgroundTaskId = [app beginBackgroundTaskWithExpirationHandler:^&#123;</div><div class="line">                __<span class="keyword">strong</span> __<span class="keyword">typeof</span> (wself) sself = wself;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (sself) &#123;</div><div class="line">                	<span class="comment">// 结束任务,防止崩溃</span></div><div class="line">                    [sself cancel];</div><div class="line">                    [app endBackgroundTask:sself.backgroundTaskId];</div><div class="line">                    <span class="comment">// 后台ID置为无效</span></div><div class="line">                    sself.backgroundTaskId = <span class="built_in">UIBackgroundTaskInvalid</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;];</div><div class="line">        &#125;</div><div class="line"><span class="meta">#endif</span></div><div class="line">		<span class="comment">// 获取当前任务</span></div><div class="line">        <span class="built_in">NSURLSession</span> *session = <span class="keyword">self</span>.unownedSession;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">self</span>.unownedSession) &#123;</div><div class="line">        	<span class="comment">// 不存在则创建</span></div><div class="line">            <span class="built_in">NSURLSessionConfiguration</span> *sessionConfig = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">            sessionConfig.timeoutIntervalForRequest = <span class="number">15</span>;</div><div class="line">            </div><div class="line">            <span class="comment">/**</span></div><div class="line">             *  Create the session for this task</div><div class="line">             *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate</div><div class="line">             *  method calls and completion handler calls.</div><div class="line">             */</div><div class="line">            <span class="keyword">self</span>.ownedSession = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:sessionConfig</div><div class="line">                                                              delegate:<span class="keyword">self</span></div><div class="line">                                                         delegateQueue:<span class="literal">nil</span>];</div><div class="line">            session = <span class="keyword">self</span>.ownedSession;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">self</span>.dataTask = [session dataTaskWithRequest:<span class="keyword">self</span>.request];</div><div class="line">        <span class="comment">// 手动调用kvo</span></div><div class="line">        <span class="keyword">self</span>.executing = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 开始任务</span></div><div class="line">    [<span class="keyword">self</span>.dataTask resume];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.dataTask) &#123;</div><div class="line">        <span class="keyword">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class="keyword">in</span> [<span class="keyword">self</span> callbacksForKey:kProgressCallbackKey]) &#123;</div><div class="line">            progressBlock(<span class="number">0</span>, <span class="built_in">NSURLResponseUnknownLength</span>, <span class="keyword">self</span>.request.URL);</div><div class="line">        &#125;</div><div class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        	<span class="comment">// 在主线程中发通知,下载任务开始</span></div><div class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:weakSelf];</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">// 异常</span></div><div class="line">        [<span class="keyword">self</span> callCompletionBlocksWithError:[<span class="built_in">NSError</span> errorWithDomain:<span class="built_in">NSURLErrorDomain</span> code:<span class="number">0</span> userInfo:@&#123;<span class="built_in">NSLocalizedDescriptionKey</span> : <span class="string">@"Connection can't be initialized"</span>&#125;]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#if SD_UIKIT</span></div><div class="line">	<span class="comment">// 再次判断程序是否存活</span></div><div class="line">    Class <span class="built_in">UIApplicationClass</span> = <span class="built_in">NSClassFromString</span>(<span class="string">@"UIApplication"</span>);</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">UIApplicationClass</span> || ![<span class="built_in">UIApplicationClass</span> respondsToSelector:<span class="keyword">@selector</span>(sharedApplication)]) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.backgroundTaskId != <span class="built_in">UIBackgroundTaskInvalid</span>) &#123;</div><div class="line">        <span class="built_in">UIApplication</span> * app = [<span class="built_in">UIApplication</span> performSelector:<span class="keyword">@selector</span>(sharedApplication)];</div><div class="line">        [app endBackgroundTask:<span class="keyword">self</span>.backgroundTaskId];</div><div class="line">        <span class="keyword">self</span>.backgroundTaskId = <span class="built_in">UIBackgroundTaskInvalid</span>;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于并发属性,已经废弃使用<code>concurrent</code>,需要重写NSOperation的方法,可以用<code>asynchronous</code>代替<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span>=isConcurrent) <span class="built_in">BOOL</span> concurrent; <span class="comment">// To be deprecated; use and override 'asynchronous' below</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span>=isAsynchronous) <span class="built_in">BOOL</span> asynchronous <span class="built_in">NS_AVAILABLE</span>(<span class="number">10</span>_8, <span class="number">7</span>_0);</div><div class="line">- (<span class="built_in">BOOL</span>)isConcurrent &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>NSURLSessionDataDelegate</code>方法<br>接收到服务器响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)URLSession:(NSURLSession *)session</div><div class="line">          dataTask:(NSURLSessionDataTask *)dataTask</div><div class="line">didReceiveResponse:(NSURLResponse *)response</div><div class="line"> completionHandler:(void (^)(NSURLSessionResponseDisposition disposition))completionHandler;</div></pre></td></tr></table></figure></p>
<p>首先状态码判断，无状态码或者是400以下并且不是304错误，根据<code>response</code>取出<code>expectedContentLength</code>，并赋值给属性<code>expectedSize</code>，设置对应请求的数据总长度，创建存储<code>imageDate</code>的可变对象，在主线程发送接收到服务器返回的通知。<br>否则，取消任务，并且发通知下载停止。</p>
<blockquote>
<p>//‘304 Not Modified’ is an exceptional one</p>
</blockquote>
<p>接收到数据<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask didReceiveData:(<span class="built_in">NSData</span> *)data;</div></pre></td></tr></table></figure></p>
<p>这一步进行数据的拼接<code>self.options &amp; SDWebImageDownloaderProgressiveDownload</code>,并回调下载进度。options默认为0，只有设置过SDWebImageDownloaderProgressiveDownload模式，才会进条件，执行图片的创建，以及解压缩操作。<br>创建图片的方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个image source ref,option 设置为空，所有option</span></div><div class="line"><span class="comment">// CFStringRef kCGImageSourceTypeIdentifierHint;</span></div><div class="line"><span class="comment">// CFStringRef kCGImageSourceShouldAllowFloat;</span></div><div class="line"><span class="comment">// CFStringRef kCGImageSourceShouldCache;</span></div><div class="line"><span class="comment">// CFStringRef kCGImageSourceCreateThumbnailFromImageIfAbsent;</span></div><div class="line"><span class="comment">// CFStringRef kCGImageSourceCreateThumbnailFromImageAlways;</span></div><div class="line"><span class="comment">// CFStringRef kCGImageSourceThumbnailMaxPixelSize;</span></div><div class="line"><span class="comment">// CFStringRef kCGImageSourceCreateThumbnailWithTransform </span></div><div class="line"><span class="built_in">CGImageSourceRef</span> imageSource = <span class="built_in">CGImageSourceCreateWithData</span>((__bridge <span class="built_in">CFDataRef</span>)<span class="keyword">self</span>.imageData, <span class="literal">NULL</span>);</div><div class="line"><span class="comment">// ... 判断图片的方向以及高度和宽度,保存图片的方向</span></div><div class="line"><span class="comment">// When we draw to Core Graphics, we lose orientation information,</span></div><div class="line"><span class="comment">// which means the image below born of initWithCGIImage will be</span></div><div class="line"><span class="comment">// oriented incorrectly sometimes. (Unlike the image born of initWithData</span></div><div class="line"><span class="comment">// in didCompleteWithError.) So save it here and pass it on later.</span></div><div class="line"><span class="comment">// 创建一个 image ref,设置为空，不做缓存操作</span></div><div class="line"><span class="comment">/*</span></div><div class="line">CGContextRef CGBitmapContextCreate (</div><div class="line">   void *data,</div><div class="line">   size_t width,</div><div class="line">   size_t height,</div><div class="line">   size_t bitsPerComponent, // 内存中像素的每个组件的位数.例如，对于32位像素格式和RGB 颜色空间，你应该将这个值设为8.</div><div class="line">   size_t bytesPerRow, // bitmap的每一行在内存所占的比特数</div><div class="line">   CGColorSpaceRef colorspace, // 颜色空间</div><div class="line">   CGBitmapInfo bitmapInfo // 信息,比如通道，或者像素排布的方式</div><div class="line">);</div><div class="line">*/</div><div class="line"><span class="built_in">CGImageRef</span> partialImageRef = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(imageSource, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line"><span class="keyword">if</span> (partialImageRef) &#123;</div><div class="line">                <span class="keyword">const</span> size_t partialHeight = <span class="built_in">CGImageGetHeight</span>(partialImageRef);</div><div class="line">                <span class="comment">// iPhone上，图片的颜色空间使用rgb,其他的可以自行了解</span></div><div class="line">                <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</div><div class="line">                <span class="comment">// 创建一个bitmap上下文,32位颜色，设置为8位（r,g,b,a每个为4b）,所以需要宽度 * 4</span></div><div class="line">                <span class="comment">// kCGImageAlphaPremultipliedFirst // premultiplied ARGB</span></div><div class="line">                <span class="built_in">CGContextRef</span> bmContext = <span class="built_in">CGBitmapContextCreate</span>(<span class="literal">NULL</span>, width, height, <span class="number">8</span>, width * <span class="number">4</span>, colorSpace, kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);</div><div class="line">                <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</div><div class="line">                <span class="keyword">if</span> (bmContext) &#123;</div><div class="line">                <span class="comment">// 绘制</span></div><div class="line">                    <span class="built_in">CGContextDrawImage</span>(bmContext, (<span class="built_in">CGRect</span>)&#123;.origin.x = <span class="number">0.0</span>f, .origin.y = <span class="number">0.0</span>f, .size.width = width, .size.height = partialHeight&#125;, partialImageRef);</div><div class="line">                    <span class="built_in">CGImageRelease</span>(partialImageRef);</div><div class="line">                    <span class="comment">// 根据上下文创建</span></div><div class="line">                    partialImageRef = <span class="built_in">CGBitmapContextCreateImage</span>(bmContext);</div><div class="line">                    <span class="built_in">CGContextRelease</span>(bmContext);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="built_in">CGImageRelease</span>(partialImageRef);</div><div class="line">                    partialImageRef = <span class="literal">nil</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithCGImage:partialImageRef scale:<span class="number">1</span> orientation:orientation];</div><div class="line"><span class="comment">// 进行缩放</span></div><div class="line"><span class="built_in">NSString</span> *key = [[SDWebImageManager sharedManager] cacheKeyForURL:<span class="keyword">self</span>.request.URL];</div><div class="line"><span class="built_in">UIImage</span> *scaledImage = [<span class="keyword">self</span> scaledImageForKey:key image:image];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.shouldDecompressImages) &#123;</div><div class="line"><span class="comment">// 图片解压</span></div><div class="line">   image = [<span class="built_in">UIImage</span> decodedImageWithImage:scaledImage];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">   image = scaledImage;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>系统即将缓存<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</div><div class="line">          dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</div><div class="line"> willCacheResponse:(<span class="built_in">NSCachedURLResponse</span> *)proposedResponse</div><div class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSCachedURLResponse</span> *cachedResponse))completionHandler &#123;</div><div class="line"> <span class="comment">// 置空</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>.request.cachePolicy == <span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span>) &#123;</div><div class="line">        <span class="comment">// Prevents caching of responses</span></div><div class="line">        cachedResponse = <span class="literal">nil</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>关于证书的处理，具体参考代码实现<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task didReceiveChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition, <span class="built_in">NSURLCredential</span> *credential))completionHandler</div></pre></td></tr></table></figure></p>
<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><p>使用SDWebimage的原因，一是支持并发请求，二是支持图片缓存，下面看一下作者是如何构建一个图片下载库的缓存系统的。<br>Cache文件夹下主要有两个类</p>
<h4 id="SDImageCacheConfig，缓存配置类"><a href="#SDImageCacheConfig，缓存配置类" class="headerlink" title="SDImageCacheConfig，缓存配置类"></a>SDImageCacheConfig，缓存配置类</h4><p>这个类简单一些，主要用于配置下载缓存的配置，比如缓存大小（0），缓存时间（默认一周），是否使用内存缓存（YES），是否禁用iCloud（默认禁用），是否解压图片（默认解压）</p>
<h4 id="SDImageCache，缓存类"><a href="#SDImageCache，缓存类" class="headerlink" title="SDImageCache，缓存类"></a>SDImageCache，缓存类</h4><p>是个单例，继承自NSObject，属性中有<code>memCache</code>，用于内存缓存，<code>diskCachePath</code>，记录文件存储的文件夹，<code>ioQueue</code>，用于文件读写的队列，还有配置类，<code>maxMemoryCost</code>，<code>maxMemoryCountLimit</code>等设置项，<code>customPaths</code>用于存储那些预取的图片存储路径。<br>缓存使用内存缓存+文件缓存的策略。<br>内存缓存使用    <code>NSCache</code>实现，文件缓存是将图片URL进行处理（MD5）生成唯一文件名，然后存储在磁盘上。<br>创建，指定初始化方法<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)initWithNamespace:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)ns</div><div class="line">                       diskCacheDirectory:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)directory &#123;</div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">    <span class="comment">// 默认后缀是 default</span></div><div class="line">        <span class="built_in">NSString</span> *fullNamespace = [<span class="string">@"com.hackemist.SDWebImageCache."</span> stringByAppendingString:ns];</div><div class="line">        </div><div class="line">        <span class="comment">// Create IO serial queue</span></div><div class="line">        _ioQueue = dispatch_queue_create(<span class="string">"com.hackemist.SDWebImageCache"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line">        <span class="comment">// 默认的配置</span></div><div class="line">        _config = [[SDImageCacheConfig alloc] init];</div><div class="line">        </div><div class="line">        <span class="comment">// Init the memory cache</span></div><div class="line">        _memCache = [[AutoPurgeCache alloc] init];</div><div class="line">        _memCache.name = fullNamespace;</div><div class="line"></div><div class="line">        <span class="comment">// Init the disk cache</span></div><div class="line">        <span class="keyword">if</span> (directory != <span class="literal">nil</span>) &#123;</div><div class="line">            _diskCachePath = [directory stringByAppendingPathComponent:fullNamespace];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">NSString</span> *path = [<span class="keyword">self</span> makeDiskCachePath:ns];</div><div class="line">            _diskCachePath = path;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">dispatch_sync</span>(_ioQueue, ^&#123;</div><div class="line">            _fileManager = [<span class="built_in">NSFileManager</span> new];</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="meta">#if SD_UIKIT</span></div><div class="line">        <span class="comment">// 初始化订阅的通知</span></div><div class="line">        <span class="comment">// UIApplicationDidReceiveMemoryWarningNotification</span></div><div class="line">        <span class="comment">// UIApplicationWillTerminateNotification</span></div><div class="line">        <span class="comment">// UIApplicationDidEnterBackgroundNotification</span></div><div class="line"><span class="meta">#endif</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分别看图片的操作。<br>存储，核心方法如下<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)storeImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image</div><div class="line">         imageData:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)imageData</div><div class="line">            forKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key</div><div class="line">            toDisk:(<span class="built_in">BOOL</span>)toDisk</div><div class="line">        completion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class="line">    ... <span class="comment">// 空值处理</span></div><div class="line">    <span class="comment">// if memory cache is enabled</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class="line">    <span class="comment">// 根据图片尺寸计算 cost</span></div><div class="line">        <span class="built_in">NSUInteger</span> cost = SDCacheCostForImage(image);</div><div class="line">        <span class="comment">// 添加内存缓存</span></div><div class="line">        [<span class="keyword">self</span>.memCache setObject:image forKey:key cost:cost];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 图片解压缩，磁盘缓存是耗时操作，在 ioQueue 操作，防止阻塞主线程</span></div><div class="line">    <span class="keyword">if</span> (toDisk) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</div><div class="line">        <span class="comment">// 大量对象生成释放，使用autoreleasepool控制内存</span></div><div class="line">            <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">                <span class="built_in">NSData</span> *data = imageData;</div><div class="line">                <span class="keyword">if</span> (!data &amp;&amp; image) &#123;</div><div class="line">                <span class="comment">// 图片二进制数据不存在，重新生成，首先获取图片的格式，然后使用`UIImagePNGRepresentation`或者`UIImageJPEGRepresentation`生成图片，之后会查看NSData的这些分类方法</span></div><div class="line">                    SDImageFormat imageFormatFromData = [<span class="built_in">NSData</span> sd_imageFormatForImageData:data];</div><div class="line">                    data = [image sd_imageDataAsFormat:imageFormatFromData];</div><div class="line">                &#125;   </div><div class="line">                <span class="comment">// 磁盘缓存核心方法             </span></div><div class="line">                [<span class="keyword">self</span> storeImageDataToDisk:data forKey:key];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (completionBlock) &#123;</div><div class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                <span class="comment">// 主线程回调</span></div><div class="line">                    completionBlock();</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ... <span class="comment">// 回调</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)storeImageDataToDisk:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)imageData forKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</div><div class="line">    ... <span class="comment">// 空值操作</span></div><div class="line">    <span class="comment">// 检测当前线程，核心方法</span></div><div class="line">    <span class="comment">// const char *currentQueueLabel = dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL);</span></div><div class="line">    <span class="comment">// 获取当前队列的label与ioQueue的label进行比较</span></div><div class="line">    [<span class="keyword">self</span> checkIfQueueIsIOQueue];</div><div class="line">    <span class="comment">// 创建缓存文件的文件夹</span></div><div class="line">    <span class="keyword">if</span> (![_fileManager fileExistsAtPath:_diskCachePath]) &#123;</div><div class="line">        [_fileManager createDirectoryAtPath:_diskCachePath withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:<span class="literal">NULL</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// get cache Path for image key</span></div><div class="line">    <span class="built_in">NSString</span> *cachePathForKey = [<span class="keyword">self</span> defaultCachePathForKey:key];</div><div class="line">    <span class="comment">// transform to NSUrl</span></div><div class="line">    <span class="built_in">NSURL</span> *fileURL = [<span class="built_in">NSURL</span> fileURLWithPath:cachePathForKey];</div><div class="line">    <span class="comment">// 写入磁盘</span></div><div class="line">    [_fileManager createFileAtPath:cachePathForKey contents:imageData attributes:<span class="literal">nil</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// disable iCloud backup</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.config.shouldDisableiCloud) &#123;</div><div class="line">    <span class="comment">// iCloud同步文件</span></div><div class="line">        [fileURL setResourceValue:@YES forKey:<span class="built_in">NSURLIsExcludedFromBackupKey</span> error:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查询，核心方法<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSOperation</span> *)queryCacheOperationForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key done:(<span class="keyword">nullable</span> SDCacheQueryCompletedBlock)doneBlock &#123;</div><div class="line">    ...<span class="comment">//空值处理</span></div><div class="line">    <span class="comment">// First check the in-memory cache...</span></div><div class="line">    <span class="comment">// 查询内存缓存</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="keyword">self</span> imageFromMemoryCacheForKey:key];</div><div class="line">    <span class="keyword">if</span> (image) &#123;</div><div class="line">        <span class="built_in">NSData</span> *diskData = <span class="literal">nil</span>;</div><div class="line">        <span class="comment">// isGIF单独处理</span></div><div class="line">        <span class="keyword">if</span> ([image isGIF]) &#123;</div><div class="line">            diskData = [<span class="keyword">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (doneBlock) &#123;</div><div class="line">        <span class="comment">// 查询完成，是内存缓存，并未在io线程操作</span></div><div class="line">            doneBlock(image, diskData, SDImageCacheTypeMemory);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSOperation</span> *operation = [<span class="built_in">NSOperation</span> new];</div><div class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</div><div class="line">        <span class="comment">// 判断是否取消</span></div><div class="line">        <span class="keyword">if</span> (operation.isCancelled) &#123;</div><div class="line">            <span class="comment">// do not call the completion if cancelled</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="comment">// 磁盘查询</span></div><div class="line">            <span class="built_in">NSData</span> *diskData = [<span class="keyword">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class="line">            <span class="built_in">UIImage</span> *diskImage = [<span class="keyword">self</span> diskImageForKey:key];</div><div class="line">            <span class="keyword">if</span> (diskImage &amp;&amp; <span class="keyword">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class="line">            <span class="comment">// 设置或修改内存缓存，方便下次查询</span></div><div class="line">                <span class="built_in">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</div><div class="line">                [<span class="keyword">self</span>.memCache setObject:diskImage forKey:key cost:cost];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (doneBlock) &#123;</div><div class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                    doneBlock(diskImage, diskData, SDImageCacheTypeDisk);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> operation;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>删除<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)removeImageForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key fromDisk:(<span class="built_in">BOOL</span>)fromDisk withCompletion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completion &#123;</div><div class="line">  <span class="comment">// 清除内存缓存</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class="line">        [<span class="keyword">self</span>.memCache removeObjectForKey:key];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (fromDisk) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</div><div class="line">        <span class="comment">// 文件删除</span></div><div class="line">            [_fileManager removeItemAtPath:[<span class="keyword">self</span> defaultCachePathForKey:key] error:<span class="literal">nil</span>];</div><div class="line">            <span class="keyword">if</span> (completion) &#123;</div><div class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                    completion();</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (completion)&#123;</div><div class="line">        completion();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 清除全部内存缓存</span></div><div class="line">- (<span class="keyword">void</span>)clearMemory &#123;</div><div class="line">    [<span class="keyword">self</span>.memCache removeAllObjects];</div><div class="line">&#125;</div><div class="line"><span class="comment">// 清除全部磁盘缓存</span></div><div class="line">- (<span class="keyword">void</span>)clearDiskOnCompletion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completion &#123;</div><div class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</div><div class="line">        [_fileManager removeItemAtPath:<span class="keyword">self</span>.diskCachePath error:<span class="literal">nil</span>];</div><div class="line">        <span class="comment">// 创建空文件夹，方便覆盖以及下次缓存文件</span></div><div class="line">        [_fileManager createDirectoryAtPath:<span class="keyword">self</span>.diskCachePath</div><div class="line">                withIntermediateDirectories:<span class="literal">YES</span></div><div class="line">                                 attributes:<span class="literal">nil</span></div><div class="line">                                      error:<span class="literal">NULL</span>];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (completion) &#123;</div><div class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                completion();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了上面的核心方法，这个类还提供了一些工具方法，以及一些辅助方法。比如获取缓存文件个数，缓存大小，删除失效的缓存文件，内存警告的时候自动清除缓存，实现原来大概如下：子类化一个NSCache，<code>AutoPurgeCache</code>，在初始化方法中添加<code>UIApplicationDidReceiveMemoryWarningNotification</code>观察，当收到系统的内存警告，调用<code>removeAllObjects</code>清理掉缓存。</p>
<h3 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h3><p>辅助类，主要是一些工具方法</p>
<h4 id="SDWebImageManager，重要的调度类"><a href="#SDWebImageManager，重要的调度类" class="headerlink" title="SDWebImageManager，重要的调度类"></a>SDWebImageManager，重要的调度类</h4><p>前两部分的缓存类，下载器类，除了个别API，一般不需要使用者直接调用，而是在这个类中进行使用的。这个类主要包括<code>SDWebImageCombinedOperation</code>，一个<code>SDWebImageManagerDelegate</code>和<code>SDWebImageManager</code>的单例对象。<br>SDWebImageCombinedOperation 遵循<code>SDWebImageOperation</code>协议，用于取消下载操作，实现方法里面有置空Block的操作。有一个<code>cacheOperation</code>的属性，用于存储需要cancle的操作。<br>SDWebImageManagerDelegate 主要定义了两个方法，一个是控制是否下载缓存中没有的图片，一个是缓存图片之前的调用方法，为防止主线程阻塞，回调是在一个全局队列。<br>SDWebImageManager的主要构成：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SDWebImageManager</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="keyword">id</span> &lt;SDWebImageManagerDelegate&gt; delegate;</div><div class="line"><span class="comment">// 缓存类</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">nullable</span>) SDImageCache *imageCache;</div><div class="line"><span class="comment">// 下载器</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">nullable</span>) SDWebImageDownloader *imageDownloader;</div><div class="line"><span class="comment">// 下载失败的URLs</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSMutableSet</span>&lt;<span class="built_in">NSURL</span> *&gt; *failedURLs;</div><div class="line"><span class="comment">// 保存正在下载的操作</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSMutableArray</span>&lt;SDWebImageCombinedOperation *&gt; *runningOperations;</div></pre></td></tr></table></figure></p>
<p>指定初始化方法是必须初始化缓存以及下载器。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)initWithCache:(<span class="keyword">nonnull</span> SDImageCache *)cache downloader:(<span class="keyword">nonnull</span> SDWebImageDownloader *)downloader;</div></pre></td></tr></table></figure></p>
<p>主要方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Allows to specify instance of cache and image downloader used with image manager.</div><div class="line"> * @return new instance of `SDWebImageManager` with specified cache and downloader.</div><div class="line"> */</div><div class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)initWithCache:(<span class="keyword">nonnull</span> SDImageCache *)cache downloader:(<span class="keyword">nonnull</span> SDWebImageDownloader *)downloader <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 加载图片核心方法</div><div class="line">*/</div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;SDWebImageOperation&gt;)loadImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                                              options:(SDWebImageOptions)options</div><div class="line">                                             progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                                            completed:(<span class="keyword">nullable</span> SDInternalCompletionBlock)completedBlock &#123;</div><div class="line">... url 的格式处理</div><div class="line"><span class="comment">// 创建一个对象用于保存加载图片的操作</span></div><div class="line">    __block SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new];</div><div class="line">    __<span class="keyword">weak</span> SDWebImageCombinedOperation *weakOperation = operation;</div><div class="line">    <span class="built_in">BOOL</span> isFailedUrl = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">if</span> (url) &#123;</div><div class="line">        <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.failedURLs) &#123;</div><div class="line">        <span class="comment">// 是否是下载失败的图片，默认下载失败会重新下载</span></div><div class="line">            isFailedUrl = [<span class="keyword">self</span>.failedURLs containsObject:url];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 链接无效</span></div><div class="line">    <span class="keyword">if</span> (url.absoluteString.length == <span class="number">0</span> || (!(options &amp; SDWebImageRetryFailed) &amp;&amp; isFailedUrl)) &#123;</div><div class="line">        [<span class="keyword">self</span> callCompletionBlockForOperation:operation completion:completedBlock error:[<span class="built_in">NSError</span> errorWithDomain:<span class="built_in">NSURLErrorDomain</span> code:<span class="built_in">NSURLErrorFileDoesNotExist</span> userInfo:<span class="literal">nil</span>] url:url];</div><div class="line">        <span class="keyword">return</span> operation;</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 保存正在下载的操作</span></div><div class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.runningOperations) &#123;</div><div class="line">        [<span class="keyword">self</span>.runningOperations addObject:operation];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 获取key，根据URL转成string，提供block可以自定义生成key的方法</span></div><div class="line">    <span class="built_in">NSString</span> *key = [<span class="keyword">self</span> cacheKeyForURL:url];</div><div class="line"><span class="comment">// 首先缓存中查询</span></div><div class="line">    operation.cacheOperation = [<span class="keyword">self</span>.imageCache queryCacheOperationForKey:key done:^(<span class="built_in">UIImage</span> *cachedImage, <span class="built_in">NSData</span> *cachedData, SDImageCacheType cacheType) &#123;</div><div class="line">        <span class="keyword">if</span> (operation.isCancelled) &#123;</div><div class="line">        <span class="comment">// 移除取消的操作</span></div><div class="line">            [<span class="keyword">self</span> safelyRemoveOperationFromRunning:operation];</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"><span class="comment">// 无缓存，进行下载</span></div><div class="line">        <span class="keyword">if</span> ((!cachedImage || options &amp; SDWebImageRefreshCached) &amp;&amp; (![<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imageManager:shouldDownloadImageForURL:)] || [<span class="keyword">self</span>.delegate imageManager:<span class="keyword">self</span> shouldDownloadImageForURL:url])) &#123;</div><div class="line">            <span class="keyword">if</span> (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</div><div class="line">                <span class="comment">// If image was found in the cache but SDWebImageRefreshCached is provided, notify about the cached image</span></div><div class="line">                <span class="comment">// AND try to re-download it in order to let a chance to NSURLCache to refresh it from server.</span></div><div class="line">                <span class="comment">// 刷新</span></div><div class="line">                [<span class="keyword">self</span> callCompletionBlockForOperation:weakOperation completion:completedBlock image:cachedImage data:cachedData error:<span class="literal">nil</span> cacheType:cacheType finished:<span class="literal">YES</span> url:url];</div><div class="line">            &#125;</div><div class="line">            SDWebImageDownloaderOptions downloaderOptions = <span class="number">0</span>;</div><div class="line">            ...各种图片加载策略的匹配</div><div class="line">            <span class="keyword">if</span> (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</div><div class="line">                <span class="comment">// force progressive off if image already cached but forced refreshing</span></div><div class="line">                downloaderOptions &amp;= ~SDWebImageDownloaderProgressiveDownload;</div><div class="line">                <span class="comment">// ignore image read from NSURLCache if image if cached but force refreshing</span></div><div class="line">                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// subOperationToken保存有下载的操作，以及下载的URL</span></div><div class="line">            SDWebImageDownloadToken *subOperationToken = [<span class="keyword">self</span>.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(<span class="built_in">UIImage</span> *downloadedImage, <span class="built_in">NSData</span> *downloadedData, <span class="built_in">NSError</span> *error, <span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class="line">                <span class="keyword">if</span> (!strongOperation || strongOperation.isCancelled) &#123;</div><div class="line">                    <span class="comment">// Do nothing if the operation was cancelled</span></div><div class="line">                    <span class="comment">// See #699 for more details</span></div><div class="line">                    <span class="comment">// if we would call the completedBlock, there could be a race condition between this block and another completedBlock for the same object, so if this one is called second, we will overwrite the new data</span></div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error) &#123;</div><div class="line">                    [<span class="keyword">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock error:error url:url];</div><div class="line"><span class="comment">// 下载失败</span></div><div class="line">                    <span class="keyword">if</span> (   error.code != <span class="built_in">NSURLErrorNotConnectedToInternet</span></div><div class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorCancelled</span></div><div class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorTimedOut</span></div><div class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorInternationalRoamingOff</span></div><div class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorDataNotAllowed</span></div><div class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorCannotFindHost</span></div><div class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorCannotConnectToHost</span></div><div class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorNetworkConnectionLost</span>) &#123;</div><div class="line">                        <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.failedURLs) &#123;</div><div class="line">                            [<span class="keyword">self</span>.failedURLs addObject:url];</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 下载失败的URL，先移除掉，以免真的无法下载还一直尝试下载</span></div><div class="line">                    <span class="keyword">if</span> ((options &amp; SDWebImageRetryFailed)) &#123;</div><div class="line">                        <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.failedURLs) &#123;</div><div class="line">                            [<span class="keyword">self</span>.failedURLs removeObject:url];</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    <span class="built_in">BOOL</span> cacheOnDisk = !(options &amp; SDWebImageCacheMemoryOnly);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (options &amp; SDWebImageRefreshCached &amp;&amp; cachedImage &amp;&amp; !downloadedImage) &#123;</div><div class="line">                        <span class="comment">// Image refresh hit the NSURLCache cache, do not call the completion block</span></div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (downloadedImage &amp;&amp; (!downloadedImage.images || (options &amp; SDWebImageTransformAnimatedImage)) &amp;&amp; [<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imageManager:transformDownloadedImage:withURL:)]) &#123;</div><div class="line">                    <span class="comment">// 下载成功并且有缓存之前的操作，在高优先级的队列中进行操作</span></div><div class="line">                        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123;</div><div class="line">                        <span class="comment">//SDWebImageManagerDelegate的第二个方法</span></div><div class="line">                            <span class="built_in">UIImage</span> *transformedImage = [<span class="keyword">self</span>.delegate imageManager:<span class="keyword">self</span> transformDownloadedImage:downloadedImage withURL:url];</div><div class="line"></div><div class="line">                            <span class="keyword">if</span> (transformedImage &amp;&amp; finished) &#123;</div><div class="line">                                <span class="built_in">BOOL</span> imageWasTransformed = ![transformedImage isEqual:downloadedImage];</div><div class="line">                                <span class="comment">// pass nil if the image was transformed, so we can recalculate the data from the image</span></div><div class="line">                                [<span class="keyword">self</span>.imageCache storeImage:transformedImage imageData:(imageWasTransformed ? <span class="literal">nil</span> : downloadedData) forKey:key toDisk:cacheOnDisk completion:<span class="literal">nil</span>];</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                            [<span class="keyword">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:transformedImage data:downloadedData error:<span class="literal">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</div><div class="line">                        &#125;);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (downloadedImage &amp;&amp; finished) &#123;</div><div class="line">                            [<span class="keyword">self</span>.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:<span class="literal">nil</span>];</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 下载成功，回调</span></div><div class="line">                        [<span class="keyword">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:<span class="literal">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (finished) &#123;</div><div class="line">                <span class="comment">// 完成，移除操作</span></div><div class="line">                    [<span class="keyword">self</span> safelyRemoveOperationFromRunning:strongOperation];</div><div class="line">                &#125;</div><div class="line">            &#125;];</div><div class="line">            operation.cancelBlock = ^&#123;</div><div class="line">                [<span class="keyword">self</span>.imageDownloader cancel:subOperationToken];</div><div class="line">                __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class="line">                [<span class="keyword">self</span> safelyRemoveOperationFromRunning:strongOperation];</div><div class="line">            &#125;;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cachedImage) &#123;</div><div class="line">        <span class="comment">// 缓存中查询出来的图片</span></div><div class="line">            __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class="line">            [<span class="keyword">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:cachedImage data:cachedData error:<span class="literal">nil</span> cacheType:cacheType finished:<span class="literal">YES</span> url:url];</div><div class="line">            [<span class="keyword">self</span> safelyRemoveOperationFromRunning:operation];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Image not in cache and download disallowed by delegate</span></div><div class="line">            <span class="comment">// 缓存中无图片，且SDWebImageManagerDelegate设置不允许下载图片</span></div><div class="line">            __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class="line">            [<span class="keyword">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:<span class="literal">nil</span> data:<span class="literal">nil</span> error:<span class="literal">nil</span> cacheType:SDImageCacheTypeNone finished:<span class="literal">YES</span> url:url];</div><div class="line">            [<span class="keyword">self</span> safelyRemoveOperationFromRunning:operation];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> operation;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 取消当前下载</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)cancelAll &#123;</div><div class="line">	<span class="comment">// 互斥锁</span></div><div class="line">	...</div><div class="line">	<span class="comment">// makeObjectsPerformSelector，让数组中的对象都执行某个方法</span></div><div class="line">	[copiedOperations makeObjectsPerformSelector:<span class="keyword">@selector</span>(cancel)];</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 加互斥锁</div><div class="line"> * 是否有下载，通过判断 runningOperation.count &gt; 0</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)isRunning;</div><div class="line"></div><div class="line"><span class="comment">// 下面三个方法只是cache类的方法包装</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 写入缓存</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)saveImageToCache:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image forURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  异步查询缓存，回调在主线程</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)cachedImageExistsForURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                     completion:(<span class="keyword">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 异步查询磁盘缓存</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)diskImageExistsForURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                   completion:(<span class="keyword">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock;</div></pre></td></tr></table></figure></p>
<h4 id="SDWebImageDecoder：UIImage-ForceDecode"><a href="#SDWebImageDecoder：UIImage-ForceDecode" class="headerlink" title="SDWebImageDecoder：UIImage(ForceDecode)"></a>SDWebImageDecoder：UIImage(ForceDecode)</h4><p>是UIImage的一个category。提供一个图片解码的方法，以及一个图片缩放并解码的方法。从缓存中取出来的png或者其他格式的图片，需要转换成位图再进行显示，将其他格式的图片转换为位图，即为解码。通常来说，解码是比较耗时的。上面以及把重绘图片<code>CGBitmapContextCreate</code>方法解释过了。<br>下面这篇文章介绍了iOS中图片的解压缩过程。<br> <a href="http://blog.leichunfeng.com/blog/2017/02/20/talking-about-the-decompression-of-the-image-in-ios/" target="_blank" rel="external">谈谈 iOS 中图片的解压缩</a></p>
<h4 id="SDWebImagePrefetcher"><a href="#SDWebImagePrefetcher" class="headerlink" title="SDWebImagePrefetcher"></a>SDWebImagePrefetcher</h4><p>预先下载图片可以使用这个类，没什么好看的，内部也是调用<code>SDWebImageManager</code>对象的loadImageWithURL方法。</p>
<h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3><p>一些类的category方法，主要是用于组织代码，比较独立，和<code>SDWebImageDecoder</code>相似，跟<code>SDWebImage</code>的核心实现关联不大。</p>
<h3 id="WebCache-Categories"><a href="#WebCache-Categories" class="headerlink" title="WebCache Categories"></a>WebCache Categories</h3><p>主要的调用接口层。平时加载button或者image view上的图片，都是通过这层接口调用实现的。<br>也是通过category的方式，给这些类增加方法，具体调用都是调用<code>UIView+WebCache.h</code>中的这个方法。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)sd_internalSetImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                  placeholderImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)placeholder</div><div class="line">                           options:(SDWebImageOptions)options</div><div class="line">                      operationKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)operationKey</div><div class="line">                     setImageBlock:(<span class="keyword">nullable</span> SDSetImageBlock)setImageBlock</div><div class="line">                          progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                         completed:(<span class="keyword">nullable</span> SDExternalCompletionBlock)completedBlock;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文只是粗略的通读了源码，并未进行深入研究， 难免有疏漏，之后会重新阅读，整理一些阅读源码的收获。大概会从图片加载的流程，多线程管理，缓存设计，接口设计，以及代码组织方面进行分析。之后希望能阅读一下相关功能的其他实现库，做个对比。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Python自动签到V2EX]]></title>
      <url>https://jiangdaohong.github.io./2017/08/15/%E4%BD%BF%E7%94%A8Python%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0V2EX/</url>
      <content type="html"><![CDATA[<p><a href="https://www.v2ex.com" target="_blank" rel="external">V2EX</a>是我经常登录的一个社区,里面有很多做开发的小伙伴.这个网站每天有个签到功能,作为一个潜水党,每天和网站的交互,第一件事情就是签到,但是每天手动签到好麻烦,github上面搜到一个脚本,简单解析一下.<br><a id="more"></a></p>
<h3 id="脚本地址"><a href="#脚本地址" class="headerlink" title="脚本地址"></a>脚本地址</h3><p><a href="https://github.com/isayme/v2ex" target="_blank" rel="external">V2EX自动签到</a>,不是我写的,感谢脚本作者,感谢开源社区,让大家有更多学习交流的机会</p>
<h3 id="登陆签到流程"><a href="#登陆签到流程" class="headerlink" title="登陆签到流程"></a>登陆签到流程</h3><p>首先熟悉一下V站的登陆流程:</p>
<ol>
<li>首先获取网站的<code>cookie</code>;</li>
<li>然后通过<code>cookie</code>获取每日任务页面的<code>once</code>;</li>
<li>如果<code>once</code>不为空,则是没有签到,执行签到操作;</li>
<li>反之退出程序</li>
</ol>
<h3 id="一顿操作"><a href="#一顿操作" class="headerlink" title="一顿操作"></a>一顿操作</h3><p>根据以上流程,首先获取<code>cookie</code>,在脚本的readme文件里面,有说明,V站之前是采用<code>auth</code>方式登录,现在是采用<code>A2</code>.<br>在浏览器中打开网址主页,我使用的Safari,右键-&gt;检查元素-&gt;存储空间-&gt;Cookie-www.v2ex.com,找到<code>A2</code>列,复制出来<code>值</code>所在列的字符串.<br>解析<code>A2</code>,以示例中的A2为例:</p>
<blockquote>
<p>2|1:0|10:1415406915|2:A2|56:xxxxxx|uuuuuu</p>
</blockquote>
<p>我们需要的值,就是<code>56:</code>后面的字符串,它是cookie的base64编码之后的值,进行base64解码,简单的,可以使用终端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &apos;xxxxxx|uuuuuu&apos; |base64 -D;echo</div></pre></td></tr></table></figure></p>
<p>得到cookie</p>
<h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><p>源码还是比较简单的,思路很清晰,也没有使用第三方的模块,使用的都是系统自带的模块,适合新手学习.<br>源码引入了<code>sys</code>,<code>re</code>,<code>cookitlib</code>,<code>urllib2</code>这几个模块,下面都会使用到这几个Python中经常使用的模块.<br>前面几行,定义了一些全局变量,分别用于存储cookie和URL,没什么好说的.需要说明,在Python中,为防止正则表达式和<code>\</code>(比如网址中)冲突,会在字符穿前面加上<code>r</code>,告诉编译器这个string是<code>raw string</code>,无需转义:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">V2EX_DOMAIN = <span class="string">r'v2ex.com'</span></div></pre></td></tr></table></figure></p>
<p>接下来是两个自定义方法和一个程序入口方法:<br>根据上面的签到流程,获取cookie之后,获取<code>once</code>,然后验证<code>once</code>是否为空;<br>第一个<code>get_onec_url(data)</code>就是用来获取<code>once</code>,第二个<code>make_cookit(name, value)</code>是生成<code>cookie</code>,是每次请求都需要携带的信息;<br>暂时跳过这两个函数的内部实现,先看入口函数,<code>if __name__ == &#39;__main__&#39;:</code>用于判断运行的是不是当前文件,这里<a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do" target="_blank" rel="external">有个介绍</a>,单文件程序就这么写好了.<br>入口函数代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    cj = cookielib.CookieJar()</div><div class="line">    cj.set_cookie(make_cookie(<span class="string">'auth'</span>, V2EX_COOKIE))</div><div class="line">    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))</div><div class="line"></div><div class="line">    opener.addheaders = [</div><div class="line">        (<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Windows NT 6.1; rv:20.0) Gecko/20100101 Firefox/20.0'</span>),</div><div class="line">        (<span class="string">'Referer'</span>, V2EX_MISSION)</div><div class="line">    ]</div><div class="line">    </div><div class="line">    opener.open(V2EX_URL_START).read()</div><div class="line">    </div><div class="line">    data = opener.open(V2EX_MISSION).read()</div><div class="line">    once = get_once_url(data)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">None</span> == once:</div><div class="line">        <span class="keyword">print</span> <span class="string">'"once" not found, maybe you already got coins'</span></div><div class="line">        sys.exit(<span class="number">-1</span>)</div><div class="line">    </div><div class="line">    v2ex_coin_url = V2EX_URL_START + once</div><div class="line">    <span class="keyword">print</span> v2ex_coin_url</div><div class="line">    opener.open(v2ex_coin_url).read()</div></pre></td></tr></table></figure></p>
<p>使用<code>cookielib.CookieJar()</code>生成一个jar,然后调用<code>set_cookie()</code>,里面接受参数,我们填写字段名<code>auth</code>,值填写为全局变量<code>V2EX_COOKIE</code>即我们从浏览器中获取的cookie,设置好jar之后,使用<code>urllib2</code>手动生成一个<code>opener</code>,这个对象可以进行网页数据的读取.访问V2EX需要<code>User-Agent</code>,这个写死就好了.通过<code>opener</code>读取数据,然后调用<code>get_once_url()</code>,获取once,Python中判读是否为空需要和<code>None</code>进行比较,如果为空,可能已经签到成功过了,调用<code>sys.exit(-1)</code>退出程序,否则,使用获取到的<code>once</code>值访问签到页面,成功签到.<br>回头看两个自定义函数,<code>make_cookie</code>,比较简单,有两个参数,一个name,一个value,用于设置cookie的name和value,返回值第通过cookielie.Cookie生成的一个字典,这个比较简单.<br>在看<code>get_once_url</code>,参数是网页获取的数据,然后通过正则表达式,匹配出来<code>/mission/daily/redeem\?once=\d+</code>,具体方法是<code>re.search(p,data)</code>,作为对比,<code>re.match()</code>是从开头匹配结果,<code>re.search()</code>则是全字符串进行匹配,返回<code>match object</code>对象,我们取第一个结果,调用返回对象的<code>group()</code>方法即可.<br>至此,既可以完成自动签到功能.</p>
<h3 id="用到模块方法总结"><a href="#用到模块方法总结" class="headerlink" title="用到模块方法总结"></a>用到模块方法总结</h3><p>自动签到功能主要用到的函数有</p>
<ol>
<li><code>cookielib</code>里面生成cookie的方法</li>
<li><code>urllib2</code>生成<code>opener</code>的方法及相关方法</li>
<li><code>opener</code>的<code>open()</code>以及<code>read()</code>方法</li>
<li><code>re</code>模块的<code>search()</code>相关对象方法</li>
<li><code>sys</code>模块的<code>exit()</code>方法</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FMDB常用操作]]></title>
      <url>https://jiangdaohong.github.io./2017/06/28/FMDB%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>项目中比较多的用到了数据库，整理一下常用的数据库操作<br><a id="more"></a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>简单整理一些<code>FMDB</code>的一些常用操作.<br>需要了解的概念包括但不限于外连接，表别名，唯一键，升序，游标，like，between and，not null，unique，default，check，primary key， foreing key，union等等，更多查看<a href="http://www.sqlite.org/lang_keywords.html" target="_blank" rel="external">sqlite关键字</a></p>
<h3 id="CRUD，连表查询，索引，事务，回滚"><a href="#CRUD，连表查询，索引，事务，回滚" class="headerlink" title="CRUD，连表查询，索引，事务，回滚"></a>CRUD，连表查询，索引，事务，回滚</h3><ol>
<li><p>CRUD<br>创建数据库文件，一般有两种方法，一是新建一个文件，然后后缀名修改为自定义后缀，然后直接拖到项目的main bundle，还有一种是获取当前app的沙盒路径，然后在目录下面新建一个文件作为数据库文件.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// create</span></div><div class="line"><span class="comment">// 第二种方法示例:</span></div><div class="line"><span class="comment">// 全局db路径</span></div><div class="line">	_dbPath = [path stringByAppendingPathComponent:kDBFileName];</div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="comment">// path 为初始化传入的路径，判断路径下面是否存在数据库文件</span></div><div class="line">    <span class="keyword">if</span> (![[<span class="built_in">NSFileManager</span> defaultManager] createDirectoryAtPath:path</div><div class="line">                                   withIntermediateDirectories:<span class="literal">YES</span></div><div class="line">                                                    attributes:<span class="literal">nil</span></div><div class="line">                                                         error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"init error:%@"</span>， error);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>建表</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">create table <span class="keyword">if</span> not exists t_Stuent (</div><div class="line">	sid				    text，</div><div class="line">    name               text，</div><div class="line">    insert_time        integer，</div><div class="line">    extended_data       blob，</div><div class="line">    primary key(sid)</div><div class="line"> );</div></pre></td></tr></table></figure>
<p>插入</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 普通插入</span></div><div class="line"><span class="built_in">NSString</span> *sql = <span class="string">@"INSERT INTO aTable(itemInfoId,userName,userId,cacheTime) VALUES (?1,?2,?3,?4)"</span>;</div><div class="line"><span class="comment">// 插入或替换</span></div><div class="line"><span class="built_in">NSString</span> *sql = <span class="string">@"INSERT OR REPLACE INTO aTable(itemInfoId,userName,userId,cacheTime) VALUES (?1,?2,?3,?4)"</span>;</div><div class="line"><span class="comment">// 插入或忽略</span></div><div class="line"><span class="built_in">NSString</span> *sql = <span class="string">@"INSERT OR IGNORE INTO aTable(itemInfoId,userName,userId,cacheTime) VALUES (?1,?2,?3,?4)"</span>;</div><div class="line">[db executeUpdate:sql, item.itemInfoId,item.userName, item.userId, [<span class="built_in">NSDate</span> new]]</div></pre></td></tr></table></figure>
<p>查询</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *sql = <span class="string">@"SELECT * FROM aTable WHERE cacheTime &lt; ? and itemInfoId = ? and workspaceItemInfoId is not null ORDER BY cacheTime DESC LIMIT 0,20;"</span>;</div></pre></td></tr></table></figure>
<p>更新</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *sql = <span class="string">@"UPDATE aTable SET cacheTime = ? WHERE itemInfoId = ?;"</span></div></pre></td></tr></table></figure>
<p>删除</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[db executeUpdate:<span class="string">@"DELETE FROM aTable WHERE itemInfoId = ?;"</span>, item.itemInfoId];</div><div class="line"><span class="comment">// 删除表</span></div><div class="line"><span class="string">@"DROP TABLE aTable"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>连表查询</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一般查询</span></div><div class="line">select * from aTable,bTable where aTable.id=aTable.id;</div><div class="line"><span class="comment">// 内连接</span></div><div class="line">select a.name, b.name from aTable as a inner join bTable as b on a.id = b.id</div><div class="line"><span class="comment">// 左连接</span></div><div class="line">select * from aTable left outer join bTable on aTable.id=bTable.id</div><div class="line"><span class="comment">// 不支持右连接和全连接</span></div></pre></td></tr></table></figure>
</li>
<li><p>索引<br><a href="http://www.cnblogs.com/huahuahu/p/sqlite-suo-yin-de-yuan-li-ji-ying-yong.html" target="_blank" rel="external">sqlite索引的原理</a></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 索引可以提高查询效率,但是生成索引需要更大的存储空间</span></div><div class="line">create index <span class="keyword">if</span> not exists idxName on t_Stuent(name);</div></pre></td></tr></table></figure>
</li>
<li><p>事务</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FMDatabase *db;</div><div class="line"><span class="comment">// 开始事务,内部执行sql语句 begin exclusive transaction</span></div><div class="line">[db beginTransaction];</div><div class="line"><span class="comment">// 开始事务,内部执行sql语句 begin deferred transaction</span></div><div class="line">[db beginDeferredTransaction]</div><div class="line"><span class="comment">// 提交,内部执行sql语句 commit transaction</span></div><div class="line">[db1 commit];</div></pre></td></tr></table></figure>
<p>两种开启事务的区别<a href="http://blog.csdn.net/collin1211/article/details/4671323" target="_blank" rel="external">SQLite语法 BEGIN TRANSACTION</a></p>
</li>
<li><p>回滚</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[FMDatabaseQueue sharedInstance] inDeferredTransaction:^(FMDatabase *db, <span class="built_in">BOOL</span> *rollback) &#123;</div><div class="line"><span class="comment">// 出错, 执行回滚操作</span></div><div class="line"><span class="comment">// 内部执行 [self executeUpdate:@"rollback transaction"]</span></div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">            *rollback = <span class="literal">YES</span>;</div><div class="line">        &#125;</div><div class="line"> &#125;];</div></pre></td></tr></table></figure>
</li>
<li><p>数据库语句缓存</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 提高查询效率,实际使用字典进行缓存FMStatement</span></div><div class="line">[db setShouldCacheStatements:<span class="literal">YES</span>];</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="增加表字段，修改表名，修改数据库名称"><a href="#增加表字段，修改表名，修改数据库名称" class="headerlink" title="增加表字段，修改表名，修改数据库名称"></a>增加表字段，修改表名，修改数据库名称</h3><p>增加表字段<br><code>ALTER TABLE aTable ADD COLUMN name TEXT</code><br>更改表名称<br><code>ALTER TABLE &quot;aTable&quot; RENAME TO &quot;aTable_old_20170831&quot;;</code></p>
<h3 id="表迁移数据"><a href="#表迁移数据" class="headerlink" title="表迁移数据"></a>表迁移数据</h3><p>因为sqlite不支持直接修改某一列数据,可以将表A重命名为临时表B,然后,新建一个A表,将B表数据拷贝到A表中,然后删除临时表B即可</p>
<h3 id="pragma扩展语句"><a href="#pragma扩展语句" class="headerlink" title="pragma扩展语句"></a>pragma扩展语句</h3><blockquote>
<p>PRAGMA语句是SQLITE数据的SQL扩展，是它独有的特性，主要用于修改SQLITE库或者内数据查询的操作。</p>
</blockquote>
<p><a href="http://www.cnblogs.com/songxingzhu/p/3992884.html" target="_blank" rel="external">SQLite中的PRAGMA语句攻略</a><br><code>pragma journal_mode = wal;</code><br>默认<code>delete</code>,开启<code>wal</code>模式之后,一般情况下写入性能更好.会生成两个文件：.shm和.wal<br><code>pragma synchronous = normal;</code><br>在sqlite3.0中默认为<code>full</code>,防止设备故障导致数据库损坏,但是读取性能差,<code>off</code>性能更好,但是对数据库保护不够,一般使用<code>normal</code>模式</p>
<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p><a href="http://www.cocoachina.com/industry/20140522/8517.html" target="_blank" rel="external">加密你的SQLite</a><br>我选择的是<a href="https://github.com/sqlcipher/sqlcipher" target="_blank" rel="external">sqlcipher</a>,FMDB也有加密的分支,可以通过CocoaPods安装<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">target 'MyApp' do</div><div class="line">    pod 'FMDB/SQLCipher'</div><div class="line">end</div></pre></td></tr></table></figure></p>
<p>初始化的时候调用db的<code>setKey:</code>就可以了</p>
<h3 id="新的数据库方案"><a href="#新的数据库方案" class="headerlink" title="新的数据库方案"></a>新的数据库方案</h3><p>微信团队开源了一个数据库解决方案,叫做<code>[WCDB](https://github.com/Tencent/wcdb)</code>,性能和安全性都通过博客看,非常不错,可以阅读他们的以下文章,进行了解学习<br><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286361&amp;idx=1&amp;sn=78bbcda7f41a14291ad71289e4821f71&amp;scene=21#wechat_redirect" target="_blank" rel="external">微信iOS SQLite源码优化实践</a><br><a href="https://mp.weixin.qq.com/s/N1tuHTyg3xVfbaSd4du-tw" target="_blank" rel="external">微信 SQLite 数据库修复实践</a><br><a href="https://mp.weixin.qq.com/s/tzy-fr55t1zqTbxOeKg4RA" target="_blank" rel="external">微信WCDB进化之路 - 开源与开始</a><br><a href="https://mp.weixin.qq.com/s/1XxcrsR2HKam9ytNk8vmGw" target="_blank" rel="external">微信移动端数据库组件WCDB系列（一）-iOS基础篇</a><br><a href="https://mp.weixin.qq.com/s/Ln7kNOn3zx589ACmn5ESQA" target="_blank" rel="external">微信移动端数据库组件WCDB系列（二） — 数据库修复三板斧</a><br><a href="https://mp.weixin.qq.com/s/FY2Y9x1_8TcXHDgTRXcTDA" target="_blank" rel="external">微信移动端数据库组件WCDB系列（三） — WINQ原理篇</a><br><a href="https://mp.weixin.qq.com/s/NFnYEXSxAaHBqpi7WofSPQ" target="_blank" rel="external">微信移动数据库组件WCDB（四） — Android 特性篇</a><br><a href="https://mp.weixin.qq.com/s/T62M4NJYJKrxLJfWkfQSlg" target="_blank" rel="external">为什么要从FMDB迁移到WCDB？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NSProxy简介以及使用]]></title>
      <url>https://jiangdaohong.github.io./2017/06/24/NSProxy%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在<code>Objective-C</code>中,大部分类都是继承自<code>NSObject</code>,但它并不是唯一的<code>root class</code>,还有一个就是<code>NSProxy</code>这个类,看一下API中它的介绍:</p>
<blockquote>
<p>NSProxy is an abstract superclass defining an API for objects that act as stand-ins for other objects or for objects that don’t exist yet. Typically, a message to a proxy is forwarded to the real object or causes the proxy to load (or transform itself into) the real object. Subclasses of NSProxy can be used to implement transparent distributed messaging or for lazy instantiation of objects that are expensive to create.<br>NSProxy implements the basic methods required of a root class, including those defined in the NSObject protocol. However, as an abstract class it doesn’t provide an initialization method, and it raises an exception upon receiving any message it doesn’t respond to. A concrete subclass must therefore provide an initialization or creation method and override the forwardInvocation: and methodSignatureForSelector: methods to handle messages that it doesn’t implement itself. A subclass’s implementation of forwardInvocation: should do whatever is needed to process the invocation, such as forwarding the invocation over the network or loading the real object and passing it the invocation. methodSignatureForSelector: is required to provide argument type information for a given message; a subclass’s implementation should be able to determine the argument types for the messages it needs to forward and should construct an NSMethodSignature object accordingly. See the NSDistantObject , NSInvocation, and NSMethodSignature class specifications for more information.</p>
</blockquote>
<p>简单来说:</p>
<ol>
<li><code>NSProxy</code>是一个抽象基类, 主要是 <code>stand-ins</code>, 用于消息转发, 使用时需要子类化</li>
<li>这个类没有指定初始化方法, 子类化之后必须提供初始化方法,</li>
<li>使用时候需要实现基类以及<code>NSObject协议</code>的一些方法,<code>forwardInvocation:``methodSignatureForSelector:</code>, 这两个方法需要重载</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>上文可以看到, 这个类主要是在消息转发中扮演一个<code>中间人</code>的角色,实际项目中,看到的应用重要有这些:</p>
<ol>
<li>实现一个weak proxy, 防止<code>retain cycle</code>, 这里有一份实现的代码:<a href="https://github.com/ibireme/YYText/blob/master/YYText/Utility/YYTextWeakProxy.m" target="_blank" rel="external">YYTextWeakProxy.m</a>, 使用这个类, 可以在调用<code>NSTimer</code>等的时候让<code>timer</code>保留一个weak reference, 从源码中可以看到,定义了<code>@property (nullable, nonatomic, weak, readonly) id target;</code>, 这个<code>target</code>在初始化方法中对传入的对象弱引用,并实现<code>respondsToSelector:</code>, weak对象调用方法之前都会先调用这个方法,如果被释放掉的话就不会执行接下来的方法调用,从而实现weak proxy.</li>
<li>实现多继承<br><a href="http://ios.jobbole.com/87856/" target="_blank" rel="external">NSProxy——少见却神奇的类</a>, 这篇文件介绍了使用<code>NSProxy</code>实现多继承的一种方法.</li>
<li>其他一些实践,比如有人做AOP用到它,链接地址<a href="http://www.jianshu.com/p/a7187e014c03" target="_blank" rel="external">用 NSProxy 实现面向切面编程</a>,<a href="http://blog.csdn.net/yanghua_kobe/article/details/8395535" target="_blank" rel="external">NSProxy实现AOP方便为iOS应用实现异常处理策略</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈iOS复杂列表优化]]></title>
      <url>https://jiangdaohong.github.io./2017/05/14/%E6%B5%85%E8%B0%88iOS%E5%A4%8D%E6%9D%82%E8%A1%A8%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>记录一下最进项目改版的一些思考<br><a id="more"></a></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>由于原来首页列表需求多次大变动,加载<code>cell</code>的逻辑也跟着调整了很多次,<code>cell</code>的种类以及布局也变化很大,这次刚好进行重构;而且,原来的加载方式会大量进行子视图修改,有一定的潜在性能问题.</p>
<h3 id="需求分析及目标"><a href="#需求分析及目标" class="headerlink" title="需求分析及目标"></a>需求分析及目标</h3><ol>
<li><code>cell</code>布局更加灵活,以后增加新类型不需要修改控制器代码逻辑,简言之,视图和控制器解耦;</li>
<li>实现代码复用</li>
<li>解决潜在性能问题<br>在进行coding之前,可以参考一下几篇文章,里面对列表的论述多有裨益:<br><a href="https://objccn.io/issue-1-1/" target="_blank" rel="external">更轻量的 View Controllers</a><br><a href="https://objccn.io/issue-1-2/" target="_blank" rel="external">整洁的 Table View 代码</a><br><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">iOS 保持界面流畅的技巧</a></li>
</ol>
<p>前两篇介绍了如何编写低耦合的<code>UITableView</code>代码的思想,核心就是:</p>
<ol>
<li>将其<code>delegate</code>和<code>datasource</code>进行独立,创建单独的类进行管理,这个类是可以复用的,并且通过<code>blocks</code>的方法进行<code>cell</code>的创建于赋值,而控制器不需要了解<code>cell</code>的实现;</li>
<li>将数据操作集中到单独创建的类中,而数据模型有时候携带的数据还需要重新加工才可以使用,例如返回<code>yyyy-MM-dd HH:mm:ss</code>类型的时间,而我们需要的是<code>yyyy年MM月dd日</code>格式的字符串,类似这种处理可以放在模型的<code>category</code>中;</li>
<li>面对复杂的布局,比如当前页面中会显示多个控制器视图,类似<code>UITabBarController</code>结构,我们可以采用加载<code>Child Controller</code>的方式,将内聚程度高的代码写到所属控制器中;<br>这样,基本上就可以写出比较好,易于测试的<code>UITabelView</code>了,具体的代码可以参考原文,讲述的很详细了.</li>
</ol>
<p>第三篇博文主要讲解了如何进行性能优化,总结下来就是以下几点:</p>
<ol>
<li>CPU耗费资源的地方主要在<code>对象创建</code>,<code>对象调整</code>,<code>对象销毁</code>,<code>布局计算</code>,<code>Autolayout</code>,<code>文本计算</code>,<code>文本渲染</code>,<code>图片的解码</code>,<code>图像的绘制</code>等;</li>
<li>GPU资源的耗费主要集中在<code>纹理的渲染</code>,<code>视图的混合</code>,<code>图像的生成</code><br>针对以上几个方面,作者一一给出了解决方案,详细内容请<a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">参看原文</a><br>值得注意的是作者提出了<code>过早的优化是万恶之源</code>,当需求不明显或者性能问题不明显的时候尽量不要尝试优化,并给出了评测界面的方法,开源了一个查看<code>FPS</code>的小工具,地址<a href="https://github.com/ibireme/YYText/blob/master/Demo/YYTextDemo/YYFPSLabel.m" target="_blank" rel="external">戳一下</a><br>作者开源了一个开发套件,非常不错,里面附了一个微博的Feedlist demo,代码写的非常漂亮,准备借鉴他的做法,<a href="https://github.com/ibireme/YYKit" target="_blank" rel="external">demo地址</a></li>
</ol>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>看一下页面列表,大概是这样的:<br><img src="http://ww4.sinaimg.cn/large/006tKfTcly1ffl9xgm1hkj30ku0xeadx.jpg" alt="home page list"><br>首页返回的简化数据结构:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeItemInfo</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *itemInfoId;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) DHHomeItemType type; <span class="comment">/**&lt; 类型:1、text 2、list*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *title;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSData</span> *content;     <span class="comment">/**&lt; 返回的泛型数据,根据type进行解析*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) User *user;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDate</span> *updateTime;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> unreadTotal;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>现在<code>cell</code>至少有两种布局,一种根据<code>list</code>显示若干<code>item</code>,一种显示为<code>text</code>,根据上图可以将 cell 划分三部分:</p>
<ol>
<li>顶部显示标题,包括姓名以及指标的名称,未读数,日期,分割线,实际上还有一个诊断的按钮, UI 上没有显示,诊断和标题有点击事件;</li>
<li>中部根据返回的数据类型,显示为文本或者若干 item, item 最多显示6个,并且可能有点击事件;</li>
<li>底部显示箭头,阴影以及一定的留白.</li>
</ol>
<p>首先,定义一个<code>DHHomeCell</code>类,用于显示所有的数据类型,在主页中进行设置;<br>接着,定义一个<code>DHHomeLayout</code>类,用于在子线程计算<code>cell</code>的布局等耗时操作,<code>cell</code>通过<code>layout</code>对象进行对象绑定,高度设置;<br>最后,定义一个<code>DHHomeCellDelegate</code>,用于传递点击事件.<br>这样,就把视图,数据处理以及交互进行了分离.</p>
<p><code>cell</code>中大概是这样的:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">DHHomeCell</span>;</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DHHomeCellDelegate</span>;</span></div><div class="line"></div><div class="line"><span class="comment">/// 顶部</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeTitleView</span> : <span class="title">UIView</span></span></div><div class="line"><span class="comment">// ...顶部视图属性</span></div><div class="line"><span class="comment">// 持有父视图cell</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DHHomeCell *cell;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/// 中部</span></div><div class="line"><span class="comment">/// 文本</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeTextLabel</span> : <span class="title">UILabel</span></span></div><div class="line"><span class="comment">// ...视图属性</span></div><div class="line"><span class="comment">// 持有父视图cell</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DHHomeCell *cell;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeLayout *layout;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/// 单独指标的view</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HDNewDataItemView</span> : <span class="title">UIView</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/// 底部视图</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HDHomeBottomView</span> : <span class="title">UIView</span></span></div><div class="line"><span class="comment">// ...视图属性</span></div><div class="line"><span class="comment">// 持有父视图cell</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DHHomeCell *cell;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeLayout *layout;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 容器 view</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeContentView</span>: <span class="title">UIView</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *contentView;               <span class="comment">/// 容器</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeTitleView *titleView;        <span class="comment">/// 标题栏</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHDiagnoseButton *diagnoseButton;  <span class="comment">/// 诊断按钮</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *items;                    <span class="comment">///指标 Array&lt;HDNewDataItemView&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeTextLabel *contentTextLabel; <span class="comment">/// 文本</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) HDHomeBottomView *contentTextLabel; <span class="comment">/// 底部</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeLayout *layout; <span class="comment">/**&lt; 布局*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DHHomeCell *cell;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeCell</span> : <span class="title">UITableViewCell</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;DHHomeCellDelegate&gt; delegate;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeContentView *dataContentView;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setHomeLayout:(DHHomeLayout *)layout;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/// 代理方法</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DHHomeCellDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">/// 点击了 Cell</span></div><div class="line">- (<span class="keyword">void</span>)cellDidClick:(DHHomeCell *)cell;</div><div class="line"><span class="comment">/// 点击了用户</span></div><div class="line">- (<span class="keyword">void</span>)cell:(DHHomeCell *)cell didClickUser:(<span class="built_in">NSString</span> *)userId;</div><div class="line"><span class="comment">// 点击诊断信息</span></div><div class="line">- (<span class="keyword">void</span>)cell:(DHHomeCell *)cell didClickDiagnose:(DiagnoseInfo *)info;</div><div class="line"><span class="comment">/// 点击了item</span></div><div class="line">- (<span class="keyword">void</span>)cell:(DHHomeCell *)cell didClickNewDataItemAtIndex:(<span class="built_in">NSUInteger</span>)index;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>所有的视图都通过<code>layout</code>的计算结果进行布局,当为<code>list</code>样式,<code>cell</code>中的<code>HDNewDataItemView</code>个数不确定,类似的,根据常见的九宫格布局,可以在初始化的时候一次性添加 6 个这样的子视图,默认全部隐藏,然后根据返回的<code>list</code>进行显示.</p>
<p>在<code>DHHomeLayout</code>中,可以定义一些处理好的数据以及计算的<code>frame</code>作为属性,方便进行缓存处理,实现大概是这样子的:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 子线程进行布局</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeLayout</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithWorkspaceItem:(DHHomeItemInfo *)item style:(DHHomeItemType)type;</div><div class="line"></div><div class="line"><span class="comment">// 做一些其他更新</span></div><div class="line">- (<span class="keyword">void</span>)updateSomething;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) DHHomeItemInfo *item;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) DHHomeLayoutStyle style;</div><div class="line"></div><div class="line"><span class="comment">// item中一些深层次访问的对象,或者经过处理的若干属性,比如处理好的时间字符串</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *updateTime;</div><div class="line"></div><div class="line"><span class="comment">// layout</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> height; <span class="comment">/**&lt; 总高度*/</span></div><div class="line"></div><div class="line"><span class="comment">// 顶部视图高度以及子视图位置信息</span></div><div class="line"><span class="comment">// ...若干</span></div><div class="line"></div><div class="line"><span class="comment">// 中部视图位置信息</span></div><div class="line"><span class="comment">// ...若干</span></div><div class="line"></div><div class="line"><span class="comment">// 底部视图位置信息</span></div><div class="line"><span class="comment">// ...若干</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>需要注意的是,其中一些属性,比如图片相关的设置,是需要在主线程中进行的.一些经常使用的图片或者创建耗时的对象可以使用<code>dispatch_once</code>代码块进行保存,都可以进行一定的性能优化,如果还是出现卡顿,确定问题后,可以借助开源的异步显示框架进行优化.<br>调用起来大概是这样子的:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        DHHomeLayout *layout = [[DHHomeLayout alloc] initWithWorkspaceItem:item style:style];</div><div class="line">        [<span class="keyword">self</span>.layouts addObject:layout];</div><div class="line">        <span class="comment">// 多复制一下列表,测试长度</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            [<span class="keyword">self</span>.layouts addObjectsFromArray:[<span class="keyword">self</span>.layouts <span class="keyword">copy</span>]];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        	[<span class="keyword">self</span>.tableView reloadData];</div><div class="line">    	&#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    <span class="keyword">return</span> _layouts.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> cellID = <span class="string">@"cell"</span>;</div><div class="line">    DHHomeCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID];</div><div class="line">    <span class="keyword">if</span> (!cell) &#123;</div><div class="line">        cell = [[DHHomeCell alloc] initWithStyle:<span class="built_in">UITableViewCellStyleDefault</span> reuseIdentifier:cellID];</div><div class="line">        cell.delegate = <span class="keyword">self</span>;</div><div class="line">    &#125;</div><div class="line">    [cell setHomeLayout:_layouts[indexPath.row]];</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    <span class="keyword">return</span> [(DHHomeLayout *)_layouts[indexPath.row] height];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 一堆代理方法...</span></div></pre></td></tr></table></figure></p>
<p>这样,基本完成了复杂列表的重构.<br>还可以创建一个工具类或者<code>category</code>,将常用的处理方法进行封装,使用工具类处理,可以方便测试以及代码复用.</p>
<p>如果以后需求出现变动,只需要<code>cell</code>添加新视图,<code>layout</code>计算新的视图的布局,增加新的枚举类型即可完成布局.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebView截图的一种思路]]></title>
      <url>https://jiangdaohong.github.io./2017/02/13/WebView%E6%88%AA%E5%9B%BE%E7%9A%84%E4%B8%80%E7%A7%8D%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<p>网页完整截图的方法<br><a id="more"></a></p>
<p>那天想起来一个APP分享的时候生成一张长图,想试一下,开始想的很简单:在webview加载完成的delegate里面,获取scroll view的layer,然后根据图形上下文获取image,保存相册即可.然而,失败了╮(╯▽╰)╭</p>
<h3 id="第一种方法-更改scroll-view的frame再截图"><a href="#第一种方法-更改scroll-view的frame再截图" class="headerlink" title="第一种方法:更改scroll view的frame再截图"></a>第一种方法:更改scroll view的frame再截图</h3><p>上面之所以无法截图,是因为scroll view的layer的实际需要截图的layer不是同一个东西,还没有加载出来的页面并没有显示在layer上?所以,只要改变scroll view的frame,使content size和frame的size一样就好了.核心代码:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIImage</span> *)captureScrollView:(<span class="built_in">UIScrollView</span> *)scrollView&#123;</div><div class="line">    <span class="built_in">UIImage</span>* image = <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(scrollView.contentSize, <span class="literal">NO</span>, [<span class="built_in">UIScreen</span> mainScreen].scale);</div><div class="line">    <span class="built_in">CGPoint</span> originalContentOffset = scrollView.contentOffset;</div><div class="line">    <span class="built_in">CGRect</span> originalFrame = scrollView.frame;</div><div class="line">    scrollView.contentOffset = <span class="built_in">CGPointZero</span>;</div><div class="line">    scrollView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, scrollView.contentSize.width, scrollView.contentSize.height);    </div><div class="line">    </div><div class="line">    [scrollView.layer renderInContext: <span class="built_in">UIGraphicsGetCurrentContext</span>()];</div><div class="line">    image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();   </div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">        </div><div class="line">    scrollView.contentOffset = originalContentOffset;</div><div class="line">    scrollView.frame = originalFrame;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> image ? image : <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="KVC获取web-view私有容器变量"><a href="#KVC获取web-view私有容器变量" class="headerlink" title="KVC获取web view私有容器变量"></a>KVC获取web view私有容器变量</h3><p>web view是一个看起来简单,内部复杂的控件,获取一下私有变量列表,会发现有一个<code>_internal</code>私有变量,type是<code>UIWebViewInternal</code>,然后在<code>iOS runtime headers</code>可以看到这个类,点击<a href="https://github.com/search?utf8=✓&amp;q=repo%3Anst%2FiOS-Runtime-Headers+UIWebBrowserView&amp;type=Code&amp;ref=searchresults" target="_blank" rel="external">这里</a>,继续查看这个类的ivar list,<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">name:scroller------type:<span class="string">@"UIScrollView"</span></div><div class="line">name:browserView------type:<span class="string">@"UIWebBrowserView"</span></div><div class="line">name:checkeredPatternView------type:<span class="string">@"UICheckeredPatternView"</span></div><div class="line">name:delegate------type:<span class="string">@"&lt;UIWebViewDelegate&gt;"</span></div><div class="line">name:scalesPageToFit------type:b1</div><div class="line">ame:isLoading------type:b1</div><div class="line">name:hasOverriddenOrientationChangeEventHandling------type:b1</div><div class="line">name:drawsCheckeredPattern------type:b1</div><div class="line">name:webSelectionEnabled------type:b1</div><div class="line">name:drawInWebThread------type:b1</div><div class="line">name:inRotation------type:b1</div><div class="line">name:didRotateEnclosingScrollView------type:b1</div><div class="line">name:request------type:<span class="string">@"NSURLRequest"</span></div><div class="line">name:clickedAlertButtonIndex------type:q</div><div class="line">name:webViewDelegate------type:<span class="string">@"UIWebViewWebViewDelegate"</span></div><div class="line">name:pdfHandler------type:<span class="string">@"UIWebPDFViewHandler"</span></div></pre></td></tr></table></figure></p>
<p>好了,通过Xcode可以看到,进行web view内容显示的就是<code>UIWebBrowserView</code>这个类,接下来就好办了,直接上代码:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web view loading success</span></div><div class="line"><span class="built_in">UIView</span> *browser = [webView valueForKeyPath:<span class="string">@"_internal.browserView"</span>];</div><div class="line">   <span class="built_in">UIImage</span>* image = <span class="literal">nil</span>;</div><div class="line">   <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(browser.layer.frame.size, <span class="literal">NO</span>, [<span class="built_in">UIScreen</span> mainScreen].scale);</div><div class="line">   [browser.layer renderInContext: <span class="built_in">UIGraphicsGetCurrentContext</span>()];</div><div class="line">   image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">   <span class="built_in">UIGraphicsEndImageContext</span>();</div></pre></td></tr></table></figure></p>
<p>KVC大法好!QAQ~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS端加载PDF文件实践]]></title>
      <url>https://jiangdaohong.github.io./2017/02/07/iOS%E7%AB%AF%E5%8A%A0%E8%BD%BDPDF%E6%96%87%E4%BB%B6%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>最近项目中需要加载PDF文件, 遇到一些小问题, 记录一下<br><a id="more"></a></p>
<h3 id="常见加载PDF的方式"><a href="#常见加载PDF的方式" class="headerlink" title="常见加载PDF的方式"></a>常见加载PDF的方式</h3><p>   iOS上面加载PDF一般分为两种方式, 一种是使用web view, 加载本地PDF文件或者网络PDF数据; 另一种就是将PDF文件重新绘制, 使用自定义view进行显示. 两种方式各有优劣: 第一种方式简单, 粗暴, 没有编辑的时候使用这种方式进行简单PDF浏览, 能达到比较好的效果, 缺点是不能进行编辑, 显示的信息比较简略, 而且web view本身是有内存问题的; 自定义view的灵活性比较大, 一般的阅读软件都是使用这种方式, 可以分页显示, 进行编辑等操作, 缺点是与第一种方式相比下, 需要写较多的代码以及考虑性能优化的问题.</p>
<h3 id="使用简单示例"><a href="#使用简单示例" class="headerlink" title="使用简单示例"></a>使用简单示例</h3><ol>
<li><p>第一种方式示例代码:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURL</span> *url = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"demo"</span> withExtension:<span class="string">@"pdf"</span>];</div><div class="line"><span class="built_in">NSURLRequest</span> *request = [[<span class="built_in">NSURLRequest</span> alloc] initWithURL:url];</div><div class="line">    [webView loadRequest:request];</div></pre></td></tr></table></figure>
<p>由于有的PDF是有编码的, 默认使用的是<code>UTF-8</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSData</span> * data = [<span class="built_in">NSData</span> dataWithContentsOfFile:url];</div><div class="line">[webView loadData:data MIMEType:<span class="string">@"application/pdf"</span> textEncodingName:<span class="string">@"UTF-8"</span> baseURL:url];</div></pre></td></tr></table></figure>
</li>
<li><p>第二种方式示例代码:<br>这里有一篇<a href="http://blog.csdn.net/yiyaaixuexi/article/details/7645725" target="_blank" rel="external">博客</a>,<a href="https://github.com/ShadowLJia/PDFReader" target="_blank" rel="external">示例代码</a><br> <a href="http://blog.csdn.net/yiyaaixuexi/article/details/8209188" target="_blank" rel="external">创建PDF密码</a><br> <a href="http://blog.csdn.net/yiyaaixuexi/article/details/8035014" target="_blank" rel="external">PDF横竖屏切换</a><br>感谢念茜大神的博客.<br>简单来说,就是首先拿到文件,转为data,然后通过系统函数转为<code>CGContextRef</code>对象,然后<code>CGPDFDocumentGetNumberOfPages()</code>可以获取到PDF的页数,然后通过页数,<code>CG_EXTERN CGPDFPageRef __nullable CGPDFDocumentGetPage(
 CGPDFDocumentRef __nullable document, size_t pageNumber)
 CG_AVAILABLE_STARTING(__MAC_10_3, __IPHONE_2_0)</code>可以获取到指定页的PDF,然后进行PDF绘制就好了.<br>自定义view核心代码:</p>
</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</div><div class="line">	<span class="comment">// 坐标系转换</span></div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0.0</span>, <span class="keyword">self</span>.bounds.size.height);</div><div class="line">	<span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div><div class="line">	<span class="keyword">long</span> pageSum = <span class="built_in">CGPDFDocumentGetNumberOfPages</span>(pdfDocument);</div><div class="line">	pageNO = pageNO == <span class="number">0</span> ? <span class="number">1</span> : pageNo;</div><div class="line">	<span class="built_in">CGPDFPageRef</span> page = <span class="built_in">CGPDFDocumentGetPage</span>(pdfDocument, pageNO);</div><div class="line">	<span class="built_in">CGContextSaveGState</span>(context);</div><div class="line">	<span class="built_in">CGAffineTransform</span> pdfTransform = <span class="built_in">CGPDFPageGetDrawingTransform</span>(page, kCGPDFCropBox, <span class="keyword">self</span>.bounds, <span class="number">0</span>, <span class="literal">true</span>);</div><div class="line">	<span class="built_in">CGContextConcatCTM</span>(context, pdfTransform);</div><div class="line">	<span class="built_in">CGContextDrawPDFPage</span>(context, page);</div><div class="line">	<span class="built_in">CGContextRestoreGState</span>(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第二种方式的新问题"><a href="#第二种方式的新问题" class="headerlink" title="第二种方式的新问题"></a>第二种方式的新问题</h3><p>上面就是两种常见PDF的显示方式, 但是第二种如果这么处理, 会带来一个问题, 就是如果进行放大处理, PDF会很模糊, 看了一下<code>多看</code>的PDF显示, 明显不是使用的第一种方式, 但是放大之后依然很清晰, 怎么处理的呢? 答案是使用<code>CATiledLayer</code>替换自定义view的layer.<br>移动设备的图片处理能力终究是有限的, 如果需要显示一张分辨率非常高的图片, 直接用image view加载可能会爆内存, 并且通常一张巨大的图片, 比如地图, 我们经常查看的是一部分而不是整体, 为了高效绘图, 苹果提供了<code>CATiledLayer</code>类, 这个类可以很好地解决我们的问题. 详细请参考苹果官方文档或者《iOS核心动画高级技巧》的<code>专用图层CATiledLayer章节</code>.<br>示例代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+ (Class)layerClass &#123;</div><div class="line">    return [DHCATiledLayer class];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//初始化方法</div><div class="line">- (id)initWithFrame:(CGRect)frame &#123;</div><div class="line">	self = [super initWithFrame:frame];</div><div class="line">	DHCATiledLayer* layer = (DHCATiledLayer *)[self layer];</div><div class="line">	layer.levelsOfDetail = 10;</div><div class="line">	layer.levelsOfDetailBias = 10;</div><div class="line">	layer.tileSize = CGSizeMake(4086.0, 4086.0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个类有隐式动画,继承并重写方法,动画时长为0即可:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+(<span class="built_in">CFTimeInterval</span>)fadeDuration &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://adad184.com/2015/11/10/disable-uicollectionview-implicit-animation/" target="_blank" rel="external">这篇博客</a>里面写了如何去除UIView动画以及layer动画.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为peek view添加显示标题]]></title>
      <url>https://jiangdaohong.github.io./2016/12/11/%E4%B8%BApeek-view%E6%B7%BB%E5%8A%A0%E6%98%BE%E7%A4%BA%E6%A0%87%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>看到一些APP peek操作的时候会显示标题,模仿一下喽.<br><a id="more"></a></p>
<p>在玩APP的时候发现一些APP的peek出来的页面不太一样,显示的是有标题的,比如知乎首页和微博评论的按钮peek操作:</p>
<p><div align="center"><br><img src="http://ww2.sinaimg.cn/large/006tNc79gw1fan1wxdu44j305k027jr7.jpg" alt="weibo_peek"><br><img src="http://ww2.sinaimg.cn/large/006tNc79gw1fan1xn1ka9j305k025t8k.jpg" alt="weibo_pop"><br><img src="http://ww1.sinaimg.cn/large/006tNc79gw1fan1zf8f1aj305k01wjr6.jpg" alt="zhihu_peek"><br><img src="http://ww4.sinaimg.cn/large/006tNc79gw1fan1zufo7fj305k01yjr7.jpg" alt="weibo_pop"></div></p>
<p><div><br>简单分析一下:微博应该是用了navigation controller,而知乎则在pop的页面多了一个top视图,当peek的时候,可以看到多了一个标题的视图,真是简单粗暴.<br>实现一个微博的效果,简单Swift写一下:<br>peek页面</div></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">internal</span> <span class="keyword">let</span> tableView = <span class="type">UITableView</span>(frame: <span class="type">UIScreen</span>.mainScreen().bounds, style: <span class="type">UITableViewStyle</span>.<span class="type">Plain</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        view.backgroundColor = <span class="type">UIColor</span>.greenColor()</div><div class="line">        tableView.delegate = <span class="keyword">self</span>;</div><div class="line">        tableView.dataSource = <span class="keyword">self</span>;</div><div class="line">        tableView.tableFooterView = <span class="type">UIView</span>()</div><div class="line">        view .addSubview(tableView)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span> : <span class="title">UITableViewDelegate</span>,<span class="title">UITableViewDataSource</span>,<span class="title">UIViewControllerPreviewingDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">var</span> tableViewCell = tableView.dequeueReusableCellWithIdentifier(<span class="string">"tableviewcell"</span>)</div><div class="line">        <span class="keyword">if</span> tableViewCell == <span class="literal">nil</span> &#123;</div><div class="line">            tableViewCell = <span class="type">UITableViewCell</span>(style: <span class="type">UITableViewCellStyle</span>.<span class="type">Default</span>, reuseIdentifier: <span class="string">"tableviewcell"</span>)</div><div class="line">            tableViewCell?.textLabel?.text = (<span class="string">"第"</span> + <span class="string">"\(indexPath.row)"</span> + <span class="string">"行"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> traitCollection.forceTouchCapability == <span class="type">UIForceTouchCapability</span>.<span class="type">Available</span> &#123;</div><div class="line">            registerForPreviewingWithDelegate(<span class="keyword">self</span>, sourceView: tableViewCell!)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> tableViewCell!</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/// UIViewControllerPreviewingDelegate</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</div><div class="line">        navigationController?.pushViewController(<span class="type">DetailViewController</span>(), animated: <span class="literal">true</span>)</div><div class="line">        tableView.deselectRowAtIndexPath(indexPath, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, viewControllerForLocation location: CGPoint)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">    <span class="comment">/// 预览的应该包装一个UINavigationController,才会有title</span></div><div class="line">        <span class="keyword">let</span> navc = <span class="type">UINavigationController</span>()</div><div class="line">        navc.addChildViewController(<span class="type">DetailViewController</span>())</div><div class="line">        <span class="keyword">return</span> navc;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, commitViewController viewControllerToCommit: UIViewController)</span></span> &#123;</div><div class="line">    <span class="comment">/// pop的页面是UINavigationController的第一个子控制器</span></div><div class="line">        showViewController(viewControllerToCommit.childViewControllers[<span class="number">0</span>], sender: <span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>pop的页面:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">        view.backgroundColor = <span class="type">UIColor</span>.cyanColor()</div><div class="line">        title = <span class="string">"评论"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就可以了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[APP本地化笔记]]></title>
      <url>https://jiangdaohong.github.io./2016/12/10/APP%E5%9B%BD%E9%99%85%E5%8C%96%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>最近项目需要做本地化,简单记录一下,这里的APP本地化特指iOS客户端的本地化.<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着移动互联网的发展,很多APP借着苹果的平台渐渐走向国际,甚至有些国内的公司面向的就是国外用户,我们现在做的产品就有这方面的需求,所以抽时间做了一下APP本地化.<br>一般来说,APP本地化主要是一些文字和图片,plist资源的本地化.文字一般就是UI控件上展示的文本,控件可能是纯代码创建的,也可能是xib或者storyboard上的控件;而图片则需要准备不同的资源文件.<br>下面介绍一下常用的本地化方法:</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>以普通的工程为例:</p>
<ol>
<li>新建工程,Info.plist中添加<code>Application has localized display name</code>,bool值为<code>YES</code>,<code>CFBundleDisplayName</code>和<code>CFBundleName</code>都设置为<code>$(PROJECT_NAME)</code>;</li>
<li>选择PROJECT-&gt;Info-&gt;Localizations,点击<code>+</code>,选择需要本地化的语言,我们选择Chinese(Simplified),然后弹出需要本地化的资源文件,需要的打钩,点击确定;</li>
<li>新建文件.选择iOS-&gt;Resource-&gt;String File,这里命名为Localizations.string;</li>
<li>选择新建的.string文件,右边属性栏有Localization,点击,弹出需要本地化的语言,随便选择一个,然后把需要本地化的语言都勾选上,点击文件,可以看到生成了不同语言的.string文件;</li>
<li>重复步骤3和步骤4,命名必须为<code>InfoPlist.strings</code>.</li>
<li>打开项目目录,把生成的本地化文件夹拖到项目中.</li>
</ol>
<h3 id="应用名称本地化"><a href="#应用名称本地化" class="headerlink" title="应用名称本地化"></a>应用名称本地化</h3><p>选择InfoPlist.strings,将需要显示的名称写到对应的文件里面即可:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 中文文件</span></div><div class="line"><span class="built_in">CFBundleDisplayName</span> = <span class="string">"中文名字"</span>;</div><div class="line"><span class="comment">// 英文文件</span></div><div class="line"><span class="built_in">CFBundleDisplayName</span> = <span class="string">"English name"</span>;</div></pre></td></tr></table></figure></p>
<h3 id="文本本地化"><a href="#文本本地化" class="headerlink" title="文本本地化"></a>文本本地化</h3><p>以登陆按钮显示的标题为例,需要借助一个本地化方法才可以实现,首先在Localizations.string文件中分别写上对应的key-value:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 中文文件</span></div><div class="line"><span class="string">"Login"</span> = <span class="string">"登陆"</span>;</div><div class="line"><span class="comment">// 英文文件</span></div><div class="line"><span class="string">"Login"</span> = <span class="string">"Login"</span>;</div></pre></td></tr></table></figure></p>
<p>调用的地方<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 前面是key,后面是注释,可为nil</span></div><div class="line"><span class="built_in">NSString</span> *loginString = <span class="built_in">NSLocalizedString</span>(<span class="string">@"Login"</span>, <span class="string">@"login button title"</span>);</div><div class="line">[loginButton setTitle:loginString forState:<span class="built_in">UIControlStateNormal</span>];</div></pre></td></tr></table></figure></p>
<h3 id="图片资源和xib-plist资源的本地化"><a href="#图片资源和xib-plist资源的本地化" class="headerlink" title="图片资源和xib,plist资源的本地化"></a>图片资源和xib,plist资源的本地化</h3><p>图片本地化很简单,选中图片资源,点击属性栏的Localization选项,会自动把图片放到对应的语言文件夹下面,调用无需更改.<br>plist以及xib本地化方式和图片本地化方式大同小异.</p>
<h3 id="简化调用"><a href="#简化调用" class="headerlink" title="简化调用"></a>简化调用</h3><p>如果一开始没有做本地化的准备,但是突然要加入这项feature,这就需要快速完成,但是项目中的控件太多了怎么办?</p>
<ol>
<li>简单做法,修改继承,如替换UILabel为自定义Label,重写<code>setText:</code>,然后调用<code>NSLocalizedString(key,comment)</code>,这么做代价很大;</li>
<li><p>查看NSLocalizedString的实现:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLocalizedString(key, comment) \</span></div><div class="line">	    </div><div class="line">	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@<span class="string">""</span> table:nil]</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLocalizedStringFromTable(key, tbl, comment) \</span></div><div class="line">	    </div><div class="line">	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@<span class="string">""</span> table:(tbl)]</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \</span></div><div class="line">	    </div><div class="line">	    [bundle localizedStringForKey:(key) value:@<span class="string">""</span> table:(tbl)]</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \</span></div><div class="line">	    </div><div class="line">	    [bundle localizedStringForKey:(key) value:(val) table:(tbl)]</div></pre></td></tr></table></figure>
<p>为了方便调用添加个宏定义:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">undef</span> L</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> L(key) \</span></div><div class="line">	</div><div class="line">	[[NSBundle mainBundle] localizedStringForKey:(key) value:@<span class="string">""</span> table:nil]</div></pre></td></tr></table></figure>
<p>然后一个一个替换/(ㄒoㄒ)/~~</p>
</li>
<li><p>替换完之后,用命令自动生成strings文件</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打开终端,定位到需要生成stings的文件,比如为LoginViewController.m,要生成DHLocalizations.strings</span></div><div class="line"><span class="comment">// 字符串调用的地方</span></div><div class="line"><span class="built_in">NSString</span> *loginString = <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Login"</span>,<span class="string">@"DHLocalizations"</span>, <span class="string">@"login button title"</span>);</div><div class="line">[loginButton setTitle:loginString forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line"><span class="comment">// 执行如下命令</span></div><div class="line">genstrings LoginViewController.m</div><div class="line"><span class="comment">// 查看文件夹,看到已经生成了DHLocalizations.strings文件</span></div></pre></td></tr></table></figure>
</li>
<li><p>批量生成命令<br>上个命令虽然能自动生成本地方资源文件,但是一次只能生成一个文件里面的本地化字符串,借助下面的命令可以进行批量生成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 进入终端,使用命令生成文件夹</div><div class="line">mkdir en.lpro</div><div class="line">// 遍历文件夹下.m文件,并执行genstrings命令</div><div class="line">find ./ -name *.m -print0 | xargs -0 genstrings -o en.lproj</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>感谢一下开发者的教程,放上教程链接<br><a href="https://my.oschina.net/u/1049180/blog/215695" target="_blank" rel="external">https://my.oschina.net/u/1049180/blog/215695</a><br>// 下面这篇文章讲述的很详细,图文并茂<br><a href="http://blog.csdn.net/q199109106q/article/details/8564615" target="_blank" rel="external">http://blog.csdn.net/q199109106q/article/details/8564615</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义转场动画]]></title>
      <url>https://jiangdaohong.github.io./2016/11/28/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>好久不用的东西,复习一下,先写一下转场动画吧O(∩_∩)O</p>
<a id="more"></a>
<p>直接开始,这篇博客分三部分,第一部分记述自定义modal动画,第二部记述自定义push动画,第三部分记一下常见动画的实现.</p>
<h3 id="modal动画"><a href="#modal动画" class="headerlink" title="modal动画"></a>modal动画</h3><p>下面简要写一下以modal的形式实现系统的push动画</p>
<p>主要步骤:<br>新建两个view controller,记做FromVC,ToVC;<br>在FromVC中,实现<code>presentViewController:animated:completion</code>,ToVC对象设置<code>toVC.transitioningDelegate = self;</code>,fromVC遵守协议<code>UIViewControllerTransitioningDelegate</code>;<br>看一下<code>UIViewControllerTransitioningDelegate</code>, 通过文档可以看到, <code>UIViewControllerTransitioningDelegate</code>主要要实现前两个方法来获取present和dismiss的动画对象</p>
 <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// Asks your delegate for the transition animator object to use when presenting a view controller.</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented presentingController:(<span class="built_in">UIViewController</span> *)presenting sourceController:(<span class="built_in">UIViewController</span> *)source;</div><div class="line"> <span class="comment">// Asks your delegate for the transition animator object to use when dismissing a view controller.</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class="built_in">UIViewController</span> *)dismissed;</div><div class="line"> <span class="comment">// Asks your delegate for the interactive animator object to use when presenting a view controller.</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForPresentation:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator;</div><div class="line"> <span class="comment">// Asks your delegate for the interactive animator object to use when dismissing a view controller.</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForDismissal:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator;</div><div class="line"> <span class="comment">// Asks your delegate for the custom presentation controller to use for managing the view hierarchy when presenting a view controller.</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIPresentationController</span> *)presentationControllerForPresentedViewController:(<span class="built_in">UIViewController</span> *)presented presentingViewController:(<span class="built_in">UIViewController</span> *)presenting sourceViewController:(<span class="built_in">UIViewController</span> *)source <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">8</span>_0);</div></pre></td></tr></table></figure>
<p> 而动画对象需要遵守<code>UIViewControllerAnimatedTransitioning</code>协议,看一下这个协议需要实现的方法:第一个方法返回的是动画执行的时间,第二个方法则是用于处理动画效果;</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// This is used for percent driven interactive transitions, as well as for container controllers that have companion animations that might need to</span></div><div class="line">  <span class="comment">// synchronize with the main animation. </span></div><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext;</div><div class="line">  <span class="comment">// This method can only  be a nop if the transition is interactive and not a percentDriven interactive transition.</span></div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext;</div></pre></td></tr></table></figure>
<p>首先实现present动画,新建一个<code>DHPresentAnimation</code>类,继承自<code>NSObject</code>,并且实现<code>UIViewControllerAnimatedTransitioning</code>中的两个方法,代码如下:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// 动画执行的时间</span></div><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContex</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.3</span>;</div><div class="line">  &#125;</div><div class="line">   <span class="comment">// 自定义动画</span></div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext</div><div class="line"> &#123;</div><div class="line">       <span class="comment">// 获取目标VC</span></div><div class="line">       <span class="built_in">UIViewController</span> *toVC = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextToViewControllerKey</span>];</div><div class="line">       <span class="comment">// 获取最终要显示的VC的frame</span></div><div class="line">       <span class="built_in">CGRect</span> finalRect = [transitionContext finalFrameForViewController:toVC];</div><div class="line">       <span class="comment">// 设置目标VC的默认位置,这里定位在屏幕左侧</span></div><div class="line">       toVC.view.frame = <span class="built_in">CGRectOffset</span>(finalRect, -[[<span class="built_in">UIScreen</span> mainScreen]bounds].size.width, <span class="number">0</span>);</div><div class="line">       <span class="comment">// 获取containerView,并将目标VC的view设置为它的子视图</span></div><div class="line">       [[transitionContext containerView] addSubview:toVC.view];</div><div class="line">       <span class="comment">// 简单UIView动画,使toVC的view变换到最终要显示的位置和大小</span></div><div class="line">       [<span class="built_in">UIView</span> animateWithDuration:[<span class="keyword">self</span> transitionDuration:transitionContext] animations:^&#123;</div><div class="line">           toVC.view.frame = finalRect;</div><div class="line">       &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">       <span class="comment">// 明确告诉上下文,结束动画</span></div><div class="line">           [transitionContext completeTransition:<span class="literal">YES</span>];</div><div class="line">       &#125;];</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在<code>FromVC</code>中,实现<code>UIViewControllerTransitioningDelegate</code>协议方法</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented presentingController:(<span class="built_in">UIViewController</span> *)presenting sourceController:(<span class="built_in">UIViewController</span> *)source </div><div class="line">&#123;</div><div class="line">    <span class="comment">// 返回present自定义动画对象</span></div><div class="line">    <span class="keyword">return</span> [[DHPresentAnimation alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  同理,实现dismiss动画,实现<code>FromVC</code>遵循协议中的另一个方法:<br>  dismiss动画</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext</div><div class="line"> &#123; </div><div class="line">   <span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line"> &#125;</div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext</div><div class="line"> &#123; </div><div class="line">       <span class="built_in">UIViewController</span> *fromVC = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextFromViewControllerKey</span>];</div><div class="line">       <span class="built_in">UIViewController</span> *toVC = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextToViewControllerKey</span>]; </div><div class="line">       <span class="built_in">CGRect</span> initRect  = [transitionContext initialFrameForViewController:fromVC];   </div><div class="line">       <span class="built_in">CGRect</span> finalRect = <span class="built_in">CGRectOffset</span>(initRect, -[[<span class="built_in">UIScreen</span> mainScreen]bounds].size.width, <span class="number">0</span>);</div><div class="line">       <span class="built_in">UIView</span> *containerView = [transitionContext containerView];</div><div class="line">       [containerView addSubview:toVC.view];</div><div class="line">       [containerView sendSubviewToBack:toVC.view];</div><div class="line">       [<span class="built_in">UIView</span> animateWithDuration:[<span class="keyword">self</span> transitionDuration:transitionContext] animations:^&#123;</div><div class="line">           fromVC.view.frame = finalRect;</div><div class="line">       &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">           [transitionContext completeTransition:<span class="literal">YES</span>];</div><div class="line">       &#125;];</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>  协议方法:</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class="built_in">UIViewController</span> *)dismissed</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> [[DHDismissAnimation alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后<code>command + R</code>运行.</p>
<h3 id="push动画"><a href="#push动画" class="headerlink" title="push动画"></a>push动画</h3><p>待续</p>
<h3 id="常见动画的实现"><a href="#常见动画的实现" class="headerlink" title="常见动画的实现"></a>常见动画的实现</h3><p>待续</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初窥JSPatch]]></title>
      <url>https://jiangdaohong.github.io./2016/11/20/%E5%88%9D%E7%AA%A5JSPatch/</url>
      <content type="html"><![CDATA[<p>Hotfix是解决线上bug的重要手段之一,iOS开发中,如今流行的成熟解决方法之一就是JSPatch,本文主要是对JSPatch应用进行一定的介绍,并未做原理分析.<br><a id="more"></a></p>
<p>谈起hotfix,是个不小的话题,而JSPatch以他灵活,使用方便而且功能强大的特点,使它成为解决线上重大bug的”黑武器”,强大,危险.所以在开头要说明,不用使用JSPatch来修改一些小的错误,只有发生重大bug的时候才使用,原子弹固然威力大,但造成的后果也是影响深远的.一些界面可以采用其他方案替代,提高app的动态性,比如使用web view等方式,这里不做深究.下面开始介绍JSPatch.</p>
<p>JSPatch是微信读书团队的大神<a href="https://github.com/bang590/" target="_blank" rel="external">bang</a>的<a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">开源项目</a>,所以你是可以看到这个项目的核心源码,你可以通过CocoaPods集成到项目中,也可以手动集成,也可以通过SDK的方式集成,<a href="http://www.jspatch.com/Docs/intro" target="_blank" rel="external">这里</a>是JSPatch Platform的集成说明文档,简单来讲,如果你要自己搭建后台,进行修复包的部署等工作,直接使用开源代码即可,这种比较适用于大公司或者业务敏感,个性化定制功能的公司,而对公司来说,作为一般性需求或者只是在个人项目中使用的话,完全可以借助平台,而且平台也提供了付费功能.对于日请求量小于1w的用户是免费的.需要进行灰度测试,在线监控等功能,需要进行付费.</p>
<h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod 'JSPatch'</div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[JSPatch startWithAppKey:<span class="string">@"Your AppKey"</span>];</div><div class="line"><span class="comment">// 可以多次调用用来同步服务器状态</span></div><div class="line">[JSPatch sync];</div><div class="line"><span class="comment">// 程序启动的时候开启JSEngine</span></div><div class="line">[JPEngine startEngine];</div><div class="line"><span class="comment">// 执行js代码</span></div><div class="line"><span class="comment">// 官方示例</span></div><div class="line"><span class="comment">// 直接调用js</span></div><div class="line">[JPEngine evaluateScript:<span class="string">@"\</span></div><div class="line"> var alertView = require('UIAlertView').alloc().init();\</div><div class="line"> alertView.setTitle('Alert');\</div><div class="line"> alertView.setMessage('AlertView from js'); \</div><div class="line"> alertView.addButtonWithTitle('OK');\</div><div class="line"> alertView.show(); \</div><div class="line">"];</div><div class="line"></div><div class="line"><span class="comment">// 执行网络js代码</span></div><div class="line">[<span class="built_in">NSURLConnection</span> sendAsynchronousRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://cnbang.net/test.js"</span>]] queue:[<span class="built_in">NSOperationQueue</span> mainQueue] completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *connectionError) &#123;</div><div class="line">    <span class="built_in">NSString</span> *script = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">    [JPEngine evaluateScript:script];</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="comment">// 执行本地js代码</span></div><div class="line"><span class="built_in">NSString</span> *sourcePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"sample"</span> ofType:<span class="string">@"js"</span>];</div><div class="line"><span class="built_in">NSString</span> *script = [<span class="built_in">NSString</span> stringWithContentsOfFile:sourcePath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">[JPEngine evaluateScript:script];</div></pre></td></tr></table></figure>
<h3 id="API示例"><a href="#API示例" class="headerlink" title="API示例"></a>API示例</h3><p>调用OC类之前需要调用<code>require(class name)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">requare(`UIView`)</div><div class="line">var view = UIView.alloc().init()</div></pre></td></tr></table></figure></p>
<p>也可使用的时候再进行声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(`UIColor`).redColor()</div></pre></td></tr></table></figure></p>
<p>参数传递<br>和OC用法一样,直接进行传递即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var view = UIView.alloc().init();</div><div class="line">var superView = UIView.alloc().init()</div><div class="line">superView.addSubview(view)</div></pre></td></tr></table></figure></p>
<p>defineClass<br>defineClass(classDeclaration, [properties,] instanceMethods, classMethods)<br>@param classDeclaration: 字符串，类名/父类名和Protocol<br>@param properties: 新增property，字符串数组，可省略<br>@param instanceMethods: 要添加或覆盖的实例方法<br>@param classMethods: 要添加或覆盖的类方法</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// OC</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">JPTestObject</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">&#125;</div><div class="line">	<span class="keyword">@end</span></div><div class="line"><span class="comment">// JS</span></div><div class="line">defineClass(<span class="string">"JPTableViewController"</span>, &#123; tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</div><div class="line">	  ...</div><div class="line">&#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>把JSPatch的Log添加到自己的日志里面<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[JSPatch setLogger:^(<span class="built_in">NSString</span> *msg) &#123;</div><div class="line">    <span class="comment">//msg 是 JSPatch log 字符串，用你自定义的logger打出</span></div><div class="line">    YOUR_APP_LOG(<span class="string">@"%@"</span>, msg);</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>官方修复线上bug示例<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">@implementation</span> <span class="title">XRTableViewController</span></span></div><div class="line"> ⁃ (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</div><div class="line">	&#123;</div><div class="line">	<span class="built_in">NSString</span> *content = <span class="keyword">self</span>.dataSource[[indexPath row]]; <span class="comment">//可能会超出数组范围导致crash</span></div><div class="line">	XRViewController *controller = [[JPViewController alloc] initWithContent:content];</div><div class="line">	[<span class="keyword">self</span>.navigationController pushViewController:controller];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="comment">//main.js</span></div><div class="line">defineClass(<span class="string">"XRTableViewController"</span>, &#123;</div><div class="line">  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</div><div class="line">    var row = indexPath.row()</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.dataSource().length &gt; row) &#123;  <span class="comment">//加上判断越界的逻辑</span></div><div class="line">      var content = <span class="keyword">self</span>.dataArr()[row];</div><div class="line">      var controller = XRViewController.alloc().initWithContent(content);</div><div class="line">      <span class="keyword">self</span>.navigationController().pushViewController(controller);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>脚本删除<br>如果是通过JSPatch Platform,在操作界面进行删除脚本即可;如果是自搭建平台,需要调用<code>JPCleaner</code>的clean方法,进行指定类的或者全部代码进行清除.<br>更多基本用法查阅官方文档:<a href="https://github.com/bang590/JSPatch/wiki/JSPatch-基础用法" target="_blank" rel="external">JSPatch基础用法</a></p>
<h3 id="传输安全问题"><a href="#传输安全问题" class="headerlink" title="传输安全问题"></a>传输安全问题</h3><p>由于JSPatch是通过运行时进行消息分发,因此功能强大, 因此一旦被黑客攻击,下发恶意补丁包,那app基本就会被彻底攻破,因此在使用JSPatch SDK的时候,对js文件进行了<a href="https://en.wikipedia.org/wiki/RSA" target="_blank" rel="external">RSA加密</a><br>主要流程就是对服务端进行js文件的MD5加密,然后使用RSA私钥对MD5进行一次加密,一起下发给客户端;<br>客户端拿到数据之后,RSA公钥进行解密,拿到MD5值,然后自己进行计算下载的js文件的MD5,进行校验,判断是否被修改,进行分情况处理.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.jspatch.com/Docs/intro" target="_blank" rel="external">JSPatch</a>官方文档说明;<br><a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">JSPatch github源代码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发常用UI小技巧]]></title>
      <url>https://jiangdaohong.github.io./2016/10/22/iOS%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8UI%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>整理一下开发中常用的UI小技巧<br><a id="more"></a></p>
<ol>
<li><p>UINavigationBar相关设置</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 去阴影</span></div><div class="line">   [[<span class="built_in">UINavigationBar</span> appearance] setShadowImage:[<span class="built_in">UIImage</span> new]];</div><div class="line">   <span class="comment">// 设置标题</span></div><div class="line">   <span class="built_in">NSMutableDictionary</span> *titleTextAttrs = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">   titleTextAttrs[<span class="built_in">NSForegroundColorAttributeName</span>] = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">   titleTextAttrs[<span class="built_in">NSFontAttributeName</span>] = [<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">18</span>];</div><div class="line">   [[<span class="built_in">UINavigationBar</span> appearance] setTitleTextAttributes:titleTextAttrs];</div><div class="line">   <span class="comment">// 设置渲染色</span></div><div class="line">   [[<span class="built_in">UINavigationBar</span> appearance] setTintColor:[<span class="built_in">UIColor</span> whiteColor]];</div><div class="line">   </div><div class="line">   <span class="comment">// 设置背景图片</span></div><div class="line">   [[<span class="built_in">UINavigationBar</span> appearance] setBackgroundImage:[[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"navc_bg_blue"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>] 	forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>UITabBar相关设置</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 去阴影</span></div><div class="line">[[<span class="built_in">UITabBar</span> appearance] setShadowImage:[<span class="built_in">UIImage</span> new];</div><div class="line"><span class="comment">// 更换系统自带的tabbar</span></div><div class="line">DHTabBar *tabBar = [DHTabBar tabbar];</div><div class="line">   [<span class="keyword">self</span> setValue:tabBar forKeyPath:<span class="string">@"tabBar"</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>UITabBarController<br>选中不同控制器显示不同的statusBar样式</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController.preferredStatusBarStyle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UITabbarController快速添加子控制器</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  添加一个子控制器</div><div class="line"> *</div><div class="line"> *  @param childVC       子控制器</div><div class="line"> *  @param title         标题</div><div class="line"> *  @param image         图片</div><div class="line"> *  @param selectedImage 选中的图片</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)addChildVc:(<span class="built_in">UIViewController</span> *)childVC title:(<span class="built_in">NSString</span> *)title image:(<span class="built_in">NSString</span> *)image selectedImage:(<span class="built_in">NSString</span> *)selectedImage</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 设置子控制器的文字</span></div><div class="line">    childVC.title = title;</div><div class="line">    </div><div class="line">    <span class="comment">// 设置子控制器的图片</span></div><div class="line">    childVC.tabBarItem.image = [[<span class="built_in">UIImage</span> imageNamed:image]imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">    childVC.tabBarItem.selectedImage = [[<span class="built_in">UIImage</span> imageNamed:selectedImage]imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 设置文字的样式</span></div><div class="line">    <span class="built_in">NSMutableDictionary</span> *textAttrs = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    textAttrs[<span class="built_in">NSForegroundColorAttributeName</span>] = [<span class="built_in">UIColor</span> itemColor];</div><div class="line">    <span class="built_in">NSMutableDictionary</span> *selectTextAttrs = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    selectTextAttrs[<span class="built_in">NSForegroundColorAttributeName</span>] = [<span class="built_in">UIColor</span> themeColor];</div><div class="line">    [childVC.tabBarItem setTitleTextAttributes:textAttrs forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    [childVC.tabBarItem setTitleTextAttributes:selectTextAttrs forState:<span class="built_in">UIControlStateSelected</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 添加为子控制器</span></div><div class="line">    [<span class="keyword">self</span> addChildViewController:childVC];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UINavigationController<br> 统一设置返回键样式</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)pushViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">self</span>.viewControllers.count &gt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="comment">// 自动显示和隐藏tabbar</span></div><div class="line">		viewController.hidesBottomBarWhenPushed = <span class="literal">YES</span>;</div><div class="line">		<span class="comment">// 设置左边的返回按钮</span></div><div class="line">		<span class="comment">// UIBarButtonItem category 方法,快速修改图片</span></div><div class="line">        viewController.navigationItem.leftBarButtonItem = [<span class="built_in">UIBarButtonItem</span></div><div class="line">        itemWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(popVC) image:<span class="string">@"wihteback_normal"</span></div><div class="line">        highImage:<span class="string">@"wihteback_hign"</span>];</div><div class="line">	&#125;</div><div class="line">	[<span class="keyword">super</span> pushViewController:viewController animated:animated];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加全屏返回手势</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIPanGestureRecognizer</span> *pan; <span class="comment">/**&lt; 返回手势*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> panGesEnable;           <span class="comment">/**&lt; 是否启用全屏手势*/</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;	</div><div class="line">	[<span class="keyword">super</span> viewDidLoad];</div><div class="line">	<span class="comment">// 获取系统自带滑动手势的target对象</span></div><div class="line">    <span class="keyword">id</span> target = <span class="keyword">self</span>.interactivePopGestureRecognizer.delegate;</div><div class="line">    <span class="comment">// 创建全屏滑动手势，调用系统自带滑动手势的target的action方法</span></div><div class="line">    SEL action = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"handleNavigationTransition:"</span>);</div><div class="line">    <span class="built_in">UIPanGestureRecognizer</span> *pan = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:target action:action];</div><div class="line">    <span class="comment">// 设置手势代理，拦截手势触发</span></div><div class="line">    pan.delegate = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">self</span>.pan = pan;</div><div class="line">    <span class="comment">// 给导航控制器的view添加全屏滑动手势</span></div><div class="line">    [<span class="keyword">self</span>.view addGestureRecognizer:pan];</div><div class="line">    <span class="comment">// 禁止使用系统自带的滑动手势</span></div><div class="line">    <span class="keyword">self</span>.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</div><div class="line">    <span class="comment">// 默认启用</span></div><div class="line">    <span class="keyword">self</span>.panGesEnable = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.panGesEnable) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.childViewControllers.count == <span class="number">1</span> ? <span class="literal">NO</span> : <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UIColor</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用16进制颜色</span></div><div class="line">+ (<span class="built_in">UIColor</span> *)colorWithRGBHex:(<span class="built_in">UInt32</span>)hex</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> r = (hex &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">    <span class="keyword">int</span> g = (hex &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">    <span class="keyword">int</span> b = (hex) &amp; <span class="number">0xFF</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRed:r / <span class="number">255.0</span>f</div><div class="line">                           green:g / <span class="number">255.0</span>f</div><div class="line">                            blue:b / <span class="number">255.0</span>f</div><div class="line">                           alpha:<span class="number">1.0</span>f];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用16进制颜色字符串格式</span></div><div class="line">+ (<span class="built_in">UIColor</span> *)colorWithHexString:(<span class="built_in">NSString</span> *)stringToConvert</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *cString = [[stringToConvert stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> whitespaceAndNewlineCharacterSet]] uppercaseString];</div><div class="line">    </div><div class="line">    <span class="comment">// String should be 6 or 8 characters</span></div><div class="line">    <span class="keyword">if</span> ([cString length] &lt; <span class="number">6</span>) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// strip 0X if it appears</span></div><div class="line">    <span class="keyword">if</span> ([cString hasPrefix:<span class="string">@"0X"</span>])</div><div class="line">        cString = [cString substringFromIndex:<span class="number">2</span>];</div><div class="line">    <span class="keyword">if</span> ([cString hasPrefix:<span class="string">@"#"</span>])</div><div class="line">        cString = [cString substringFromIndex:<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> ([cString length] != <span class="number">6</span>)</div><div class="line">        <span class="keyword">return</span> [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    </div><div class="line">    <span class="built_in">NSScanner</span> *scanner = [<span class="built_in">NSScanner</span> scannerWithString:cString];</div><div class="line">    <span class="keyword">unsigned</span> hexNum;</div><div class="line">    <span class="keyword">if</span> (![scanner scanHexInt:&amp;hexNum]) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRGBHex:hexNum];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 常用颜色写成分类</span></div><div class="line">+ (<span class="built_in">UIColor</span> *)themeColor </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRed:<span class="number">0</span> green:<span class="number">0</span> blue:<span class="number">0</span> alpha:<span class="number">1.0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UIImage</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据颜色生成图片</span></div><div class="line">+ (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> imageWithColor:color size:<span class="built_in">CGSizeMake</span>(<span class="number">1</span>, <span class="number">1</span>)];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color size:(<span class="built_in">CGSize</span>)size</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!color || size.width &lt;= <span class="number">0</span> || size.height &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, size.width, size.height);</div><div class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(rect.size, <span class="literal">NO</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context, color.CGColor);</div><div class="line">    <span class="built_in">CGContextFillRect</span>(context, rect);</div><div class="line">    <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UIView &amp;&amp; UIViewController<br>为UIView快速添加边框<br> <a href="https://github.com/aaronn/UIView-Borders" target="_blank" rel="external">UIView+Borders.h</a><br>为UIView添加红点,数字等<br> <a href="https://github.com/weng1250/WZLBadge" target="_blank" rel="external">WZLBadge</a><br>根据视图找到控制器</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIViewController</span> *)viewController </div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *view = <span class="keyword">self</span>; view; view = view.superview) &#123;</div><div class="line">        <span class="built_in">UIResponder</span> *nextResponder = [view nextResponder];</div><div class="line">        <span class="keyword">if</span> ([nextResponder isKindOfClass:[<span class="built_in">UIViewController</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="built_in">UIViewController</span> *)nextResponder;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取某个范围内的图形</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIImage</span> *)imageFromView:(<span class="built_in">UIView</span> *)theView atFrame:(<span class="built_in">CGRect</span>)r</div><div class="line">&#123; </div><div class="line">	<span class="built_in">UIGraphicsBeginImageContext</span>(theView.frame.size); </div><div class="line">	<span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>(); </div><div class="line">	<span class="built_in">CGContextSaveGState</span>(context); </div><div class="line">	<span class="built_in">UIRectClip</span>(r); </div><div class="line">	[theView.layer renderInContext:context]; </div><div class="line">	<span class="built_in">UIImage</span> *theImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>(); </div><div class="line">	<span class="built_in">UIGraphicsEndImageContext</span>();          </div><div class="line">	<span class="keyword">return</span>  theImage; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UIView移除所有子视图</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)removeAllSubviews</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">self</span>.subviews.count) &#123;</div><div class="line">        [<span class="keyword">self</span>.subviews.lastObject removeFromSuperview];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UIViewController默认设置</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.automaticallyAdjustsScrollViewInsets = <span class="literal">NO</span>;</div><div class="line"><span class="keyword">self</span>.edgesForExtendedLayout = <span class="built_in">UIRectEdgeNone</span>;</div><div class="line">- (<span class="built_in">UIEdgeInsets</span>)contentInset </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">UIEdgeInsetsMake</span>(<span class="number">64</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>网易云音乐启动动画</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TestViewController *test = [[TestViewController alloc] init];</div><div class="line"><span class="built_in">UIWindow</span> *keyWindow = [<span class="built_in">UIApplication</span> sharedApplication].keyWindow;   </div><div class="line">[<span class="built_in">UIView</span> transitionWithView:keyWindow duration:<span class="number">0.5</span> options:<span class="built_in">UIViewAnimationOptionTransitionFlipFromLeft</span> animations:^&#123;</div><div class="line">        [<span class="built_in">UIApplication</span> sharedApplication].keyWindow.rootViewController = test;</div><div class="line">&#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        </div><div class="line">&#125;];</div></pre></td></tr></table></figure>
</li>
<li><p>UITableViewCell &amp;&amp; UITableView &amp;&amp; UITableViewController<br>table view cell选中背景</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setSelected:(<span class="built_in">BOOL</span>)selected animated:(<span class="built_in">BOOL</span>)animated </div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> setSelected:selected animated:animated];</div><div class="line">    <span class="keyword">if</span> (selected) &#123;</div><div class="line">    	<span class="comment">// 选中</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">// 非选中</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>table view cell 左右间距,不填充整个table view</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setFrame:(<span class="built_in">CGRect</span>)frame</div><div class="line">&#123;</div><div class="line">    frame.origin.x = LEFT_MARGIN;</div><div class="line">    frame.size.width = kScreenWidth - LEFT_MARGIN * <span class="number">2</span>;</div><div class="line">    [<span class="keyword">super</span> setFrame:frame];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>table view cell 分割线</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法1,重写drawRect方法</span></div><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect </div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context, [<span class="built_in">UIColor</span> clearColor].CGColor);</div><div class="line">    <span class="built_in">CGContextFillRect</span>(context, rect);</div><div class="line">   </div><div class="line">    <span class="comment">//上分割线</span></div><div class="line">    <span class="built_in">CGContextSetStrokeColorWithColor</span>(context,[<span class="built_in">UIColor</span> whiteColor].CGColor);</div><div class="line">    <span class="built_in">CGContextStrokeRect</span>(context,<span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,rect.size.width,<span class="number">1</span>));</div><div class="line">   </div><div class="line">    <span class="comment">//下分割线</span></div><div class="line">    <span class="built_in">CGContextSetStrokeColorWithColor</span>(context,[<span class="built_in">UIColor</span> whiteColor].CGColor);</div><div class="line">    <span class="built_in">CGContextStrokeRect</span>(context,<span class="built_in">CGRectMake</span>(<span class="number">0</span>,rect.size.height<span class="number">-1</span>,rect.size.width,<span class="number">1</span>)); </div><div class="line">&#125;</div><div class="line"><span class="comment">// 方法2,隐藏自带分割线,然后再content view的layer上添加1像素的layer</span></div></pre></td></tr></table></figure>
<p>table view 默认设置</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 背景色</span></div><div class="line">tableView.backgroundColor = [<span class="built_in">UIColor</span> viewBackgroundColor];</div><div class="line"><span class="comment">// 分割线样式去除</span></div><div class="line">tableView.separatorStyle = <span class="built_in">UITableViewCellSeparatorStyleNone</span>;</div><div class="line"><span class="comment">// 表尾去除</span></div><div class="line">tableView.tableFooterView = [<span class="built_in">UIView</span> new];</div><div class="line"><span class="comment">// 表头去除</span></div><div class="line">tableView.tableHeaderView = [<span class="built_in">UIView</span> new];</div><div class="line"><span class="comment">// 区头默认有10高度,设置0无效,可以设置为0.01</span></div></pre></td></tr></table></figure>
<p>table view controller 添加3D Touch</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.遵循代理`UIViewControllerPreviewingDelegate`</span></div><div class="line"><span class="comment">// 2.注册cell</span></div><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath </div><div class="line">&#123;</div><div class="line">    DHCell *cell = [DHCell cellWithTableView:tableView];</div><div class="line">    <span class="comment">// 注册</span></div><div class="line">    [<span class="keyword">self</span> registerForPreviewingWithDelegate:<span class="keyword">self</span> sourceView:cell];</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 3.需要跳转的目标控制器</span></div><div class="line">- (<span class="built_in">UIViewController</span> *)previewingContext:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerPreviewing</span>&gt;)previewingContext viewControllerForLocation:(<span class="built_in">CGPoint</span>)location</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSIndexPath</span> *indexPath = [_tableView indexPathForCell:(<span class="built_in">UITableViewCell</span>* )[previewingContext sourceView]];</div><div class="line">	DestinationViewController *destinationVC = [[DestinationViewController alloc] init];</div><div class="line">	<span class="built_in">UINavigationController</span> *navc = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:destinationVC];</div><div class="line">	<span class="keyword">return</span> navc;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)previewingContext:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerPreviewing</span>&gt;)previewingContext commitViewController:(<span class="built_in">UIViewController</span> *)viewControllerToCommit</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> showViewController:viewControllerToCommit.childViewControllers[<span class="number">0</span>] sender:<span class="keyword">self</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">// 4.目标控制的操作,写在目标控制器的实现里面</span></div><div class="line">- (<span class="built_in">NSArray</span>&lt;<span class="keyword">id</span>&lt;<span class="built_in">UIPreviewActionItem</span>&gt;&gt; *)previewActionItems</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UIPreviewAction</span> * action1 = [<span class="built_in">UIPreviewAction</span> actionWithTitle:<span class="string">@"操作1"</span> style:<span class="built_in">UIPreviewActionStyleDefault</span> handler:^(<span class="built_in">UIPreviewAction</span> * _Nonnull action, <span class="built_in">UIViewController</span> * _Nonnull previewViewController) &#123;</div><div class="line">        DHLog(<span class="string">@"操作1"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="built_in">UIPreviewAction</span> * action2 = [<span class="built_in">UIPreviewAction</span> actionWithTitle:<span class="string">@"操作2"</span> style:<span class="built_in">UIPreviewActionStyleSelected</span> handler:^(<span class="built_in">UIPreviewAction</span> * _Nonnull action, <span class="built_in">UIViewController</span> * _Nonnull previewViewController) &#123;</div><div class="line">        DHLog(<span class="string">@"操作2"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="built_in">UIPreviewAction</span> * action3 = [<span class="built_in">UIPreviewAction</span> actionWithTitle:<span class="string">@"操作3"</span> style:<span class="built_in">UIPreviewActionStyleDestructive</span> handler:^(<span class="built_in">UIPreviewAction</span> * _Nonnull action, <span class="built_in">UIViewController</span> * _Nonnull previewViewController) &#123;</div><div class="line">        DHLog(<span class="string">@"操作3"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="built_in">NSArray</span> * actions = @[action1,action2,action3];</div><div class="line">    <span class="keyword">return</span> actions;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>app 添加 <code>Shortcuts</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</div><div class="line">&#123;</div><div class="line">	<span class="built_in">UIApplicationShortcutItem</span> *addItem = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:SHORTCUT_TYPE_ADD localizedTitle:<span class="string">@"添加"</span> localizedSubtitle:<span class="literal">nil</span> icon:	[<span class="built_in">UIApplicationShortcutIcon</span> iconWithType:<span class="built_in">UIApplicationShortcutIconTypeAdd</span>]</div><div class="line">	userInfo:@&#123;<span class="string">@"infoKey"</span>: <span class="string">@"infoValue"</span>&#125;];</div><div class="line">	[<span class="built_in">UIApplication</span> sharedApplication].shortcutItems = @[addItem];</div><div class="line">	<span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application performActionForShortcutItem:(<span class="built_in">UIApplicationShortcutItem</span> *)shortcutItem completionHandler:(<span class="keyword">void</span>(^)(<span class="built_in">BOOL</span> succeeded))completionHandler</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([shortcutItem.type isEqualToString:SHORTCUT_TYPE_ADD]) &#123;</div><div class="line">    	<span class="comment">// do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UIFont<br>添加自定义字体<br>第一步,Info.plist添加<code>Fonts provided by application</code> array,<code>item0</code>key,value 为字体文件名称全写;<br>第二步,打印所以字体,找到自定义字体所在family名称,根据名称找到具体字的名称;</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *familays = [<span class="built_in">UIFont</span> familyNames];</div><div class="line">NAArray *names = [<span class="built_in">UIFont</span> fontNamesForFamilyName:familyName];</div></pre></td></tr></table></figure>
<p>第三步,加载字体.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIfont</span> *customFont = [<span class="built_in">UIFont</span> fontWithName:fontName size:fontSize];</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIWebView清除缓存]]></title>
      <url>https://jiangdaohong.github.io./2016/10/22/UIWebView%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<p>webview清理缓存的正确姿势<br><a id="more"></a></p>
<p>最近项目中加了不少网页,有一些内容经常变动,未能及时刷新,网上找了一些方法,包括清除<code>NSURLCache</code>和写<code>js</code>进行清除,或者加载之前进行<code>reload</code>操作,发现都没效果,关掉网络还是可以加载出来😶后来发现想的复杂了,直接初始化<code>request</code>的时候缓存策略选择忽略本地缓存就好了,一声叹息…<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURLRequest</span> *request = [[<span class="built_in">NSURLRequest</span> alloc] initWithURL:[<span class="built_in">NSURL</span> URLWithString:urlStr] cachePolicy:<span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span> timeoutInterval:HTTP_REQUSET_TIMEOUT_INTERVAL];</div><div class="line">[webView loadRequest:request];</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[项目开发中的GCD实战应用]]></title>
      <url>https://jiangdaohong.github.io./2016/10/22/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84GCD%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>整理一下项目中GCD的应用<br><a id="more"></a></p>
<p>GCD是apple提供的一组C语言的API,主要用于实现一些特殊的功能,比如并发编程等,虽然是C语言的接口,但是经过block封装,调用十分方便,因此在项目中应用十分广泛,现在总结一下我个人在项目中的使用.</p>
<h3 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSTimeInterval</span> delayTime = <span class="number">5</span>;</div><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayTime * <span class="built_in">NSEC_PER_SEC</span>)), 	dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="comment">/// do someting on main thread</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="快速创建单例"><a href="#快速创建单例" class="headerlink" title="快速创建单例"></a>快速创建单例</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)shareInstance</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">id</span> shareInstance = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        shareInstance = [[<span class="keyword">self</span> alloc] init];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> shareInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异步执行代码"><a href="#异步执行代码" class="headerlink" title="异步执行代码"></a>异步执行代码</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">	<span class="comment">// do something ,global queue</span></div><div class="line">	<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">		<span class="comment">// main thread</span></div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="顺序执行代码-相当于使用NSOperationQueue的Dependency"><a href="#顺序执行代码-相当于使用NSOperationQueue的Dependency" class="headerlink" title="顺序执行代码(相当于使用NSOperationQueue的Dependency)"></a>顺序执行代码(相当于使用<code>NSOperationQueue</code>的<code>Dependency</code>)</h3><p>1,2,3同时执行,4最后打印<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t serviceGroup = dispatch_group_create();</div><div class="line">   </div><div class="line">    dispatch_group_enter(serviceGroup);</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        dispatch_group_leave(serviceGroup);</div><div class="line">    &#125;);</div><div class="line">   </div><div class="line">    dispatch_group_enter(serviceGroup);</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        dispatch_group_leave(serviceGroup);</div><div class="line">    &#125;);</div><div class="line">   </div><div class="line">    dispatch_group_enter(serviceGroup);</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        dispatch_group_leave(serviceGroup);</div><div class="line">    &#125;);</div><div class="line">   </div><div class="line">    dispatch_group_notify(serviceGroup, dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"4----%@"</span>, [<span class="built_in">NSThread</span> currentThread]); </div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>1,2异步执行完毕再异步执行3,4<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> barrierQueue = dispatch_queue_create(<span class="string">"jiangdaohong.github.io"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    <span class="built_in">dispatch_async</span>(barrierQueue, ^()&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">dispatch_async</span>(barrierQueue, ^()&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</div><div class="line">    &#125;);</div><div class="line">    dispatch_barrier_async(barrierQueue, ^()&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"dispatch_barrier_async test"</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">dispatch_async</span>(barrierQueue, ^()&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">dispatch_async</span>(barrierQueue, ^()&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"4"</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h3><p>由于NSURLSession没有提供同步请求,可以利用<code>semaphore</code>实现同步请求.<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</div><div class="line"><span class="comment">// 创建信号</span></div><div class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line"><span class="built_in">NSURLSessionDataTask</span> *task = [session dataTaskWithRequest:request completionHandler:^(<span class="built_in">NSData</span> *data, <span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="comment">// 设置信号量</span></div><div class="line">    dispatch_semaphore_signal(semaphore);</div><div class="line">&#125;];</div><div class="line"></div><div class="line">[task resume];</div><div class="line"><span class="comment">// 等待</span></div><div class="line">dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div></pre></td></tr></table></figure></p>
<h3 id="定时器-NSTimer不准"><a href="#定时器-NSTimer不准" class="headerlink" title="定时器(NSTimer不准)"></a>定时器(NSTimer不准)</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//倒计时时间</span></div><div class="line">__block <span class="keyword">int</span> timeout = <span class="number">60</span>;</div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, queue);</div><div class="line"><span class="comment">// 执行间隔1s</span></div><div class="line">dispatch_source_set_timer(timer, dispatch_walltime(<span class="literal">NULL</span>, <span class="number">0</span>),<span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span>);</div><div class="line">dispatch_source_set_event_handler(timer, ^&#123;</div><div class="line">    <span class="keyword">if</span>(timeout &lt;= <span class="number">0</span>)&#123;</div><div class="line">        <span class="comment">// 倒计时结束，关闭</span></div><div class="line">        dispatch_source_cancel(timer);</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            <span class="comment">// 主线程刷新UI</span></div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> minutes = timeout / <span class="number">60</span>;</div><div class="line">        <span class="keyword">int</span> seconds = timeout % <span class="number">60</span>;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            <span class="comment">// 主线程刷新UI</span></div><div class="line">        &#125;);</div><div class="line">        timeout--;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">dispatch_resume(timer);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[项目开发中KVC的简单应用]]></title>
      <url>https://jiangdaohong.github.io./2016/10/03/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%ADKVC%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>项目中有些时候使用KVC,可以节省很多的时间精力,实现快速开发</p>
<a id="more"></a>
<p>前一段时间有同学问我,能不能在不自定义UI的情况下,修改ActionSheet指定title的颜色,当时说很简单啊,Runtime获取实例变量列表,找到设置标题颜色的key,使用KVC就可以搞定.</p>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>编译条件: Xcode7.3.1;Project Deployment Target:iOS8.0.</p>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><ol>
<li><p>初始化一个ActionSheet.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIActionSheet</span> *actionSheet = [[<span class="built_in">UIActionSheet</span> alloc] initWithTitle:<span class="string">@"title"</span> delegate:<span class="literal">nil</span> cancelButtonTitle:<span class="string">@"cancle"</span> destructiveButtonTitle:<span class="string">@"destructive"</span> otherButtonTitles:<span class="string">@"other"</span>,<span class="string">@"other1"</span>, <span class="literal">nil</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>获取实例变量列表,可以为NSObject添加一个Category方法,用于打印列表,具体实现如下:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)printIvarList</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    Ivar *ivars = class_copyIvarList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;</div><div class="line">        Ivar ivar = ivars[i];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"name:%s------type:%s"</span>, ivar_getName(ivar),ivar_getTypeEncoding(ivar));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">name:_alertController------type:@<span class="string">"UIAlertController"</span></div><div class="line">name:_presenter------type:@<span class="string">"_UIAlertControllerShimPresenter"</span></div><div class="line">name:_retainedSelf------type:@<span class="string">"UIActionSheet"</span></div><div class="line">name:_actions------type:@<span class="string">"NSMutableArray"</span></div><div class="line">name:_cancelIndex------type:q</div><div class="line">name:_firstOtherButtonIndex------type:q</div><div class="line">name:_destructiveButtonIndex------type:q</div><div class="line">name:_actionSheetStyle------type:q</div><div class="line">name:_context------type:@</div><div class="line">name:_hasPreparedAlertActions------type:B</div><div class="line">name:_isPresented------type:B</div><div class="line">name:_alertControllerShouldDismiss------type:B</div><div class="line">name:_handlingAlertActionShouldDismiss------type:B</div><div class="line">name:_dismissingAlertController------type:B</div><div class="line">name:_delegate------type:@<span class="string">"&lt;UIActionSheetDelegate&gt;"</span>**</div></pre></td></tr></table></figure>
<p> 一看结果,好气哦,<code>UIAlertController</code>这个类是iOS8之后才允许使用的,算了,换用这个类重新打印一下吧,经过测试,<code>UIAlertAction</code>这个类含有可以设置标题的属性,属性列表大概是酱紫的:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">name:_checked------type:B</div><div class="line">name:_isPreferred------type:B</div><div class="line">name:_imageTintColor------type:@"UIColor"</div><div class="line">name:_titleTextColor------type:@"UIColor"</div><div class="line">name:_style------type:q</div><div class="line">name:_handler------type:@?</div><div class="line">name:_simpleHandler------type:@?</div><div class="line">name:_image------type:@"UIImage"</div><div class="line">name:_shouldDismissHandler------type:@?</div><div class="line">name:__descriptiveText------type:@"NSString"</div><div class="line">name:_contentViewController------type:@"UIViewController"</div><div class="line">name:_keyCommandInput------type:@"NSString"</div><div class="line">name:_keyCommandModifierFlags------type:q</div><div class="line">name:__representer------type:@"&lt;UIAlertActionViewRepresentation_Internal&gt;"</div><div class="line">name:__alertController------type:@"UIAlertController"</div></pre></td></tr></table></figure>
<p> 里面找一下,_titleTextColor就是它了.</p>
</li>
<li><p>找到了就试一下喽.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ac1 setValue:[<span class="built_in">UIColor</span> redColor] forKeyPath:<span class="string">@"_titleTextColor"</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>run一下,完美.</p>
</li>
<li>其他.<br> 通过第2步,可以看到在iOS8上使用<code>UIActionSheet</code>也是可以达到同样的效果的,因为其中有_actions可以得到一个<code>UIAlertAction</code>的数组,重复上述步骤即可完成,以后适配iOS7的应用越来越少了,不考虑iOS7的适配,使用KVC可以便捷地实现这种UI效果,还是不错的.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每到深夜,总是有话想说说]]></title>
      <url>https://jiangdaohong.github.io./2016/10/02/%E6%AF%8F%E5%88%B0%E6%B7%B1%E5%A4%9C-%E6%80%BB%E6%98%AF%E6%9C%89%E8%AF%9D%E6%83%B3%E8%AF%B4%E8%AF%B4/</url>
      <content type="html"><![CDATA[<p>随便写写字<br><a id="more"></a></p>
<p>来杭州工作一年多了,记得上次十一,还在加班搞这个项目,一年过去了,还是这个项目,心累…做了很久的东西,没来得及上线就被砍了,虽说是搬砖,心里总还是不爽的.之前一直想写博客,但是网上大牛很多,博客写的很好,我写出来有什么用呢?内心还是希望记录一些东西.直到前一段时间比较空闲,就搭建了这个博客.</p>
<p>除了想有个地方说说话,之前记录多很多零散的东西,都保存在笔记软件里面,前一段才发现,里面实在太乱了,正好借着整理一下,以后查阅也方便.</p>
<p>就这样,话唠.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记一次关于null_resettable的性能优化]]></title>
      <url>https://jiangdaohong.github.io./2016/10/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8Enull-resettable%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>最近在进行项目优化的时候遇到了关于null_resettable的坑,记录一下,由于之前代码不在了,简单模拟一下当时的情况.<br><a id="more"></a></p>
<p>最近项目要正式上线,需要进行一定的性能方面的测试,由于之前的数据加载的方案几经变化,都没有出现严重的性能问题,也没有在意,结果一测试,结果让我大跌眼镜:性能简直差到天边d(･｀ω´･d*)!!!简单log一下看看那里耗时严重.</p>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>硬件:iPhone5C,系统,iOS9.0.2(越狱)<br>网络:辣鸡WiFi…<br>没有模拟器,之前引入第三方蓝牙库,只有真机包,坑…,要不然直接Instruments查看了,不过当时预测不是大问题,就直接log查看了.</p>
<h3 id="主要过程"><a href="#主要过程" class="headerlink" title="主要过程"></a>主要过程</h3><p>思路:由于之前是采取分段加载数据,之后采取一次性加载数据,同时进行4个网络请求,可能在网络方面有耗时操作,包括请求数据,解析数据;另一个就是存在频繁调用方法的低性能,导致运行慢.<br>测试数据是血糖数据,数据时间跨度为两年,模拟数据3600条,主要包括空腹血糖数据,以及数据记录时间等,用于绘制曲线图,曲线图以四小时为单位进行绘制,可知共有<code>365 * 2 * 6 = 4380</code>个点需要绘制,其中包括大量的时间比较,因为在同一时间区间,比如4:00-8:00只允许有一个数据进行绘制,因此这里还有一个数据去重操作.大概过程理清之后,打印一下时间:<br><img src="http://ww4.sinaimg.cn/large/006y8lVagw1f8e88oerjmj312e0megzu.jpg" alt=""></p>
<h3 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h3><p>简单看了一下时间分布,总共有18s,网络部分,网络请求7s,其中有接近1s的数据解析耗时;绘图部分,空腹血糖数据生成耗时10s.<br>耗时代码:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">DHLog(<span class="string">@"-----------fbg数据开始------------"</span>);</div><div class="line">   __block <span class="built_in">NSMutableArray</span> *fbgVals = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">   __block <span class="built_in">NSInteger</span> didAddIndex = <span class="number">-1</span>; <span class="comment">// 标记是否被添加过</span></div><div class="line">   <span class="built_in">NSInteger</span> listCount = (<span class="built_in">NSInteger</span>)<span class="keyword">self</span>.weekRecords.count;</div><div class="line">   <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = listCount<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">       <span class="comment">// 从远到近取出时间</span></div><div class="line">       RecordBG *bg = <span class="keyword">self</span>.weekRecords[i];</div><div class="line">       <span class="built_in">NSDate</span> *currentDate = [bg.happenTime dotString2Date];</div><div class="line">       <span class="built_in">NSInteger</span> xPosition = [DHChartTool getXAxisPointWithHour:currentDate.hour];</div><div class="line">       </div><div class="line">       <span class="built_in">NSInteger</span> index = [<span class="built_in">NSDate</span> daysWithinEraFromDate:from toDate:currentDate] * <span class="number">6</span> + xPosition + <span class="number">6</span>;</div><div class="line">       <span class="keyword">if</span> (didAddIndex != index) &#123;</div><div class="line">           didAddIndex = index;</div><div class="line">           [fbgVals addObject:[[ChartDataEntry alloc] initWithValue:bg.fbg xIndex:index data:bg]];</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">   &#125;</div><div class="line">   DHLog(<span class="string">@"-----------fbg数据OK------------"</span>);</div></pre></td></tr></table></figure></p>
<p>按照以上思路,继续打印时间,最后定位问题代码<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSInteger</span> index = [<span class="built_in">NSDate</span> daysWithinEraFromDate:from toDate:currentDate] * <span class="number">6</span> + xPosition + <span class="number">6</span>;</div></pre></td></tr></table></figure></p>
<p>进入看一下这行代码的功能,主要用于计算两个日期之间的整数天.代码实现如下:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSInteger</span>)daysWithinEraFromDate:(<span class="built_in">NSDate</span> *) startDate toDate:(<span class="built_in">NSDate</span> *) endDate</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSCalendar</span> *cal = [<span class="built_in">NSCalendar</span> currentCalendar];</div><div class="line">    <span class="built_in">NSDate</span> *s = [[startDate dateStringWithFormatString:<span class="string">@"yyyy-MM-dd"</span>] string2DateWithFormat:<span class="string">@"yyyy-MM-dd"</span>];</div><div class="line">    <span class="built_in">NSDate</span> *e = [[endDate dateStringWithFormatString:<span class="string">@"yyyy-MM-dd"</span>] string2DateWithFormat:<span class="string">@"yyyy-MM-dd"</span>];</div><div class="line">    <span class="built_in">NSInteger</span> startDay=[cal ordinalityOfUnit:<span class="built_in">NSDayCalendarUnit</span></div><div class="line">                                      inUnit: <span class="built_in">NSEraCalendarUnit</span> forDate:s];</div><div class="line">    <span class="built_in">NSInteger</span> endDay=[cal ordinalityOfUnit:<span class="built_in">NSDayCalendarUnit</span></div><div class="line">                                    inUnit: <span class="built_in">NSEraCalendarUnit</span> forDate:e];</div><div class="line">    <span class="keyword">return</span> (endDay-startDay);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看了一下这几行代码,<code>[endDate dateStringWithFormatString:@&quot;yyyy-MM-dd&quot;]</code>主要用于去掉日期的时分秒时间,<code>[cal ordinalityOfUnit:NSDayCalendarUnit inUnit:NSEraCalendarUnit forDate:s]</code>是系统提供的方法,进行单独测试,没发现问题.上面的方法实现如下:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)dateStringWithFormatString:(<span class="built_in">NSString</span> *)formatString &#123;</div><div class="line">    <span class="built_in">NSDateFormatter</span> *dateFormatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</div><div class="line">    [dateFormatter setDateFormat:formatString];</div><div class="line">    <span class="keyword">return</span> [dateFormatter stringFromDate:<span class="keyword">self</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里只是对系统方法进行简单调用,单看代码没问题,每个方法进入头文件看一下,其中一个关键字引起注意,想起了之前听说过<code>NSDate</code>有性能问题,当时没注意,现在看到这个关键字,猜测是这个属性引起的性能问题:</p>
<blockquote>
<p>NSDateFormatter.h<br>@property (null_resettable, copy) NSString *dateFormat;<br>使用null_resettable修饰的属性,字面意义,不可重置的,官方默认使用这个关键字,就是告诉开发者尽量不要重置这个属性的值,因为重置需要重写set和get,防止为空的情况下没有默认值,好了,就是这个坑.</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>定位到问题代码,优化考虑从两方面入手,一是避免调用这个方法,二是替换这个方法的实现,换用更好性能的实现.在原先的代码中,有很多地方调用<code>[NSDate daysWithinEraFromDate: toDate:]</code>,还有很多地方调用日期转字符串的方法.<br>首先,把简单调用日期转字符串的方法改为字符串截取方法,比如,只需要获取年月日的地方可以这样调用:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *dateStr = [[[[date dateByAddingDays:i] description] substringToIndex:<span class="number">10</span>] stringByReplacingOccurrencesOfString:<span class="string">@"-"</span> withString:<span class="string">@"/"</span>];</div></pre></td></tr></table></figure></p>
<p>这样就可以把日期转换为yyyy-MM-dd格式,注意,需要保证date的<code>description</code>返回标准格式,防止他人重写<code>description</code>带来隐患,<br>其次,把需要进行计算日期差的方法改为下面的实现:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSInteger</span>)dh_daysWithinEraFromDate:(<span class="built_in">NSString</span> *)startDate toDate:(<span class="built_in">NSString</span> *)endDate</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSCalendar</span> *cal = [<span class="built_in">NSCalendar</span> currentCalendar];</div><div class="line">    <span class="comment">// 截取年月日</span></div><div class="line">    <span class="built_in">NSString</span> *start = [startDate substringToIndex:<span class="number">10</span>];</div><div class="line">    <span class="built_in">NSString</span> *end = [endDate substringToIndex:<span class="number">10</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">NSDateFormatter</span> *formatter;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</div><div class="line">        [formatter setDateFormat:<span class="string">@"yyyy-MM-dd"</span>];</div><div class="line">        [formatter setLocale:[<span class="built_in">NSLocale</span> currentLocale]];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">// 转成去掉时分秒的日期</span></div><div class="line">    <span class="built_in">NSDate</span> *s = [formatter dateFromString:start];</div><div class="line">    <span class="built_in">NSDate</span> *e = [formatter dateFromString:end];</div><div class="line">    </div><div class="line">    <span class="built_in">NSInteger</span> startDay=[cal ordinalityOfUnit:<span class="built_in">NSDayCalendarUnit</span></div><div class="line">                                      inUnit: <span class="built_in">NSEraCalendarUnit</span> forDate:s];</div><div class="line">    <span class="built_in">NSInteger</span> endDay=[cal ordinalityOfUnit:<span class="built_in">NSDayCalendarUnit</span></div><div class="line">                                    inUnit: <span class="built_in">NSEraCalendarUnit</span> forDate:e];</div><div class="line">    <span class="keyword">return</span> (endDay-startDay);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>经过这一番修改,绘制时间缩短到了1.5s,但是网络请求时间太久,接下来就是进行数据本地缓存,网络分段加载数据等方面网络部分的优化了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xcode命令行打包]]></title>
      <url>https://jiangdaohong.github.io./2016/09/25/Xcode%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>记录一下使用命令行进行打包<br><a id="more"></a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>最近公司进行内部测试,要求每天进行App打包上传,本来想搭建一个CI系统,但是实在没有精力(好吧,是没有成功╮(╯_╰)╭,搭建到一半下载git等插件的时候一直出问题,下次有时间再搞了),项目不大,但是每次打包要10分钟(里面有Swift混编,大坑),忍不了了,上网查了一下看到有一些编译优化指令,然后看CI的时候看到了自动打包命令,试了一下,打包时间可以缩短到3分钟以内,记录一下过程吧.</p>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><ol>
<li>Xcode中修改编译选项,修改为发布版证书和描述文件,或者修改编译Target</li>
<li>终端进入项目所在文件夹</li>
<li>执行命令xcodebuild clean</li>
<li><p>继续执行命令</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcodebuild -workspace appname.xcworkspace -scheme appname -configuration Release -derivedDataPath build</div></pre></td></tr></table></figure>
<p>这是有workspace的项目的指令,需要将appname替换为你的项目名<br>如果未使用workspace,用下面的命令就可以了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun -sdk iphoneos PackageApplication -v build/Release-iphoneos/app.app -o /path/appname.ipa</div></pre></td></tr></table></figure>
<p>后面的是输出路径以及打包app的名字</p>
</li>
<li><p>项目使用workspace,进行ipa输出,执行命令</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun -sdk iphoneos PackageApplication -v /ProjectPath/build/Build/Products/Release-iphoneos/appname.app -o /path/appname.ipa</div></pre></td></tr></table></figure>
<p>ProjectPath替换为你项目的路径,保证此路径下面有Release-iphoneos目录</p>
</li>
<li>发布项目,暂时手动发布😢</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reveal真机查看app]]></title>
      <url>https://jiangdaohong.github.io./2016/09/23/Reveal%E7%9C%9F%E6%9C%BA%E6%9F%A5%E7%9C%8Bapp/</url>
      <content type="html"><![CDATA[<p>记录一下使用Reveal的基本使用<br><a id="more"></a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>使用设备:iPhone5C,系统版本iOS9.0.2</li>
<li>Reveal版本:1.6.3</li>
<li>Cydia版本:1.1.26;Reveal Loader版本:1.0.0-1</li>
<li>Xcode版本:7.3.1</li>
</ol>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>一台越狱iOS设备</li>
<li>Cydia下载Reveal Loader,如果你是iOS最新的操作系统,建议下载最新的插件,<a href="https://github.com/heardrwt/RevealLoader" target="_blank" rel="external">下载地址</a></li>
<li>下载<a href="http://revealapp.com/download/" target="_blank" rel="external">Reveal</a>,查看官方使用说明</li>
<li>一定保证Reveal和越狱设备在同一网络环境下</li>
</ol>
<h3 id="真机查看app步骤"><a href="#真机查看app步骤" class="headerlink" title="真机查看app步骤"></a>真机查看app步骤</h3><ol>
<li>下载需要查看的app,这里演示查看系统的播客app</li>
<li>打开系统设置,找到Reveal,在里面找到需要查看的app, enable,界面如下图所示.<br><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f861nvo8guj20hs0vkjt2.jpg" alt="Reveal界面"><br><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f861ldv4ozj20hs0vkq5w.jpg" alt="reveal插件界面"></li>
<li>打开app</li>
<li>打开Reveal,选择连接查看的app,如下图<br><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f861pa9znxj20ia03qaam.jpg" alt="连接Reveal"></li>
<li>这样就可以查看app了,可以看到,播客app中间部分使用的控件名称以及布局方式<br><img src="http://ww2.sinaimg.cn/large/72f96cbagw1f861qucaq1j21kw0v213g.jpg" alt="查看app界面"></li>
</ol>
<h3 id="使用Reveal查看自己的app的简单方式"><a href="#使用Reveal查看自己的app的简单方式" class="headerlink" title="使用Reveal查看自己的app的简单方式"></a>使用Reveal查看自己的app的简单方式</h3><p>使用Reveal查看自己的app的方式很简单,只需要配置一下断点即可,官方给出了教程,可以点击<a href="http://support.revealapp.com/kb/getting-started/load-the-reveal-server-via-an-xcode-breakpoint" target="_blank" rel="external">这里</a>查看.</p>
<h3 id="简单记录利用符号断点查看App步骤"><a href="#简单记录利用符号断点查看App步骤" class="headerlink" title="简单记录利用符号断点查看App步骤"></a>简单记录利用符号断点查看App步骤</h3><ol>
<li>打开Xcode,选择<strong>View</strong> <strong>→ Navigators</strong> <strong>→ Show Breakpoint Navigator</strong></li>
<li>点击 <strong>+</strong> 按钮,选择<strong>Add Symbolic Breakpoint</strong>,如下图<br><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f862aw5twjj20ea06wabf.jpg" alt="添加图片"></li>
<li><p>进行断点编辑,如下图<br><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f862cendfrj20q40egq6w.jpg" alt="编辑断点"><br>  断点命令:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">expr (Class)NSClassFromString(@"IBARevealLoader") == nil ? (void )dlopen("/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/RevealServer.framework/RevealServer", 0x2) : ((void)0)</div></pre></td></tr></table></figure>
<p>如果命令无效,参看<a href="http://support.revealapp.com/kb/getting-started/load-the-reveal-server-via-an-xcode-breakpoint" target="_blank" rel="external">官方教程</a></p>
</li>
<li>进行断点设置,如下图<br><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f862fq6wfbj20s80ccgpf.jpg" alt="断点设置"></li>
<li>运行Xcode,接下来的步骤是重复真机查看app步骤4-5步.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装Chisel]]></title>
      <url>https://jiangdaohong.github.io./2016/09/22/%E5%AE%89%E8%A3%85Chisel/</url>
      <content type="html"><![CDATA[<p>记录一下使用Chisel的安装过程以及基本的命令<br><a id="more"></a></p>
<ol>
<li>使用 brew install chisel</li>
<li>记录默认命令的安装路径,默认路径是 /usr/local/opt/chisel/libexec/fblldb.py</li>
<li>用vim打开 <code>~./lldbinit</code> 文件,如果不存在,新建此文件</li>
<li><p>在文件中添加命令</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">command script <span class="keyword">import</span> 安装路径</div></pre></td></tr></table></figure>
</li>
<li><p>重启Xcode</p>
</li>
</ol>
<p>官方地址以及常用命令参考:<a href="https://github.com/facebook/chisel" target="_blank" rel="external">https://github.com/facebook/chisel</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tips]]></title>
      <url>https://jiangdaohong.github.io./2016/08/19/tips/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 主线程</div><div class="line">if (pthread_main_np() == 0) returnnil;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//处于开发阶段</div><div class="line">#ifdef DEBUG</div><div class="line">#define DHLog(...) NSLog(VA_ARGS)</div><div class="line">#else</div><div class="line">//处于发布阶段</div><div class="line">#define DHLog(...)</div><div class="line">#endif</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Format</div><div class="line">#define F(string, args...)                  [NSString stringWithFormat:string, args]</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[123]]></title>
      <url>https://jiangdaohong.github.io./2016/08/19/hello%20world/</url>
      <content type="html"><![CDATA[<p>hello world</p>
]]></content>
    </entry>
    
  
  
</search>
