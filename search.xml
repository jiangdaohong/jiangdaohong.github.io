<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[浅谈iOS复杂列表优化]]></title>
      <url>https://jiangdaohong.github.io./2017/05/14/%E6%B5%85%E8%B0%88iOS%E5%A4%8D%E6%9D%82%E5%88%97%E8%A1%A8%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>记录一下最进项目改版的一些思考<br><a id="more"></a></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>由于原来首页列表需求多次大变动,加载<code>cell</code>的逻辑也跟着调整了很多次,<code>cell</code>的种类以及布局也变化很大,这次刚好进行重构;而且,原来的加载方式会大量进行子视图修改,有一定的潜在性能问题.</p>
<h3 id="需求分析及目标"><a href="#需求分析及目标" class="headerlink" title="需求分析及目标"></a>需求分析及目标</h3><ol>
<li><code>cell</code>布局更加灵活,以后增加新类型不需要修改控制器代码逻辑,简言之,视图和控制器解耦;</li>
<li>实现代码复用</li>
<li>解决潜在性能问题<br>在进行coding之前,可以参考一下几篇文章,里面对列表的论述多有裨益:<br><a href="https://objccn.io/issue-1-1/" target="_blank" rel="external">更轻量的 View Controllers</a><br><a href="https://objccn.io/issue-1-2/" target="_blank" rel="external">整洁的 Table View 代码</a><br><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">iOS 保持界面流畅的技巧</a></li>
</ol>
<p>前两篇介绍了如何编写低耦合的<code>UITableView</code>代码的思想,核心就是:</p>
<ol>
<li>将其<code>delegate</code>和<code>datasource</code>进行独立,创建单独的类进行管理,这个类是可以复用的,并且通过<code>blocks</code>的方法进行<code>cell</code>的创建于赋值,而控制器不需要了解<code>cell</code>的实现;</li>
<li>将数据操作集中到单独创建的类中,而数据模型有时候携带的数据还需要重新加工才可以使用,例如返回<code>yyyy-MM-dd HH:mm:ss</code>类型的时间,而我们需要的是<code>yyyy年MM月dd日</code>格式的字符串,类似这种处理可以放在模型的<code>category</code>中;</li>
<li>面对复杂的布局,比如当前页面中会显示多个控制器视图,类似<code>UITabBarController</code>结构,我们可以采用加载<code>Child Controller</code>的方式,将内聚程度高的代码写到所属控制器中;<br>这样,基本上就可以写出比较好,易于测试的<code>UITabelView</code>了,具体的代码可以参考原文,讲述的很详细了.</li>
</ol>
<p>第三篇博文主要讲解了如何进行性能优化,总结下来就是以下几点:</p>
<ol>
<li>CPU耗费资源的地方主要在<code>对象创建</code>,<code>对象调整</code>,<code>对象销毁</code>,<code>布局计算</code>,<code>Autolayout</code>,<code>文本计算</code>,<code>文本渲染</code>,<code>图片的解码</code>,<code>图像的绘制</code>等;</li>
<li>GPU资源的耗费主要集中在<code>纹理的渲染</code>,<code>视图的混合</code>,<code>图像的生成</code><br>针对以上几个方面,作者一一给出了解决方案,详细内容请<a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">参看原文</a><br>值得注意的是作者提出了<code>过早的优化是万恶之源</code>,当需求不明显或者性能问题不明显的时候尽量不要尝试优化,并给出了评测界面的方法,开源了一个查看<code>FPS</code>的小工具,地址<a href="https://github.com/ibireme/YYText/blob/master/Demo/YYTextDemo/YYFPSLabel.m" target="_blank" rel="external">戳一下</a><br>作者开源了一个开发套件,非常不错,里面附了一个微博的Feedlist demo,代码写的非常漂亮,准备借鉴他的做法,<a href="https://github.com/ibireme/YYKit" target="_blank" rel="external">demo地址</a></li>
</ol>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>看一下页面列表,大概是这样的:<br><img src="http://ww4.sinaimg.cn/large/006tKfTcly1ffl9xgm1hkj30ku0xeadx.jpg" alt="home page list"><br>首页返回的简化数据结构:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeItemInfo</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *itemInfoId;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) DHHomeItemType type; <span class="comment">/**&lt; 类型:1、text 2、list*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *title;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSData</span> *content;     <span class="comment">/**&lt; 返回的泛型数据,根据type进行解析*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) User *user;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDate</span> *updateTime;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> unreadTotal;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>现在<code>cell</code>至少有两种布局,一种根据<code>list</code>显示若干<code>item</code>,一种显示为<code>text</code>,根据上图可以将 cell 划分三部分:</p>
<ol>
<li>顶部显示标题,包括姓名以及指标的名称,未读数,日期,分割线,实际上还有一个诊断的按钮, UI 上没有显示,诊断和标题有点击事件;</li>
<li>中部根据返回的数据类型,显示为文本或者若干 item, item 最多显示6个,并且可能有点击事件;</li>
<li>底部显示箭头,阴影以及一定的留白.</li>
</ol>
<p>首先,定义一个<code>DHHomeCell</code>类,用于显示所有的数据类型,在主页中进行设置;<br>接着,定义一个<code>DHHomeLayout</code>类,用于在子线程计算<code>cell</code>的布局等耗时操作,<code>cell</code>通过<code>layout</code>对象进行对象绑定,高度设置;<br>最后,定义一个<code>DHHomeCellDelegate</code>,用于传递点击事件.<br>这样,就把视图,数据处理以及交互进行了分离.</p>
<p><code>cell</code>中大概是这样的:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">DHHomeCell</span>;</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DHHomeCellDelegate</span>;</span></div><div class="line"></div><div class="line"><span class="comment">/// 顶部</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeTitleView</span> : <span class="title">UIView</span></span></div><div class="line"><span class="comment">// ...顶部视图属性</span></div><div class="line"><span class="comment">// 持有父视图cell</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DHHomeCell *cell;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/// 中部</span></div><div class="line"><span class="comment">/// 文本</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeTextLabel</span> : <span class="title">UILabel</span></span></div><div class="line"><span class="comment">// ...视图属性</span></div><div class="line"><span class="comment">// 持有父视图cell</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DHHomeCell *cell;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeLayout *layout;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/// 单独指标的view</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HDNewDataItemView</span> : <span class="title">UIView</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/// 底部视图</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HDHomeBottomView</span> : <span class="title">UIView</span></span></div><div class="line"><span class="comment">// ...视图属性</span></div><div class="line"><span class="comment">// 持有父视图cell</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DHHomeCell *cell;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeLayout *layout;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 容器 view</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeContentView</span>: <span class="title">UIView</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *contentView;               <span class="comment">/// 容器</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeTitleView *titleView;        <span class="comment">/// 标题栏</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHDiagnoseButton *diagnoseButton;  <span class="comment">/// 诊断按钮</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *items;                    <span class="comment">///指标 Array&lt;HDNewDataItemView&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeTextLabel *contentTextLabel; <span class="comment">/// 文本</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) HDHomeBottomView *contentTextLabel; <span class="comment">/// 底部</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeLayout *layout; <span class="comment">/**&lt; 布局*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) DHHomeCell *cell;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeCell</span> : <span class="title">UITableViewCell</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;DHHomeCellDelegate&gt; delegate;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DHHomeContentView *dataContentView;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setHomeLayout:(DHHomeLayout *)layout;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/// 代理方法</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DHHomeCellDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">/// 点击了 Cell</span></div><div class="line">- (<span class="keyword">void</span>)cellDidClick:(DHHomeCell *)cell;</div><div class="line"><span class="comment">/// 点击了用户</span></div><div class="line">- (<span class="keyword">void</span>)cell:(DHHomeCell *)cell didClickUser:(<span class="built_in">NSString</span> *)userId;</div><div class="line"><span class="comment">// 点击诊断信息</span></div><div class="line">- (<span class="keyword">void</span>)cell:(DHHomeCell *)cell didClickDiagnose:(DiagnoseInfo *)info;</div><div class="line"><span class="comment">/// 点击了item</span></div><div class="line">- (<span class="keyword">void</span>)cell:(DHHomeCell *)cell didClickNewDataItemAtIndex:(<span class="built_in">NSUInteger</span>)index;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>所有的视图都通过<code>layout</code>的计算结果进行布局,当为<code>list</code>样式,<code>cell</code>中的<code>HDNewDataItemView</code>个数不确定,类似的,根据常见的九宫格布局,可以在初始化的时候一次性添加 6 个这样的子视图,默认全部隐藏,然后根据返回的<code>list</code>进行显示.</p>
<p>在<code>DHHomeLayout</code>中,可以定义一些处理好的数据以及计算的<code>frame</code>作为属性,方便进行缓存处理,实现大概是这样子的:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 子线程进行布局</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DHHomeLayout</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithWorkspaceItem:(DHHomeItemInfo *)item style:(DHHomeItemType)type;</div><div class="line"></div><div class="line"><span class="comment">// 做一些其他更新</span></div><div class="line">- (<span class="keyword">void</span>)updateSomething;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) DHHomeItemInfo *item;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) DHHomeLayoutStyle style;</div><div class="line"></div><div class="line"><span class="comment">// item中一些深层次访问的对象,或者经过处理的若干属性,比如处理好的时间字符串</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *updateTime;</div><div class="line"></div><div class="line"><span class="comment">// layout</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> height; <span class="comment">/**&lt; 总高度*/</span></div><div class="line"></div><div class="line"><span class="comment">// 顶部视图高度以及子视图位置信息</span></div><div class="line"><span class="comment">// ...若干</span></div><div class="line"></div><div class="line"><span class="comment">// 中部视图位置信息</span></div><div class="line"><span class="comment">// ...若干</span></div><div class="line"></div><div class="line"><span class="comment">// 底部视图位置信息</span></div><div class="line"><span class="comment">// ...若干</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>需要注意的是,其中一些属性,比如图片相关的设置,是需要在主线程中进行的.一些经常使用的图片或者创建耗时的对象可以使用<code>dispatch_once</code>代码块进行保存,都可以进行一定的性能优化,如果还是出现卡顿,确定问题后,可以借助开源的异步显示框架进行优化.<br>调用起来大概是这样子的:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        DHHomeLayout *layout = [[DHHomeLayout alloc] initWithWorkspaceItem:item style:style];</div><div class="line">        [<span class="keyword">self</span>.layouts addObject:layout];</div><div class="line">        <span class="comment">// 多复制一下列表,测试长度</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            [<span class="keyword">self</span>.layouts addObjectsFromArray:[<span class="keyword">self</span>.layouts <span class="keyword">copy</span>]];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        	[<span class="keyword">self</span>.tableView reloadData];</div><div class="line">    	&#125;);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    <span class="keyword">return</span> _layouts.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line"></div><div class="line">    <span class="built_in">NSString</span> *cellID = <span class="string">@"cell"</span>;</div><div class="line">    DHHomeCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID];</div><div class="line">    <span class="keyword">if</span> (!cell) &#123;</div><div class="line">        cell = [[DHHomeCell alloc] initWithStyle:<span class="built_in">UITableViewCellStyleDefault</span> reuseIdentifier:cellID];</div><div class="line">        cell.delegate = <span class="keyword">self</span>;</div><div class="line">    &#125;</div><div class="line">    [cell setHomeLayout:_layouts[indexPath.row]];</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    <span class="keyword">return</span> [(DHHomeLayout *)_layouts[indexPath.row] height];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 一堆代理方法...</span></div></pre></td></tr></table></figure></p>
<p>这样,基本完成了复杂列表的重构.<br>还可以创建一个工具类或者<code>category</code>,将常用的处理方法进行封装,使用工具类处理,可以方便测试以及代码复用.</p>
<p>如果以后需求出现变动,只需要<code>cell</code>添加新视图,<code>layout</code>计算新的视图的布局,增加新的枚举类型即可完成布局.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[music]]></title>
      <url>https://jiangdaohong.github.io./2017/04/27/music/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/#/song?id=29431066&height=66"></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发备忘]]></title>
      <url>https://jiangdaohong.github.io./2017/03/11/iOS%E5%BC%80%E5%8F%91%E5%A4%87%E5%BF%98/</url>
      <content type="html"><![CDATA[<h3 id="资源及博客列表"><a href="#资源及博客列表" class="headerlink" title="资源及博客列表"></a>资源及博客列表</h3><ol>
<li><a href="https://www.objc.io" target="_blank" rel="external">objc</a></li>
<li><a href="https://objccn.io" target="_blank" rel="external">objc中国</a></li>
<li><a href="http://nshipster.com" target="_blank" rel="external">nshipster</a></li>
<li><a href="http://nshipster.cn" target="_blank" rel="external">nshipster中国</a></li>
<li><a href="http://www.raywenderlich.com" target="_blank" rel="external">raywenderlich</a></li>
<li><a href="http://blog.devtang.com" target="_blank" rel="external">唐巧的博客</a></li>
<li><a href="https://onevcat.com" target="_blank" rel="external">OneV’s Den</a></li>
<li><a href="http://blog.txx.im/?from=inf&amp;wvr=5&amp;loc=infblog" target="_blank" rel="external">txx’s blog</a></li>
<li><a href="http://xiangwangfeng.com" target="_blank" rel="external">阿毛的蛋疼地</a></li>
<li><a href="https://nianxi.net" target="_blank" rel="external">程序员念茜</a></li>
<li><a href="https://nianxi.net" target="_blank" rel="external">YY的博客Garan no dou</a></li>
</ol>
<h3 id="runtime以及run-loop"><a href="#runtime以及run-loop" class="headerlink" title="runtime以及run loop"></a>runtime以及run loop</h3><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><h3 id="设计模式以及架构"><a href="#设计模式以及架构" class="headerlink" title="设计模式以及架构"></a>设计模式以及架构</h3><ol>
<li><a href="https://casatwy.com" target="_blank" rel="external">模块化</a>,主要讲模块化的一些思想</li>
<li><a href="https://blog.cnbluebox.com" target="_blank" rel="external">刘坤的技术博客</a>,网络以及布局</li>
<li><a href="https://blog.maxleap.cn/archives/1044" target="_blank" rel="external">更轻的app delegate</a></li>
<li><a href="https://objccn.io/issue-1-0/" target="_blank" rel="external">更轻的view controller</a></li>
<li><a href="http://blog.csdn.net/uxyheaven/article/details/49226175" target="_blank" rel="external">iOS精益编程</a></li>
</ol>
<h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><h3 id="OC与js交互"><a href="#OC与js交互" class="headerlink" title="OC与js交互"></a>OC与js交互</h3><h3 id="open-gl"><a href="#open-gl" class="headerlink" title="open gl"></a>open gl</h3><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h3 id="图文混排"><a href="#图文混排" class="headerlink" title="图文混排"></a>图文混排</h3><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[30分钟正则表达式入门学习笔记]]></title>
      <url>https://jiangdaohong.github.io./2017/02/14/30%E5%88%86%E9%92%9F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>项目开发中经使用正则表达式,但是没有系统看过使用的方法,看到一个快速入门的网站,做个学习笔记.<br><a id="more"></a></p>
<p>这些内容你可以在这个<a href="http://deerchao.net/tutorials/regex/regex.htm#mission" target="_blank" rel="external">博客</a>看到,这是我的学习笔记</p>
<h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>举个例子,如果要匹配一篇小说中<code>Hi</code>出现的地方,在忽略大小写的情况下,直接用表达式<code>hi</code>就好了,分析一些这个简单的表达式:是一个包含h和i的字符串.这样在应用中已经可以简单使用了,是的,有一个🌰:比如进行模糊搜索的时候,需要高亮显示搜索的关键字,在iOS中可以这么写:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.titles = @[</div><div class="line">                   <span class="string">@"哈哈"</span>,</div><div class="line">                   <span class="string">@"有有"</span>,</div><div class="line">                   <span class="string">@"哈哈222"</span>,</div><div class="line">                   <span class="string">@"牛逼"</span>,</div><div class="line">                   <span class="string">@"你收哈哈fdkasn哈哈"</span>,</div><div class="line">                   <span class="string">@"不知道"</span>,</div><div class="line">                   <span class="string">@"没有"</span></div><div class="line">                   ];</div><div class="line">   <span class="built_in">NSString</span> *pattern = <span class="string">@"哈哈"</span>;</div><div class="line">   <span class="comment">// 也可以写成@"哈&#123;2&#125;"</span></div><div class="line">   <span class="keyword">for</span> (<span class="built_in">NSString</span> *string <span class="keyword">in</span> <span class="keyword">self</span>.titles) &#123;</div><div class="line">       <span class="built_in">NSMutableAttributedString</span> *attributed = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:string];</div><div class="line">       <span class="built_in">NSRegularExpression</span> *exp = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:pattern options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:<span class="literal">nil</span>];</div><div class="line">       </div><div class="line">       <span class="built_in">NSArray</span> *ary = [exp matchesInString:string options:<span class="number">0</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, string.length)];</div><div class="line">       </div><div class="line">       <span class="keyword">for</span> (<span class="built_in">NSTextCheckingResult</span> *result <span class="keyword">in</span> ary) &#123;</div><div class="line">           [attributed addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:[<span class="built_in">UIColor</span> redColor] range:result.range];</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       [<span class="keyword">self</span>.attributeTitles addObject:attributed];</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这样就能简单匹配出来目标字符串含有<code>哈哈</code>的字符所在的range,而且正则表达式的表达方式十分简洁,同样的功能,不用正则表达式可能会增加很多的代码.</p>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table>
<thead>
<tr>
<th>元字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>匹配除了换行符的任意字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字符,数字,下划线,汉字</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空白符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词的开始符或者结束符</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非字符边界</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结束</td>
</tr>
</tbody>
</table>
<p><a href="http://www.jianshu.com/p/4b2bad4ad3e8" target="_blank" rel="external">这里</a>有一些例子<br>查找以上特殊字符需要使用<code>\</code>进行转义.</p>
<h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><table>
<thead>
<tr>
<th>限定符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>重复至少0次</td>
</tr>
<tr>
<td>+</td>
<td>重复至少1次</td>
</tr>
<tr>
<td>?</td>
<td>重复0次或者1次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或者更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
<tr>
<td>*?</td>
<td>0次或者多次，但是次数尽可能少，例如正则：<code>[\d]*?</code>,待匹配字符：12345,匹配次数6次，都是空</td>
</tr>
<tr>
<td>+?</td>
<td>1次或者多次，但是次数尽可能少，例如正则：<code>[\d]+?</code>,待匹配字符：12345，匹配次数5次，匹配结果是：1，2，3，4，5</td>
</tr>
<tr>
<td>??</td>
<td>0次或1次，例如正则：[\d]??,待匹配字符：12345,匹配次数6次，都是空</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
</tbody>
</table>
<p>字符类可以轻松表示一些字符的集合,比如<code>[0-9]</code>表示<code>\d</code>,即表示一位数字;<code>[a-z0-9A-Z]</code>的含义与<code>\w</code>一致,表示小写字母a-z,数字0-9以及大写字母A-Z的范围内的一位字符.<br>找一个正则表达式分析一下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">^[a-zA-Z]\w&#123;<span class="number">5</span>,<span class="number">15</span>&#125;$</div><div class="line">含义为:开头为大小写的字母,然后长度为<span class="number">5</span><span class="number">-15</span>位的为英文大小写或者数字组成的字符串</div><div class="line"></div><div class="line">[\u4E00-\u9FA5]</div><div class="line">含义:匹配中文</div><div class="line"></div><div class="line">\d&#123;<span class="number">6</span>&#125;</div><div class="line">含义:<span class="number">6</span>位数字</div></pre></td></tr></table></figure></p>
<h3 id="资料网站"><a href="#资料网站" class="headerlink" title="资料网站"></a>资料网站</h3><p><a href="http://regexr.com" target="_blank" rel="external">在线表达式网站</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebView截图的一种思路]]></title>
      <url>https://jiangdaohong.github.io./2017/02/13/WebView%E6%88%AA%E5%9B%BE%E7%9A%84%E4%B8%80%E7%A7%8D%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<p>网页完整截图的方法<br><a id="more"></a></p>
<p>那天想起来一个APP分享的时候生成一张长图,想试一下,开始想的很简单:在webview加载完成的delegate里面,获取scroll view的layer,然后根据图形上下文获取image,保存相册即可.然而,失败了╮(╯▽╰)╭</p>
<h3 id="第一种方法-更改scroll-view的frame再截图"><a href="#第一种方法-更改scroll-view的frame再截图" class="headerlink" title="第一种方法:更改scroll view的frame再截图"></a>第一种方法:更改scroll view的frame再截图</h3><p>上面之所以无法截图,是因为scroll view的layer的实际需要截图的layer不是同一个东西,还没有加载出来的页面并没有显示在layer上?所以,只要改变scroll view的frame,使content size和frame的size一样就好了.核心代码:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIImage</span> *)captureScrollView:(<span class="built_in">UIScrollView</span> *)scrollView&#123;</div><div class="line">    <span class="built_in">UIImage</span>* image = <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(scrollView.contentSize, <span class="literal">NO</span>, [<span class="built_in">UIScreen</span> mainScreen].scale);</div><div class="line">    <span class="built_in">CGPoint</span> originalContentOffset = scrollView.contentOffset;</div><div class="line">    <span class="built_in">CGRect</span> originalFrame = scrollView.frame;</div><div class="line">    scrollView.contentOffset = <span class="built_in">CGPointZero</span>;</div><div class="line">    scrollView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, scrollView.contentSize.width, scrollView.contentSize.height);    </div><div class="line">    </div><div class="line">    [scrollView.layer renderInContext: <span class="built_in">UIGraphicsGetCurrentContext</span>()];</div><div class="line">    image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();   </div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">        </div><div class="line">    scrollView.contentOffset = originalContentOffset;</div><div class="line">    scrollView.frame = originalFrame;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> image ? image : <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="KVC获取web-view私有容器变量"><a href="#KVC获取web-view私有容器变量" class="headerlink" title="KVC获取web view私有容器变量"></a>KVC获取web view私有容器变量</h3><p>web view是一个看起来简单,内部复杂的控件,获取一下私有变量列表,会发现有一个<code>_internal</code>私有变量,type是<code>UIWebViewInternal</code>,然后在<code>iOS runtime headers</code>可以看到这个类,点击<a href="https://github.com/search?utf8=✓&amp;q=repo%3Anst%2FiOS-Runtime-Headers+UIWebBrowserView&amp;type=Code&amp;ref=searchresults" target="_blank" rel="external">这里</a>,继续查看这个类的ivar list,<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">name:scroller------type:<span class="string">@"UIScrollView"</span></div><div class="line">name:browserView------type:<span class="string">@"UIWebBrowserView"</span></div><div class="line">name:checkeredPatternView------type:<span class="string">@"UICheckeredPatternView"</span></div><div class="line">name:delegate------type:<span class="string">@"&lt;UIWebViewDelegate&gt;"</span></div><div class="line">name:scalesPageToFit------type:b1</div><div class="line">ame:isLoading------type:b1</div><div class="line">name:hasOverriddenOrientationChangeEventHandling------type:b1</div><div class="line">name:drawsCheckeredPattern------type:b1</div><div class="line">name:webSelectionEnabled------type:b1</div><div class="line">name:drawInWebThread------type:b1</div><div class="line">name:inRotation------type:b1</div><div class="line">name:didRotateEnclosingScrollView------type:b1</div><div class="line">name:request------type:<span class="string">@"NSURLRequest"</span></div><div class="line">name:clickedAlertButtonIndex------type:q</div><div class="line">name:webViewDelegate------type:<span class="string">@"UIWebViewWebViewDelegate"</span></div><div class="line">name:pdfHandler------type:<span class="string">@"UIWebPDFViewHandler"</span></div></pre></td></tr></table></figure></p>
<p>好了,通过Xcode可以看到,进行web view内容显示的就是<code>UIWebBrowserView</code>这个类,接下来就好办了,直接上代码:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web view loading success</span></div><div class="line"><span class="built_in">UIView</span> *browser = [webView valueForKeyPath:<span class="string">@"_internal.browserView"</span>];</div><div class="line">   <span class="built_in">UIImage</span>* image = <span class="literal">nil</span>;</div><div class="line">   <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(browser.layer.frame.size, <span class="literal">NO</span>, [<span class="built_in">UIScreen</span> mainScreen].scale);</div><div class="line">   [browser.layer renderInContext: <span class="built_in">UIGraphicsGetCurrentContext</span>()];</div><div class="line">   image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">   <span class="built_in">UIGraphicsEndImageContext</span>();</div></pre></td></tr></table></figure></p>
<p>KVC大法好!QAQ~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS端加载PDF文件实践]]></title>
      <url>https://jiangdaohong.github.io./2017/02/07/iOS%E7%AB%AF%E5%8A%A0%E8%BD%BDPDF%E6%96%87%E4%BB%B6%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>最近项目中需要加载PDF文件,遇到一些小问题,记录一下.<br><a id="more"></a></p>
<h3 id="常见加载PDF的方式"><a href="#常见加载PDF的方式" class="headerlink" title="常见加载PDF的方式"></a>常见加载PDF的方式</h3><p>   iOS上面加载PDF一般分为两种方式,一种是使用web view,加载本地PDF文件或者网络PDF数据;另一种就是将PDF文件重新绘制,使用自定义view进行显示.两种方式各有优劣:第一种方式简单,粗暴,没有编辑的时候使用这种方式进行简单PDF浏览,能达到比较好的效果,缺点是不能进行编辑,显示的信息比较简略,而且web view本身是有内存问题的;自定义view的灵活性比较大,一般的阅读软件都是使用这种方式,可以分页显示,进行编辑等操作,缺点是与第一种方式相比下,需要写较多的代码以及考虑性能优化的问题.</p>
<h3 id="使用简单示例"><a href="#使用简单示例" class="headerlink" title="使用简单示例"></a>使用简单示例</h3><ol>
<li><p>第一种方式示例代码:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURL</span> *url = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"demo"</span> withExtension:<span class="string">@"pdf"</span>];</div><div class="line"><span class="built_in">NSURLRequest</span> *request = [[<span class="built_in">NSURLRequest</span> alloc] initWithURL:url];</div><div class="line">    [webView loadRequest:request];</div></pre></td></tr></table></figure>
<p>由于有的PDF是有编码的,默认使用的是<code>UTF-8</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSData</span> * data = [<span class="built_in">NSData</span> dataWithContentsOfFile:url];</div><div class="line">[webView loadData:data MIMEType:<span class="string">@"application/pdf"</span> textEncodingName:<span class="string">@"UTF-8"</span> baseURL:url];</div></pre></td></tr></table></figure>
</li>
<li><p>第二种方式示例代码:<br>这里有一篇<a href="http://blog.csdn.net/yiyaaixuexi/article/details/7645725" target="_blank" rel="external">博客</a>,<a href="https://github.com/ShadowLJia/PDFReader" target="_blank" rel="external">示例代码</a><br> <a href="http://blog.csdn.net/yiyaaixuexi/article/details/8209188" target="_blank" rel="external">创建PDF密码</a><br> <a href="http://blog.csdn.net/yiyaaixuexi/article/details/8035014" target="_blank" rel="external">PDF横竖屏切换</a><br>感谢念茜大神的博客.<br>简单来说,就是首先拿到文件,转为data,然后通过系统函数转为<code>CGContextRef</code>对象,然后<code>CGPDFDocumentGetNumberOfPages()</code>可以获取到PDF的页数,然后通过页数,<code>CG_EXTERN CGPDFPageRef __nullable CGPDFDocumentGetPage(
 CGPDFDocumentRef __nullable document, size_t pageNumber)
 CG_AVAILABLE_STARTING(__MAC_10_3, __IPHONE_2_0)</code>可以获取到指定页的PDF,然后进行PDF绘制就好了.<br>自定义view核心代码:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</div><div class="line">	<span class="comment">// 坐标系转换</span></div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0.0</span>, <span class="keyword">self</span>.bounds.size.height);</div><div class="line">	<span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div><div class="line">	<span class="keyword">long</span> pageSum = <span class="built_in">CGPDFDocumentGetNumberOfPages</span>(pdfDocument);</div><div class="line">	pageNO = pageNO == <span class="number">0</span> ? <span class="number">1</span> : pageNo;</div><div class="line">	<span class="built_in">CGPDFPageRef</span> page = <span class="built_in">CGPDFDocumentGetPage</span>(pdfDocument, pageNO);</div><div class="line">	<span class="built_in">CGContextSaveGState</span>(context);</div><div class="line">	<span class="built_in">CGAffineTransform</span> pdfTransform = <span class="built_in">CGPDFPageGetDrawingTransform</span>(page, kCGPDFCropBox, <span class="keyword">self</span>.bounds, <span class="number">0</span>, <span class="literal">true</span>);</div><div class="line">	<span class="built_in">CGContextConcatCTM</span>(context, pdfTransform);</div><div class="line">	<span class="built_in">CGContextDrawPDFPage</span>(context, page);</div><div class="line">	<span class="built_in">CGContextRestoreGState</span>(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="第二种方式的新问题"><a href="#第二种方式的新问题" class="headerlink" title="第二种方式的新问题"></a>第二种方式的新问题</h3><p>上面就是两种常见PDF的显示方式,但是第二种如果这么处理,会带来一个问题,就是如果进行放大处理,PDF会很模糊,看了一下<code>多看</code>的PDF显示,明显不是使用的第一种方式,但是放大之后依然很清晰,怎么处理的呢?答案是使用<code>CATiledLayer</code>替换自定义view的layer.<br>移动设备的图片处理能力终究是有限的,如果需要显示一张分辨率非常高的图片,直接用image view加载可能会爆内存,并且通常一张巨大的图片,比如地图,我们经常查看的是一部分而不是整体,为了高效绘图,苹果提供了<code>CATiledLayer</code>类,这个类可以很好地解决我们的问题.详细请参考苹果官方文档或者<ios核心动画高级技巧>的专用图层CATiledLayer章节.<br>示例代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+ (Class)layerClass &#123;</div><div class="line">    return [DHCATiledLayer class];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//初始化方法</div><div class="line">- (id)initWithFrame:(CGRect)frame &#123;</div><div class="line">	self = [super initWithFrame:frame];</div><div class="line">	DHCATiledLayer* layer = (DHCATiledLayer *)[self layer];</div><div class="line">	layer.levelsOfDetail = 10;</div><div class="line">	layer.levelsOfDetailBias = 10;</div><div class="line">	layer.tileSize = CGSizeMake(4086.0, 4086.0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></ios核心动画高级技巧></p>
<p>这个类有隐式动画,集成并重写方法,动画时长为0即可:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+(<span class="built_in">CFTimeInterval</span>)fadeDuration &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://adad184.com/2015/11/10/disable-uicollectionview-implicit-animation/" target="_blank" rel="external">这篇博客</a>里面写了如何去除UIView动画以及layer动画.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常见逻辑运算及算法]]></title>
      <url>https://jiangdaohong.github.io./2016/12/20/%E5%B8%B8%E8%A7%81%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%8F%8A%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  &amp; 按位与 如果两个相应的二进制位都为1，则该位的结果值为1，否则为0</div><div class="line"> *  | 按位或 两个相应的二进制位中只要有一个为1，该位的结果值为1</div><div class="line"> *  ^ 按位异或 若参加运算的两个二进制位值相同则为0，否则为1</div><div class="line"> *  ~ 取反 ~是一元运算符，用来对一个二进制数按位取反，即将0变1，将1变0</div><div class="line"> *  &lt;&lt; 左移用来将一个数的各二进制位全部左移N位，右补0</div><div class="line"> *  &gt;&gt; 右移将一个数的各二进制位右移N位，移到右端的低位被舍弃，对于无符号数，高位补0</div><div class="line"> */</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 有数组内只有一个数字出现1次,其余数据均出现3次</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ones = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> twos = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        ones = (~twos) &amp; (ones ^ A[i]);</div><div class="line">        twos = (~ones) &amp; (twos ^ A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ones;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常见layer]]></title>
      <url>https://jiangdaohong.github.io./2016/12/20/%E5%B8%B8%E8%A7%81layer/</url>
      <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 图形</span></div><div class="line"> <span class="keyword">self</span>.shapeLayer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    <span class="keyword">self</span>.shapeLayer.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>);</div><div class="line">    <span class="keyword">self</span>.shapeLayer.backgroundColor = [<span class="built_in">UIColor</span> redColor].CGColor;</div><div class="line">    <span class="comment">//内部填充颜色</span></div><div class="line">    <span class="keyword">self</span>.shapeLayer.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">    <span class="comment">//线条颜色</span></div><div class="line">    <span class="keyword">self</span>.shapeLayer.strokeColor = [<span class="built_in">UIColor</span> orangeColor].CGColor;</div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(strokeEnd))];</div><div class="line">    animation.fromValue = @<span class="number">0</span>;</div><div class="line">    animation.toValue = @<span class="number">1</span>;</div><div class="line">    animation.duration = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>) radius:<span class="number">50</span> startAngle:<span class="number">0</span> endAngle:M_PI * <span class="number">2</span> clockwise:<span class="literal">YES</span>];</div><div class="line">    </div><div class="line">    path.lineWidth = <span class="number">5</span>;</div><div class="line">    path.lineJoinStyle = kCGLineJoinRound;</div><div class="line">    path.lineCapStyle = kCGLineCapRound;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">60</span>, <span class="number">100</span>)];</div><div class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">80</span>, <span class="number">125</span>)];</div><div class="line">    [path addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">135</span>, <span class="number">80</span>)];</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.shapeLayer.path = path.CGPath;</div><div class="line">    [<span class="keyword">self</span>.shapeLayer addAnimation:animation forKey:<span class="literal">nil</span>];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.view.layer addSublayer:<span class="keyword">self</span>.shapeLayer];</div><div class="line">    </div><div class="line">    <span class="comment">// 重复视图</span></div><div class="line">    <span class="keyword">self</span>.replicatorLayer = [<span class="built_in">CAReplicatorLayer</span> layer];</div><div class="line">    <span class="keyword">self</span>.replicatorLayer.backgroundColor = [<span class="built_in">UIColor</span> greenColor].CGColor;</div><div class="line">    <span class="keyword">self</span>.replicatorLayer.frame = <span class="built_in">CGRectMake</span>(<span class="number">150</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    <span class="keyword">self</span>.replicatorLayer.instanceCount = <span class="number">8</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">CATransform3D</span> transform = <span class="built_in">CATransform3DIdentity</span>;</div><div class="line">    transform = <span class="built_in">CATransform3DTranslate</span>(transform, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>);</div><div class="line">    transform = <span class="built_in">CATransform3DRotate</span>(transform, M_PI / <span class="number">5.0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    transform = <span class="built_in">CATransform3DTranslate</span>(transform, <span class="number">0</span>, <span class="number">-200</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">self</span>.replicatorLayer.instanceTransform = transform;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.replicatorLayer.instanceBlueOffset = <span class="number">-0.1</span>;</div><div class="line">    <span class="keyword">self</span>.replicatorLayer.instanceGreenOffset = <span class="number">-0.1</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">CALayer</span> *layer = [<span class="built_in">CALayer</span> layer];</div><div class="line">    layer.frame = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">100.0</span>f, <span class="number">100.0</span>f);</div><div class="line">    layer.backgroundColor = [<span class="built_in">UIColor</span> whiteColor].CGColor;</div><div class="line">    [<span class="keyword">self</span>.replicatorLayer addSublayer:layer];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.testView.layer addSublayer:<span class="keyword">self</span>.replicatorLayer];</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 支付完成之后对勾动画</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SuccessView</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">UIView</span> *_logoView;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame]) &#123;</div><div class="line">        [<span class="keyword">self</span> drawSuccessLine];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)drawSuccessLine&#123;</div><div class="line">    </div><div class="line">    [_logoView removeFromSuperview];</div><div class="line">    _logoView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="keyword">self</span>.frame];</div><div class="line">    <span class="comment">//曲线建立开始点和结束点</span></div><div class="line">    <span class="comment">//1. 曲线的中心</span></div><div class="line">    <span class="comment">//2. 曲线半径</span></div><div class="line">    <span class="comment">//3. 开始角度</span></div><div class="line">    <span class="comment">//4. 结束角度</span></div><div class="line">    <span class="comment">//5. 顺/逆时针方向</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.center.x, <span class="keyword">self</span>.center.y) radius:<span class="keyword">self</span>.frame.size.width/<span class="number">2.0</span> startAngle:<span class="number">0</span> endAngle:M_PI*<span class="number">2</span> clockwise:<span class="literal">YES</span>];</div><div class="line">    <span class="comment">//对拐角和中点处理</span></div><div class="line">    path.lineCapStyle  = kCGLineCapRound;</div><div class="line">    path.lineJoinStyle = kCGLineCapRound;</div><div class="line">    </div><div class="line">    <span class="comment">//对号第一部分直线的起始</span></div><div class="line">    [path moveToPoint:<span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.frame.size.width/<span class="number">5</span>, <span class="keyword">self</span>.frame.size.width/<span class="number">2</span>)];</div><div class="line">    <span class="built_in">CGPoint</span> p1 = <span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.frame.size.width/<span class="number">5.0</span>*<span class="number">2</span>, <span class="keyword">self</span>.frame.size.width/<span class="number">4.0</span>*<span class="number">3</span>);</div><div class="line">    [path addLineToPoint:p1];</div><div class="line">    </div><div class="line">    <span class="comment">//对号第二部分起始</span></div><div class="line">    <span class="built_in">CGPoint</span> p2 = <span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.frame.size.width/<span class="number">8.0</span>*<span class="number">7</span>, <span class="keyword">self</span>.frame.size.width/<span class="number">4.0</span>+<span class="number">8</span>);</div><div class="line">    [path addLineToPoint:p2];</div><div class="line">    </div><div class="line">    <span class="built_in">CAShapeLayer</span> *layer = [[<span class="built_in">CAShapeLayer</span> alloc] init];</div><div class="line">    <span class="comment">//内部填充颜色</span></div><div class="line">    layer.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">    <span class="comment">//线条颜色</span></div><div class="line">    layer.strokeColor = [<span class="built_in">UIColor</span> orangeColor].CGColor;</div><div class="line">    <span class="comment">//线条宽度</span></div><div class="line">    layer.lineWidth = <span class="number">5</span>;</div><div class="line">    layer.path = path.CGPath;</div><div class="line">    <span class="comment">//动画设置</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(strokeEnd))];</div><div class="line">    animation.fromValue = @<span class="number">0</span>;</div><div class="line">    animation.toValue = @<span class="number">1</span>;</div><div class="line">    animation.duration = <span class="number">2</span>;</div><div class="line">    [layer addAnimation:animation forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(strokeEnd))];</div><div class="line">    </div><div class="line">    [_logoView.layer addSublayer:layer];</div><div class="line">    [<span class="keyword">self</span> addSubview:_logoView];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 雷达动画</span></div><div class="line"><span class="keyword">self</span>.shapeLayer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    <span class="keyword">self</span>.shapeLayer.frame = <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CABasicAnimation</span> *anim1 = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>) cornerRadius:<span class="number">50</span>];</div><div class="line">    <span class="keyword">self</span>.shapeLayer.path = path.CGPath;</div><div class="line">    <span class="keyword">self</span>.shapeLayer.fillColor = [<span class="built_in">UIColor</span> redColor].CGColor;</div><div class="line">    anim1.keyPath = <span class="string">@"transform.scale"</span>;</div><div class="line">    anim1.fromValue = @<span class="number">0</span>;</div><div class="line">    anim1.toValue = @<span class="number">1</span>;</div><div class="line">    anim1.duration = <span class="number">2</span>;</div><div class="line">    anim1.repeatCount = MAXFLOAT;</div><div class="line">    </div><div class="line">    <span class="built_in">CABasicAnimation</span> *anim2 = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</div><div class="line">    anim2.fromValue = @<span class="number">0.9</span>;</div><div class="line">    anim2.toValue = @<span class="number">0.1</span>;</div><div class="line">    anim2.duration = <span class="number">2</span>;</div><div class="line">    anim2.repeatCount = MAXFLOAT;</div><div class="line">    </div><div class="line">    <span class="built_in">CAAnimationGroup</span> *group = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">    group.animations = @[anim1, anim2];</div><div class="line">    group.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">    group.fillMode = kCAFillModeForwards;</div><div class="line">    group.duration = <span class="number">2</span>;</div><div class="line">    group.repeatCount = FLT_MAX;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.shapeLayer addAnimation:group forKey:<span class="literal">nil</span>];</div><div class="line">    [<span class="keyword">self</span>.testView.layer addSublayer:<span class="keyword">self</span>.shapeLayer];</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo命名备忘]]></title>
      <url>https://jiangdaohong.github.io./2016/12/20/hexo%E5%91%BD%E5%90%8D%E5%A4%87%E5%BF%98/</url>
      <content type="html"><![CDATA[<p>这是笔记<br><a id="more"></a></p>
<p>新建草稿<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new draft &quot;new draft&quot;</div></pre></td></tr></table></figure></p>
<p>预览草稿,修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">render_drafts: true</div></pre></td></tr></table></figure></p>
<p>或者以下方式启动server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server --drafts</div></pre></td></tr></table></figure></p>
<p>把草稿变成文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为peek view添加显示标题]]></title>
      <url>https://jiangdaohong.github.io./2016/12/11/%E4%B8%BApeek-view%E6%B7%BB%E5%8A%A0%E6%98%BE%E7%A4%BA%E6%A0%87%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>看到一些APP peek操作的时候会显示标题,模仿一下喽.<br><a id="more"></a></p>
<p>在玩APP的时候发现一些APP的peek出来的页面不太一样,显示的是有标题的,比如知乎首页和微博评论的按钮peek操作:</p>
<p><div align="center"><br><img src="http://ww2.sinaimg.cn/large/006tNc79gw1fan1wxdu44j305k027jr7.jpg" alt="weibo_peek"><br><img src="http://ww2.sinaimg.cn/large/006tNc79gw1fan1xn1ka9j305k025t8k.jpg" alt="weibo_pop"><br><img src="http://ww1.sinaimg.cn/large/006tNc79gw1fan1zf8f1aj305k01wjr6.jpg" alt="zhihu_peek"><br><img src="http://ww4.sinaimg.cn/large/006tNc79gw1fan1zufo7fj305k01yjr7.jpg" alt="weibo_pop"></div></p>
<p><div><br>简单分析一下:微博应该是用了navigation controller,而知乎则在pop的页面多了一个top视图,当peek的时候,可以看到多了一个标题的视图,真是简单粗暴.<br>实现一个微博的效果,简单Swift写一下:<br>peek页面</div></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">internal</span> <span class="keyword">let</span> tableView = <span class="type">UITableView</span>(frame: <span class="type">UIScreen</span>.mainScreen().bounds, style: <span class="type">UITableViewStyle</span>.<span class="type">Plain</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        view.backgroundColor = <span class="type">UIColor</span>.greenColor()</div><div class="line">        tableView.delegate = <span class="keyword">self</span>;</div><div class="line">        tableView.dataSource = <span class="keyword">self</span>;</div><div class="line">        tableView.tableFooterView = <span class="type">UIView</span>()</div><div class="line">        view .addSubview(tableView)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span> : <span class="title">UITableViewDelegate</span>,<span class="title">UITableViewDataSource</span>,<span class="title">UIViewControllerPreviewingDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">var</span> tableViewCell = tableView.dequeueReusableCellWithIdentifier(<span class="string">"tableviewcell"</span>)</div><div class="line">        <span class="keyword">if</span> tableViewCell == <span class="literal">nil</span> &#123;</div><div class="line">            tableViewCell = <span class="type">UITableViewCell</span>(style: <span class="type">UITableViewCellStyle</span>.<span class="type">Default</span>, reuseIdentifier: <span class="string">"tableviewcell"</span>)</div><div class="line">            tableViewCell?.textLabel?.text = (<span class="string">"第"</span> + <span class="string">"\(indexPath.row)"</span> + <span class="string">"行"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> traitCollection.forceTouchCapability == <span class="type">UIForceTouchCapability</span>.<span class="type">Available</span> &#123;</div><div class="line">            registerForPreviewingWithDelegate(<span class="keyword">self</span>, sourceView: tableViewCell!)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> tableViewCell!</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/// UIViewControllerPreviewingDelegate</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</div><div class="line">        navigationController?.pushViewController(<span class="type">DetailViewController</span>(), animated: <span class="literal">true</span>)</div><div class="line">        tableView.deselectRowAtIndexPath(indexPath, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, viewControllerForLocation location: CGPoint)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">    <span class="comment">/// 预览的应该包装一个UINavigationController,才会有title</span></div><div class="line">        <span class="keyword">let</span> navc = <span class="type">UINavigationController</span>()</div><div class="line">        navc.addChildViewController(<span class="type">DetailViewController</span>())</div><div class="line">        <span class="keyword">return</span> navc;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, commitViewController viewControllerToCommit: UIViewController)</span></span> &#123;</div><div class="line">    <span class="comment">/// pop的页面是UINavigationController的第一个子控制器</span></div><div class="line">        showViewController(viewControllerToCommit.childViewControllers[<span class="number">0</span>], sender: <span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>pop的页面:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">        view.backgroundColor = <span class="type">UIColor</span>.cyanColor()</div><div class="line">        title = <span class="string">"评论"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就可以了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[APP本地化笔记]]></title>
      <url>https://jiangdaohong.github.io./2016/12/10/APP%E5%9B%BD%E9%99%85%E5%8C%96%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>最近项目需要做本地化,简单记录一下,这里的APP本地化特指iOS客户端的本地化.<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着移动互联网的发展,很多APP借着苹果的平台渐渐走向国际,甚至有些国内的公司面向的就是国外用户,我们现在做的产品就有这方面的需求,所以抽时间做了一下APP本地化.<br>一般来说,APP本地化主要是一些文字和图片,plist资源的本地化.文字一般就是UI控件上展示的文本,控件可能是纯代码创建的,也可能是xib或者storyboard上的控件;而图片则需要准备不同的资源文件.<br>下面介绍一下常用的本地化方法:</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>以普通的工程为例:</p>
<ol>
<li>新建工程,Info.plist中添加<code>Application has localized display name</code>,bool值为<code>YES</code>,<code>CFBundleDisplayName</code>和<code>CFBundleName</code>都设置为<code>$(PROJECT_NAME)</code>;</li>
<li>选择PROJECT-&gt;Info-&gt;Localizations,点击<code>+</code>,选择需要本地化的语言,我们选择Chinese(Simplified),然后弹出需要本地化的资源文件,需要的打钩,点击确定;</li>
<li>新建文件.选择iOS-&gt;Resource-&gt;String File,这里命名为Localizations.string;</li>
<li>选择新建的.string文件,右边属性栏有Localization,点击,弹出需要本地化的语言,随便选择一个,然后把需要本地化的语言都勾选上,点击文件,可以看到生成了不同语言的.string文件;</li>
<li>重复步骤3和步骤4,命名必须为<code>InfoPlist.strings</code>.</li>
<li>打开项目目录,把生成的本地化文件夹拖到项目中.</li>
</ol>
<h3 id="应用名称本地化"><a href="#应用名称本地化" class="headerlink" title="应用名称本地化"></a>应用名称本地化</h3><p>选择InfoPlist.strings,将需要显示的名称写到对应的文件里面即可:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 中文文件</span></div><div class="line"><span class="built_in">CFBundleDisplayName</span> = <span class="string">"中文名字"</span>;</div><div class="line"><span class="comment">// 英文文件</span></div><div class="line"><span class="built_in">CFBundleDisplayName</span> = <span class="string">"English name"</span>;</div></pre></td></tr></table></figure></p>
<h3 id="文本本地化"><a href="#文本本地化" class="headerlink" title="文本本地化"></a>文本本地化</h3><p>以登陆按钮显示的标题为例,需要借助一个本地化方法才可以实现,首先在Localizations.string文件中分别写上对应的key-value:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 中文文件</span></div><div class="line"><span class="string">"Login"</span> = <span class="string">"登陆"</span>;</div><div class="line"><span class="comment">// 英文文件</span></div><div class="line"><span class="string">"Login"</span> = <span class="string">"Login"</span>;</div></pre></td></tr></table></figure></p>
<p>调用的地方<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 前面是key,后面是注释,可为nil</span></div><div class="line"><span class="built_in">NSString</span> *loginString = <span class="built_in">NSLocalizedString</span>(<span class="string">@"Login"</span>, <span class="string">@"login button title"</span>);</div><div class="line">[loginButton setTitle:loginString forState:<span class="built_in">UIControlStateNormal</span>];</div></pre></td></tr></table></figure></p>
<h3 id="图片资源和xib-plist资源的本地化"><a href="#图片资源和xib-plist资源的本地化" class="headerlink" title="图片资源和xib,plist资源的本地化"></a>图片资源和xib,plist资源的本地化</h3><p>图片本地化很简单,选中图片资源,点击属性栏的Localization选项,会自动把图片放到对应的语言文件夹下面,调用无需更改.<br>plist以及xib本地化方式和图片本地化方式大同小异.</p>
<h3 id="简化调用"><a href="#简化调用" class="headerlink" title="简化调用"></a>简化调用</h3><p>如果一开始没有做本地化的准备,但是突然要加入这项feature,这就需要快速完成,但是项目中的控件太多了怎么办?</p>
<ol>
<li>简单做法,修改继承,如替换UILabel为自定义Label,重写<code>setText:</code>,然后调用<code>NSLocalizedString(key,comment)</code>,这么做代价很大;</li>
<li><p>查看NSLocalizedString的实现:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLocalizedString(key, comment) \</span></div><div class="line">	    </div><div class="line">	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@<span class="string">""</span> table:nil]</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLocalizedStringFromTable(key, tbl, comment) \</span></div><div class="line">	    </div><div class="line">	    [[NSBundle mainBundle] localizedStringForKey:(key) value:@<span class="string">""</span> table:(tbl)]</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \</span></div><div class="line">	    </div><div class="line">	    [bundle localizedStringForKey:(key) value:@<span class="string">""</span> table:(tbl)]</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \</span></div><div class="line">	    </div><div class="line">	    [bundle localizedStringForKey:(key) value:(val) table:(tbl)]</div></pre></td></tr></table></figure>
<p>为了方便调用添加个宏定义:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">undef</span> L</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> L(key) \</span></div><div class="line">	</div><div class="line">	[[NSBundle mainBundle] localizedStringForKey:(key) value:@<span class="string">""</span> table:nil]</div></pre></td></tr></table></figure>
<p>然后一个一个替换/(ㄒoㄒ)/~~</p>
</li>
<li><p>替换完之后,用命令自动生成strings文件</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打开终端,定位到需要生成stings的文件,比如为LoginViewController.m,要生成DHLocalizations.strings</span></div><div class="line"><span class="comment">// 字符串调用的地方</span></div><div class="line"><span class="built_in">NSString</span> *loginString = <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Login"</span>,<span class="string">@"DHLocalizations"</span>, <span class="string">@"login button title"</span>);</div><div class="line">[loginButton setTitle:loginString forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line"><span class="comment">// 执行如下命令</span></div><div class="line">genstrings LoginViewController.m</div><div class="line"><span class="comment">// 查看文件夹,看到已经生成了DHLocalizations.strings文件</span></div></pre></td></tr></table></figure>
</li>
<li><p>批量生成命令<br>上个命令虽然能自动生成本地方资源文件,但是一次只能生成一个文件里面的本地化字符串,借助下面的命令可以进行批量生成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 进入终端,使用命令生成文件夹</div><div class="line">mkdir en.lpro</div><div class="line">// 遍历文件夹下.m文件,并执行genstrings命令</div><div class="line">find ./ -name *.m -print0 | xargs -0 genstrings -o en.lproj</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>感谢一下开发者的教程,放上教程链接<br><a href="https://my.oschina.net/u/1049180/blog/215695" target="_blank" rel="external">https://my.oschina.net/u/1049180/blog/215695</a><br>// 下面这篇文章讲述的很详细,图文并茂<br><a href="http://blog.csdn.net/q199109106q/article/details/8564615" target="_blank" rel="external">http://blog.csdn.net/q199109106q/article/details/8564615</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义转场动画]]></title>
      <url>https://jiangdaohong.github.io./2016/11/28/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>好久不用的东西,复习一下,先写一下转场动画吧O(∩_∩)O<br><a id="more"></a></p>
<p>直接开始,这篇博客分三部分,第一部分记述自定义modal动画,第二部记述自定义push动画,第三部分记一下常见动画的实现.</p>
<h3 id="modal动画"><a href="#modal动画" class="headerlink" title="modal动画"></a>modal动画</h3><p>下面简要写一下以modal的形式实现系统的push动画<br>主要步骤:</p>
<ol>
<li>新建两个view controller,记做FromVC,ToVC;</li>
<li>在FromVC中,实现<code>presentViewController:animated:completion</code>,ToVC对象设置<code>toVC.transitioningDelegate = self;</code>,fromVC遵守协议<code>UIViewControllerTransitioningDelegate</code>;</li>
<li><p>看一下<code>UIViewControllerTransitioningDelegate</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Asks your delegate for the transition animator object to use when presenting a view controller.</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented presentingController:(<span class="built_in">UIViewController</span> *)presenting sourceController:(<span class="built_in">UIViewController</span> *)source;</div><div class="line"><span class="comment">// Asks your delegate for the transition animator object to use when dismissing a view controller.</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class="built_in">UIViewController</span> *)dismissed;</div><div class="line"><span class="comment">// Asks your delegate for the interactive animator object to use when presenting a view controller.</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForPresentation:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator;</div><div class="line"><span class="comment">// Asks your delegate for the interactive animator object to use when dismissing a view controller.</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForDismissal:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator;</div><div class="line"><span class="comment">// Asks your delegate for the custom presentation controller to use for managing the view hierarchy when presenting a view controller.</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIPresentationController</span> *)presentationControllerForPresentedViewController:(<span class="built_in">UIViewController</span> *)presented presentingViewController:(<span class="built_in">UIViewController</span> *)presenting sourceViewController:(<span class="built_in">UIViewController</span> *)source <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">8</span>_0);</div></pre></td></tr></table></figure>
<p>通过文档可以看到,<code>UIViewControllerTransitioningDelegate</code>主要要实现前两个方法来获取present和dismiss的动画对象;</p>
</li>
<li><p>而动画对象需要遵守<code>UIViewControllerAnimatedTransitioning</code>协议,看一下这个协议需要实现的方法:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This is used for percent driven interactive transitions, as well as for container controllers that have companion animations that might need to</span></div><div class="line"><span class="comment">// synchronize with the main animation. </span></div><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext;</div><div class="line"><span class="comment">// This method can only  be a nop if the transition is interactive and not a percentDriven interactive transition.</span></div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext;</div></pre></td></tr></table></figure>
<p>第一个方法返回的是动画执行的时间,第二个方法则是用于处理动画效果;</p>
</li>
<li><p>首先实现present动画,新建一个<code>DHPresentAnimation</code>类,继承自<code>NSObject</code>,并且实现<code>UIViewControllerAnimatedTransitioning</code>中的两个方法,代码如下:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 动画执行的时间</span></div><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContex</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 自定义动画</span></div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 获取目标VC</span></div><div class="line">    <span class="built_in">UIViewController</span> *toVC = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextToViewControllerKey</span>];</div><div class="line">    <span class="comment">// 获取最终要显示的VC的frame</span></div><div class="line">    <span class="built_in">CGRect</span> finalRect = [transitionContext finalFrameForViewController:toVC];</div><div class="line">    <span class="comment">// 设置目标VC的默认位置,这里定位在屏幕左侧</span></div><div class="line">    toVC.view.frame = <span class="built_in">CGRectOffset</span>(finalRect, -[[<span class="built_in">UIScreen</span> mainScreen]bounds].size.width, <span class="number">0</span>);</div><div class="line">    <span class="comment">// 获取containerView,并将目标VC的view设置为它的子视图</span></div><div class="line">    [[transitionContext containerView] addSubview:toVC.view];</div><div class="line">    <span class="comment">// 简单UIView动画,使toVC的view变换到最终要显示的位置和大小</span></div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:[<span class="keyword">self</span> transitionDuration:transitionContext] animations:^&#123;</div><div class="line">        toVC.view.frame = finalRect;</div><div class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">    <span class="comment">// 明确告诉上下文,结束动画</span></div><div class="line">        [transitionContext completeTransition:<span class="literal">YES</span>];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在<code>FromVC</code>中,实现<code>UIViewControllerTransitioningDelegate</code>协议方法</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented presentingController:(<span class="built_in">UIViewController</span> *)presenting sourceController:(<span class="built_in">UIViewController</span> *)source &#123;</div><div class="line"><span class="comment">// 返回present自定义动画对象</span></div><div class="line">    <span class="keyword">return</span> [[DHPresentAnimation alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>同理,实现dismiss动画,实现<code>FromVC</code>遵循协议中的另一个方法:<br> dismiss动画</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UIViewController</span> *fromVC = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextFromViewControllerKey</span>];</div><div class="line">    <span class="built_in">UIViewController</span> *toVC = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextToViewControllerKey</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">CGRect</span> initRect  = [transitionContext initialFrameForViewController:fromVC];</div><div class="line">    <span class="built_in">CGRect</span> finalRect = <span class="built_in">CGRectOffset</span>(initRect, -[[<span class="built_in">UIScreen</span> mainScreen]bounds].size.width, <span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *containerView = [transitionContext containerView];</div><div class="line">    [containerView addSubview:toVC.view];</div><div class="line">    [containerView sendSubviewToBack:toVC.view];</div><div class="line">    </div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:[<span class="keyword">self</span> transitionDuration:transitionContext] animations:^&#123;</div><div class="line">        fromVC.view.frame = finalRect;</div><div class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        [transitionContext completeTransition:<span class="literal">YES</span>];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>协议方法:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class="built_in">UIViewController</span> *)dismissed</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [[DHDismissAnimation alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>command + R</code>.</p>
<h3 id="push动画"><a href="#push动画" class="headerlink" title="push动画"></a>push动画</h3><p>待续</p>
<h3 id="常见动画的实现"><a href="#常见动画的实现" class="headerlink" title="常见动画的实现"></a>常见动画的实现</h3><p>待续</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初窥JSPatch]]></title>
      <url>https://jiangdaohong.github.io./2016/11/20/%E5%88%9D%E7%AA%A5JSPatch/</url>
      <content type="html"><![CDATA[<p>Hotfix是解决线上bug的重要手段之一,iOS开发中,如今流行的成熟解决方法之一就是JSPatch,本文主要是对JSPatch应用进行一定的介绍,并未做原理分析.<br><a id="more"></a></p>
<p>谈起hotfix,是个不小的话题,而JSPatch以他灵活,使用方便而且功能强大的特点,使它成为解决线上重大bug的”黑武器”,强大,危险.所以在开头要说明,不用使用JSPatch来修改一些小的错误,只有发生重大bug的时候才使用,原子弹固然威力大,但造成的后果也是影响深远的.一些界面可以采用其他方案替代,提高app的动态性,比如使用web view等方式,这里不做深究.下面开始介绍JSPatch.</p>
<p>JSPatch是微信读书团队的大神<a href="https://github.com/bang590/" target="_blank" rel="external">bang</a>的<a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">开源项目</a>,所以你是可以看到这个项目的核心源码,你可以通过CocoaPods集成到项目中,也可以手动集成,也可以通过SDK的方式集成,<a href="http://www.jspatch.com/Docs/intro" target="_blank" rel="external">这里</a>是JSPatch Platform的集成说明文档,简单来讲,如果你要自己搭建后台,进行修复包的部署等工作,直接使用开源代码即可,这种比较适用于大公司或者业务敏感,个性化定制功能的公司,而对公司来说,作为一般性需求或者只是在个人项目中使用的话,完全可以借助平台,而且平台也提供了付费功能.对于日请求量小于1w的用户是免费的.需要进行灰度测试,在线监控等功能,需要进行付费.</p>
<h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod 'JSPatch'</div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[JSPatch startWithAppKey:<span class="string">@"Your AppKey"</span>];</div><div class="line"><span class="comment">// 可以多次调用用来同步服务器状态</span></div><div class="line">[JSPatch sync];</div><div class="line"><span class="comment">// 程序启动的时候开启JSEngine</span></div><div class="line">[JPEngine startEngine];</div><div class="line"><span class="comment">// 执行js代码</span></div><div class="line"><span class="comment">// 官方示例</span></div><div class="line"><span class="comment">// 直接调用js</span></div><div class="line">[JPEngine evaluateScript:<span class="string">@"\</span></div><div class="line"> var alertView = require('UIAlertView').alloc().init();\</div><div class="line"> alertView.setTitle('Alert');\</div><div class="line"> alertView.setMessage('AlertView from js'); \</div><div class="line"> alertView.addButtonWithTitle('OK');\</div><div class="line"> alertView.show(); \</div><div class="line">"];</div><div class="line"></div><div class="line"><span class="comment">// 执行网络js代码</span></div><div class="line">[<span class="built_in">NSURLConnection</span> sendAsynchronousRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://cnbang.net/test.js"</span>]] queue:[<span class="built_in">NSOperationQueue</span> mainQueue] completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *connectionError) &#123;</div><div class="line">    <span class="built_in">NSString</span> *script = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">    [JPEngine evaluateScript:script];</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="comment">// 执行本地js代码</span></div><div class="line"><span class="built_in">NSString</span> *sourcePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"sample"</span> ofType:<span class="string">@"js"</span>];</div><div class="line"><span class="built_in">NSString</span> *script = [<span class="built_in">NSString</span> stringWithContentsOfFile:sourcePath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">[JPEngine evaluateScript:script];</div></pre></td></tr></table></figure>
<h3 id="API示例"><a href="#API示例" class="headerlink" title="API示例"></a>API示例</h3><p>调用OC类之前需要调用<code>require(class name)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">requare(`UIView`)</div><div class="line">var view = UIView.alloc().init()</div></pre></td></tr></table></figure></p>
<p>也可使用的时候再进行声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(`UIColor`).redColor()</div></pre></td></tr></table></figure></p>
<p>参数传递<br>和OC用法一样,直接进行传递即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var view = UIView.alloc().init();</div><div class="line">var superView = UIView.alloc().init()</div><div class="line">superView.addSubview(view)</div></pre></td></tr></table></figure></p>
<p>defineClass<br>defineClass(classDeclaration, [properties,] instanceMethods, classMethods)<br>@param classDeclaration: 字符串，类名/父类名和Protocol<br>@param properties: 新增property，字符串数组，可省略<br>@param instanceMethods: 要添加或覆盖的实例方法<br>@param classMethods: 要添加或覆盖的类方法</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// OC</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">JPTestObject</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">&#125;</div><div class="line">	<span class="keyword">@end</span></div><div class="line"><span class="comment">// JS</span></div><div class="line">defineClass(<span class="string">"JPTableViewController"</span>, &#123; tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</div><div class="line">	  ...</div><div class="line">&#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>把JSPatch的Log添加到自己的日志里面<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[JSPatch setLogger:^(<span class="built_in">NSString</span> *msg) &#123;</div><div class="line">    <span class="comment">//msg 是 JSPatch log 字符串，用你自定义的logger打出</span></div><div class="line">    YOUR_APP_LOG(<span class="string">@"%@"</span>, msg);</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>官方修复线上bug示例<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">@implementation</span> <span class="title">XRTableViewController</span></span></div><div class="line"> ⁃ (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</div><div class="line">	&#123;</div><div class="line">	<span class="built_in">NSString</span> *content = <span class="keyword">self</span>.dataSource[[indexPath row]]; <span class="comment">//可能会超出数组范围导致crash</span></div><div class="line">	XRViewController *controller = [[JPViewController alloc] initWithContent:content];</div><div class="line">	[<span class="keyword">self</span>.navigationController pushViewController:controller];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="comment">//main.js</span></div><div class="line">defineClass(<span class="string">"XRTableViewController"</span>, &#123;</div><div class="line">  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</div><div class="line">    var row = indexPath.row()</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.dataSource().length &gt; row) &#123;  <span class="comment">//加上判断越界的逻辑</span></div><div class="line">      var content = <span class="keyword">self</span>.dataArr()[row];</div><div class="line">      var controller = XRViewController.alloc().initWithContent(content);</div><div class="line">      <span class="keyword">self</span>.navigationController().pushViewController(controller);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>脚本删除<br>如果是通过JSPatch Platform,在操作界面进行删除脚本即可;如果是自搭建平台,需要调用<code>JPCleaner</code>的clean方法,进行指定类的或者全部代码进行清除.<br>更多基本用法查阅官方文档:<a href="https://github.com/bang590/JSPatch/wiki/JSPatch-基础用法" target="_blank" rel="external">JSPatch基础用法</a></p>
<h3 id="传输安全问题"><a href="#传输安全问题" class="headerlink" title="传输安全问题"></a>传输安全问题</h3><p>由于JSPatch是通过运行时进行消息分发,因此功能强大, 因此一旦被黑客攻击,下发恶意补丁包,那app基本就会被彻底攻破,因此在使用JSPatch SDK的时候,对js文件进行了<a href="https://en.wikipedia.org/wiki/RSA" target="_blank" rel="external">RSA加密</a><br>主要流程就是对服务端进行js文件的MD5加密,然后使用RSA私钥对MD5进行一次加密,一起下发给客户端;<br>客户端拿到数据之后,RSA公钥进行解密,拿到MD5值,然后自己进行计算下载的js文件的MD5,进行校验,判断是否被修改,进行分情况处理.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.jspatch.com/Docs/intro" target="_blank" rel="external">JSPatch</a>官方文档说明;<br><a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">JSPatch github源代码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发常用UI小技巧]]></title>
      <url>https://jiangdaohong.github.io./2016/10/22/iOS%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8UI%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>整理一下开发中常用的UI小技巧<br><a id="more"></a></p>
<ol>
<li><p>UINavigationBar相关设置</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 去阴影</span></div><div class="line">   [[<span class="built_in">UINavigationBar</span> appearance] setShadowImage:[<span class="built_in">UIImage</span> new]];</div><div class="line">   <span class="comment">// 设置标题</span></div><div class="line">   <span class="built_in">NSMutableDictionary</span> *titleTextAttrs = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">   titleTextAttrs[<span class="built_in">NSForegroundColorAttributeName</span>] = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">   titleTextAttrs[<span class="built_in">NSFontAttributeName</span>] = [<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">18</span>];</div><div class="line">   [[<span class="built_in">UINavigationBar</span> appearance] setTitleTextAttributes:titleTextAttrs];</div><div class="line">   <span class="comment">// 设置渲染色</span></div><div class="line">   [[<span class="built_in">UINavigationBar</span> appearance] setTintColor:[<span class="built_in">UIColor</span> whiteColor]];</div><div class="line">   </div><div class="line">   <span class="comment">// 设置背景图片</span></div><div class="line">   [[<span class="built_in">UINavigationBar</span> appearance] setBackgroundImage:[[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"navc_bg_blue"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>] 	forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>UITabBar相关设置</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 去阴影</span></div><div class="line">[[<span class="built_in">UITabBar</span> appearance] setShadowImage:[<span class="built_in">UIImage</span> new];</div><div class="line"><span class="comment">// 更换系统自带的tabbar</span></div><div class="line">DHTabBar *tabBar = [DHTabBar tabbar];</div><div class="line">   [<span class="keyword">self</span> setValue:tabBar forKeyPath:<span class="string">@"tabBar"</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>UITabBarController<br>选中不同控制器显示不同的statusBar样式</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController.preferredStatusBarStyle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UITabbarController快速添加子控制器</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  添加一个子控制器</div><div class="line"> *</div><div class="line"> *  @param childVC       子控制器</div><div class="line"> *  @param title         标题</div><div class="line"> *  @param image         图片</div><div class="line"> *  @param selectedImage 选中的图片</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)addChildVc:(<span class="built_in">UIViewController</span> *)childVC title:(<span class="built_in">NSString</span> *)title image:(<span class="built_in">NSString</span> *)image selectedImage:(<span class="built_in">NSString</span> *)selectedImage</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 设置子控制器的文字</span></div><div class="line">    childVC.title = title;</div><div class="line">    </div><div class="line">    <span class="comment">// 设置子控制器的图片</span></div><div class="line">    childVC.tabBarItem.image = [[<span class="built_in">UIImage</span> imageNamed:image]imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">    childVC.tabBarItem.selectedImage = [[<span class="built_in">UIImage</span> imageNamed:selectedImage]imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 设置文字的样式</span></div><div class="line">    <span class="built_in">NSMutableDictionary</span> *textAttrs = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    textAttrs[<span class="built_in">NSForegroundColorAttributeName</span>] = [<span class="built_in">UIColor</span> itemColor];</div><div class="line">    <span class="built_in">NSMutableDictionary</span> *selectTextAttrs = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    selectTextAttrs[<span class="built_in">NSForegroundColorAttributeName</span>] = [<span class="built_in">UIColor</span> themeColor];</div><div class="line">    [childVC.tabBarItem setTitleTextAttributes:textAttrs forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    [childVC.tabBarItem setTitleTextAttributes:selectTextAttrs forState:<span class="built_in">UIControlStateSelected</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 添加为子控制器</span></div><div class="line">    [<span class="keyword">self</span> addChildViewController:childVC];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UINavigationController<br> 统一设置返回键样式</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)pushViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">self</span>.viewControllers.count &gt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="comment">// 自动显示和隐藏tabbar</span></div><div class="line">		viewController.hidesBottomBarWhenPushed = <span class="literal">YES</span>;</div><div class="line">		<span class="comment">// 设置左边的返回按钮</span></div><div class="line">		<span class="comment">// UIBarButtonItem category 方法,快速修改图片</span></div><div class="line">        viewController.navigationItem.leftBarButtonItem = [<span class="built_in">UIBarButtonItem</span></div><div class="line">        itemWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(popVC) image:<span class="string">@"wihteback_normal"</span></div><div class="line">        highImage:<span class="string">@"wihteback_hign"</span>];</div><div class="line">	&#125;</div><div class="line">	[<span class="keyword">super</span> pushViewController:viewController animated:animated];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加全屏返回手势</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIPanGestureRecognizer</span> *pan; <span class="comment">/**&lt; 返回手势*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> panGesEnable;           <span class="comment">/**&lt; 是否启用全屏手势*/</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;	</div><div class="line">	[<span class="keyword">super</span> viewDidLoad];</div><div class="line">	<span class="comment">// 获取系统自带滑动手势的target对象</span></div><div class="line">    <span class="keyword">id</span> target = <span class="keyword">self</span>.interactivePopGestureRecognizer.delegate;</div><div class="line">    <span class="comment">// 创建全屏滑动手势，调用系统自带滑动手势的target的action方法</span></div><div class="line">    SEL action = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"handleNavigationTransition:"</span>);</div><div class="line">    <span class="built_in">UIPanGestureRecognizer</span> *pan = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:target action:action];</div><div class="line">    <span class="comment">// 设置手势代理，拦截手势触发</span></div><div class="line">    pan.delegate = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">self</span>.pan = pan;</div><div class="line">    <span class="comment">// 给导航控制器的view添加全屏滑动手势</span></div><div class="line">    [<span class="keyword">self</span>.view addGestureRecognizer:pan];</div><div class="line">    <span class="comment">// 禁止使用系统自带的滑动手势</span></div><div class="line">    <span class="keyword">self</span>.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</div><div class="line">    <span class="comment">// 默认启用</span></div><div class="line">    <span class="keyword">self</span>.panGesEnable = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.panGesEnable) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.childViewControllers.count == <span class="number">1</span> ? <span class="literal">NO</span> : <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UIColor</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用16进制颜色</span></div><div class="line">+ (<span class="built_in">UIColor</span> *)colorWithRGBHex:(<span class="built_in">UInt32</span>)hex</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> r = (hex &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">    <span class="keyword">int</span> g = (hex &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">    <span class="keyword">int</span> b = (hex) &amp; <span class="number">0xFF</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRed:r / <span class="number">255.0</span>f</div><div class="line">                           green:g / <span class="number">255.0</span>f</div><div class="line">                            blue:b / <span class="number">255.0</span>f</div><div class="line">                           alpha:<span class="number">1.0</span>f];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用16进制颜色字符串格式</span></div><div class="line">+ (<span class="built_in">UIColor</span> *)colorWithHexString:(<span class="built_in">NSString</span> *)stringToConvert</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *cString = [[stringToConvert stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> whitespaceAndNewlineCharacterSet]] uppercaseString];</div><div class="line">    </div><div class="line">    <span class="comment">// String should be 6 or 8 characters</span></div><div class="line">    <span class="keyword">if</span> ([cString length] &lt; <span class="number">6</span>) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// strip 0X if it appears</span></div><div class="line">    <span class="keyword">if</span> ([cString hasPrefix:<span class="string">@"0X"</span>])</div><div class="line">        cString = [cString substringFromIndex:<span class="number">2</span>];</div><div class="line">    <span class="keyword">if</span> ([cString hasPrefix:<span class="string">@"#"</span>])</div><div class="line">        cString = [cString substringFromIndex:<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> ([cString length] != <span class="number">6</span>)</div><div class="line">        <span class="keyword">return</span> [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    </div><div class="line">    <span class="built_in">NSScanner</span> *scanner = [<span class="built_in">NSScanner</span> scannerWithString:cString];</div><div class="line">    <span class="keyword">unsigned</span> hexNum;</div><div class="line">    <span class="keyword">if</span> (![scanner scanHexInt:&amp;hexNum]) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRGBHex:hexNum];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 常用颜色写成分类</span></div><div class="line">+ (<span class="built_in">UIColor</span> *)themeColor </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRed:<span class="number">0</span> green:<span class="number">0</span> blue:<span class="number">0</span> alpha:<span class="number">1.0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UIImage</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据颜色生成图片</span></div><div class="line">+ (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> imageWithColor:color size:<span class="built_in">CGSizeMake</span>(<span class="number">1</span>, <span class="number">1</span>)];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color size:(<span class="built_in">CGSize</span>)size</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!color || size.width &lt;= <span class="number">0</span> || size.height &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, size.width, size.height);</div><div class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(rect.size, <span class="literal">NO</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context, color.CGColor);</div><div class="line">    <span class="built_in">CGContextFillRect</span>(context, rect);</div><div class="line">    <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UIView &amp;&amp; UIViewController<br>为UIView快速添加边框<br> <a href="https://github.com/aaronn/UIView-Borders" target="_blank" rel="external">UIView+Borders.h</a><br>为UIView添加红点,数字等<br> <a href="https://github.com/weng1250/WZLBadge" target="_blank" rel="external">WZLBadge</a><br>根据视图找到控制器</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIViewController</span> *)viewController </div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *view = <span class="keyword">self</span>; view; view = view.superview) &#123;</div><div class="line">        <span class="built_in">UIResponder</span> *nextResponder = [view nextResponder];</div><div class="line">        <span class="keyword">if</span> ([nextResponder isKindOfClass:[<span class="built_in">UIViewController</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="built_in">UIViewController</span> *)nextResponder;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取某个范围内的图形</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIImage</span> *)imageFromView:(<span class="built_in">UIView</span> *)theView atFrame:(<span class="built_in">CGRect</span>)r</div><div class="line">&#123; </div><div class="line">	<span class="built_in">UIGraphicsBeginImageContext</span>(theView.frame.size); </div><div class="line">	<span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>(); </div><div class="line">	<span class="built_in">CGContextSaveGState</span>(context); </div><div class="line">	<span class="built_in">UIRectClip</span>(r); </div><div class="line">	[theView.layer renderInContext:context]; </div><div class="line">	<span class="built_in">UIImage</span> *theImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>(); </div><div class="line">	<span class="built_in">UIGraphicsEndImageContext</span>();          </div><div class="line">	<span class="keyword">return</span>  theImage; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UIView移除所有子视图</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)removeAllSubviews</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">self</span>.subviews.count) &#123;</div><div class="line">        [<span class="keyword">self</span>.subviews.lastObject removeFromSuperview];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UIViewController默认设置</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.automaticallyAdjustsScrollViewInsets = <span class="literal">NO</span>;</div><div class="line"><span class="keyword">self</span>.edgesForExtendedLayout = <span class="built_in">UIRectEdgeNone</span>;</div><div class="line">- (<span class="built_in">UIEdgeInsets</span>)contentInset </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">UIEdgeInsetsMake</span>(<span class="number">64</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>网易云音乐启动动画</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TestViewController *test = [[TestViewController alloc] init];</div><div class="line"><span class="built_in">UIWindow</span> *keyWindow = [<span class="built_in">UIApplication</span> sharedApplication].keyWindow;   </div><div class="line">[<span class="built_in">UIView</span> transitionWithView:keyWindow duration:<span class="number">0.5</span> options:<span class="built_in">UIViewAnimationOptionTransitionFlipFromLeft</span> animations:^&#123;</div><div class="line">        [<span class="built_in">UIApplication</span> sharedApplication].keyWindow.rootViewController = test;</div><div class="line">&#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        </div><div class="line">&#125;];</div></pre></td></tr></table></figure>
</li>
<li><p>UITableViewCell &amp;&amp; UITableView &amp;&amp; UITableViewController<br>table view cell选中背景</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setSelected:(<span class="built_in">BOOL</span>)selected animated:(<span class="built_in">BOOL</span>)animated </div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> setSelected:selected animated:animated];</div><div class="line">    <span class="keyword">if</span> (selected) &#123;</div><div class="line">    	<span class="comment">// 选中</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">// 非选中</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>table view cell 左右间距,不填充整个table view</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setFrame:(<span class="built_in">CGRect</span>)frame</div><div class="line">&#123;</div><div class="line">    frame.origin.x = LEFT_MARGIN;</div><div class="line">    frame.size.width = kScreenWidth - LEFT_MARGIN * <span class="number">2</span>;</div><div class="line">    [<span class="keyword">super</span> setFrame:frame];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>table view cell 分割线</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法1,重写drawRect方法</span></div><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect </div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context, [<span class="built_in">UIColor</span> clearColor].CGColor);</div><div class="line">    <span class="built_in">CGContextFillRect</span>(context, rect);</div><div class="line">   </div><div class="line">    <span class="comment">//上分割线</span></div><div class="line">    <span class="built_in">CGContextSetStrokeColorWithColor</span>(context,[<span class="built_in">UIColor</span> whiteColor].CGColor);</div><div class="line">    <span class="built_in">CGContextStrokeRect</span>(context,<span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,rect.size.width,<span class="number">1</span>));</div><div class="line">   </div><div class="line">    <span class="comment">//下分割线</span></div><div class="line">    <span class="built_in">CGContextSetStrokeColorWithColor</span>(context,[<span class="built_in">UIColor</span> whiteColor].CGColor);</div><div class="line">    <span class="built_in">CGContextStrokeRect</span>(context,<span class="built_in">CGRectMake</span>(<span class="number">0</span>,rect.size.height<span class="number">-1</span>,rect.size.width,<span class="number">1</span>)); </div><div class="line">&#125;</div><div class="line"><span class="comment">// 方法2,隐藏自带分割线,然后再content view的layer上添加1像素的layer</span></div></pre></td></tr></table></figure>
<p>table view 默认设置</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 背景色</span></div><div class="line">tableView.backgroundColor = [<span class="built_in">UIColor</span> viewBackgroundColor];</div><div class="line"><span class="comment">// 分割线样式去除</span></div><div class="line">tableView.separatorStyle = <span class="built_in">UITableViewCellSeparatorStyleNone</span>;</div><div class="line"><span class="comment">// 表尾去除</span></div><div class="line">tableView.tableFooterView = [<span class="built_in">UIView</span> new];</div><div class="line"><span class="comment">// 表头去除</span></div><div class="line">tableView.tableHeaderView = [<span class="built_in">UIView</span> new];</div><div class="line"><span class="comment">// 区头默认有10高度,设置0无效,可以设置为0.01</span></div></pre></td></tr></table></figure>
<p>table view controller 添加3D Touch</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.遵循代理`UIViewControllerPreviewingDelegate`</span></div><div class="line"><span class="comment">// 2.注册cell</span></div><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath </div><div class="line">&#123;</div><div class="line">    DHCell *cell = [DHCell cellWithTableView:tableView];</div><div class="line">    <span class="comment">// 注册</span></div><div class="line">    [<span class="keyword">self</span> registerForPreviewingWithDelegate:<span class="keyword">self</span> sourceView:cell];</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 3.需要跳转的目标控制器</span></div><div class="line">- (<span class="built_in">UIViewController</span> *)previewingContext:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerPreviewing</span>&gt;)previewingContext viewControllerForLocation:(<span class="built_in">CGPoint</span>)location</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSIndexPath</span> *indexPath = [_tableView indexPathForCell:(<span class="built_in">UITableViewCell</span>* )[previewingContext sourceView]];</div><div class="line">	DestinationViewController *destinationVC = [[DestinationViewController alloc] init];</div><div class="line">	<span class="built_in">UINavigationController</span> *navc = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:destinationVC];</div><div class="line">	<span class="keyword">return</span> navc;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)previewingContext:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerPreviewing</span>&gt;)previewingContext commitViewController:(<span class="built_in">UIViewController</span> *)viewControllerToCommit</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> showViewController:viewControllerToCommit.childViewControllers[<span class="number">0</span>] sender:<span class="keyword">self</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">// 4.目标控制的操作,写在目标控制器的实现里面</span></div><div class="line">- (<span class="built_in">NSArray</span>&lt;<span class="keyword">id</span>&lt;<span class="built_in">UIPreviewActionItem</span>&gt;&gt; *)previewActionItems</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UIPreviewAction</span> * action1 = [<span class="built_in">UIPreviewAction</span> actionWithTitle:<span class="string">@"操作1"</span> style:<span class="built_in">UIPreviewActionStyleDefault</span> handler:^(<span class="built_in">UIPreviewAction</span> * _Nonnull action, <span class="built_in">UIViewController</span> * _Nonnull previewViewController) &#123;</div><div class="line">        DHLog(<span class="string">@"操作1"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="built_in">UIPreviewAction</span> * action2 = [<span class="built_in">UIPreviewAction</span> actionWithTitle:<span class="string">@"操作2"</span> style:<span class="built_in">UIPreviewActionStyleSelected</span> handler:^(<span class="built_in">UIPreviewAction</span> * _Nonnull action, <span class="built_in">UIViewController</span> * _Nonnull previewViewController) &#123;</div><div class="line">        DHLog(<span class="string">@"操作2"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="built_in">UIPreviewAction</span> * action3 = [<span class="built_in">UIPreviewAction</span> actionWithTitle:<span class="string">@"操作3"</span> style:<span class="built_in">UIPreviewActionStyleDestructive</span> handler:^(<span class="built_in">UIPreviewAction</span> * _Nonnull action, <span class="built_in">UIViewController</span> * _Nonnull previewViewController) &#123;</div><div class="line">        DHLog(<span class="string">@"操作3"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="built_in">NSArray</span> * actions = @[action1,action2,action3];</div><div class="line">    <span class="keyword">return</span> actions;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>app 添加 <code>Shortcuts</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</div><div class="line">&#123;</div><div class="line">	<span class="built_in">UIApplicationShortcutItem</span> *addItem = [[<span class="built_in">UIApplicationShortcutItem</span> alloc] initWithType:SHORTCUT_TYPE_ADD localizedTitle:<span class="string">@"添加"</span> localizedSubtitle:<span class="literal">nil</span> icon:	[<span class="built_in">UIApplicationShortcutIcon</span> iconWithType:<span class="built_in">UIApplicationShortcutIconTypeAdd</span>]</div><div class="line">	userInfo:@&#123;<span class="string">@"infoKey"</span>: <span class="string">@"infoValue"</span>&#125;];</div><div class="line">	[<span class="built_in">UIApplication</span> sharedApplication].shortcutItems = @[addItem];</div><div class="line">	<span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application performActionForShortcutItem:(<span class="built_in">UIApplicationShortcutItem</span> *)shortcutItem completionHandler:(<span class="keyword">void</span>(^)(<span class="built_in">BOOL</span> succeeded))completionHandler</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([shortcutItem.type isEqualToString:SHORTCUT_TYPE_ADD]) &#123;</div><div class="line">    	<span class="comment">// do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UIFont<br>添加自定义字体<br>第一步,Info.plist添加<code>Fonts provided by application</code> array,<code>item0</code>key,value 为字体文件名称全写;<br>第二步,打印所以字体,找到自定义字体所在family名称,根据名称找到具体字的名称;</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *familays = [<span class="built_in">UIFont</span> familyNames];</div><div class="line">NAArray *names = [<span class="built_in">UIFont</span> fontNamesForFamilyName:familyName];</div></pre></td></tr></table></figure>
<p>第三步,加载字体.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIfont</span> *customFont = [<span class="built_in">UIFont</span> fontWithName:fontName size:fontSize];</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIWebView清除缓存]]></title>
      <url>https://jiangdaohong.github.io./2016/10/22/UIWebView%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<p>webview清理缓存的正确姿势<br><a id="more"></a></p>
<p>最近项目中加了不少网页,有一些内容经常变动,未能及时刷新,网上找了一些方法,包括清除<code>NSURLCache</code>和写<code>js</code>进行清除,或者加载之前进行<code>reload</code>操作,发现都没效果,关掉网络还是可以加载出来😶后来发现想的复杂了,直接初始化<code>request</code>的时候缓存策略选择忽略本地缓存就好了,一声叹息…<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURLRequest</span> *request = [[<span class="built_in">NSURLRequest</span> alloc] initWithURL:[<span class="built_in">NSURL</span> URLWithString:urlStr] cachePolicy:<span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span> timeoutInterval:HTTP_REQUSET_TIMEOUT_INTERVAL];</div><div class="line">[webView loadRequest:request];</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[项目开发中的GCD实战应用]]></title>
      <url>https://jiangdaohong.github.io./2016/10/22/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84GCD%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>整理一下项目中GCD的应用<br><a id="more"></a></p>
<p>GCD是apple提供的一组C语言的API,主要用于实现一些特殊的功能,比如并发编程等,虽然是C语言的接口,但是经过block封装,调用十分方便,因此在项目中应用十分广泛,现在总结一下我个人在项目中的使用.</p>
<h3 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSTimeInterval</span> delayTime = <span class="number">5</span>;</div><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayTime * <span class="built_in">NSEC_PER_SEC</span>)), 	dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="comment">/// do someting on main thread</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="快速创建单例"><a href="#快速创建单例" class="headerlink" title="快速创建单例"></a>快速创建单例</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)shareInstance</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">id</span> shareInstance = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        shareInstance = [[<span class="keyword">self</span> alloc] init];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> shareInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异步执行代码"><a href="#异步执行代码" class="headerlink" title="异步执行代码"></a>异步执行代码</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">	<span class="comment">// do something ,global queue</span></div><div class="line">	<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">		<span class="comment">// main thread</span></div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="顺序执行代码-相当于使用NSOperationQueue的Dependency"><a href="#顺序执行代码-相当于使用NSOperationQueue的Dependency" class="headerlink" title="顺序执行代码(相当于使用NSOperationQueue的Dependency)"></a>顺序执行代码(相当于使用<code>NSOperationQueue</code>的<code>Dependency</code>)</h3><p>1,2,3同时执行,4最后打印<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t serviceGroup = dispatch_group_create();</div><div class="line">   </div><div class="line">    dispatch_group_enter(serviceGroup);</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        dispatch_group_leave(serviceGroup);</div><div class="line">    &#125;);</div><div class="line">   </div><div class="line">    dispatch_group_enter(serviceGroup);</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        dispatch_group_leave(serviceGroup);</div><div class="line">    &#125;);</div><div class="line">   </div><div class="line">    dispatch_group_enter(serviceGroup);</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        dispatch_group_leave(serviceGroup);</div><div class="line">    &#125;);</div><div class="line">   </div><div class="line">    dispatch_group_notify(serviceGroup, dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"4----%@"</span>, [<span class="built_in">NSThread</span> currentThread]); </div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>1,2异步执行完毕再异步执行3,4<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> barrierQueue = dispatch_queue_create(<span class="string">"jiangdaohong.github.io"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    <span class="built_in">dispatch_async</span>(barrierQueue, ^()&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">dispatch_async</span>(barrierQueue, ^()&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</div><div class="line">    &#125;);</div><div class="line">    dispatch_barrier_async(barrierQueue, ^()&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"dispatch_barrier_async test"</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">dispatch_async</span>(barrierQueue, ^()&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">dispatch_async</span>(barrierQueue, ^()&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"4"</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h3><p>由于NSURLSession没有提供同步请求,可以利用<code>semaphore</code>实现同步请求.<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</div><div class="line"><span class="comment">// 创建信号</span></div><div class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line"><span class="built_in">NSURLSessionDataTask</span> *task = [session dataTaskWithRequest:request completionHandler:^(<span class="built_in">NSData</span> *data, <span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="comment">// 设置信号量</span></div><div class="line">    dispatch_semaphore_signal(semaphore);</div><div class="line">&#125;];</div><div class="line"></div><div class="line">[task resume];</div><div class="line"><span class="comment">// 等待</span></div><div class="line">dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div></pre></td></tr></table></figure></p>
<h3 id="定时器-NSTimer不准"><a href="#定时器-NSTimer不准" class="headerlink" title="定时器(NSTimer不准)"></a>定时器(NSTimer不准)</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//倒计时时间</span></div><div class="line">__block <span class="keyword">int</span> timeout = <span class="number">60</span>;</div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, queue);</div><div class="line"><span class="comment">// 执行间隔1s</span></div><div class="line">dispatch_source_set_timer(timer, dispatch_walltime(<span class="literal">NULL</span>, <span class="number">0</span>),<span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span>);</div><div class="line">dispatch_source_set_event_handler(timer, ^&#123;</div><div class="line">    <span class="keyword">if</span>(timeout &lt;= <span class="number">0</span>)&#123;</div><div class="line">        <span class="comment">// 倒计时结束，关闭</span></div><div class="line">        dispatch_source_cancel(timer);</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            <span class="comment">// 主线程刷新UI</span></div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> minutes = timeout / <span class="number">60</span>;</div><div class="line">        <span class="keyword">int</span> seconds = timeout % <span class="number">60</span>;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            <span class="comment">// 主线程刷新UI</span></div><div class="line">        &#125;);</div><div class="line">        timeout--;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">dispatch_resume(timer);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[项目开发中KVC的简单应用]]></title>
      <url>https://jiangdaohong.github.io./2016/10/03/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%ADKVC%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>项目中有些时候使用KVC,可以节省很多的时间精力,实现快速开发</p>
<a id="more"></a>
<p>前一段时间有同学问我,能不能在不自定义UI的情况下,修改ActionSheet指定title的颜色,当时说很简单啊,Runtime获取实例变量列表,找到设置标题颜色的key,使用KVC就可以搞定.</p>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>编译条件: Xcode7.3.1;Project Deployment Target:iOS8.0.</p>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><ol>
<li><p>初始化一个ActionSheet.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIActionSheet</span> *actionSheet = [[<span class="built_in">UIActionSheet</span> alloc] initWithTitle:<span class="string">@"title"</span> delegate:<span class="literal">nil</span> cancelButtonTitle:<span class="string">@"cancle"</span> destructiveButtonTitle:<span class="string">@"destructive"</span> otherButtonTitles:<span class="string">@"other"</span>,<span class="string">@"other1"</span>, <span class="literal">nil</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>获取实例变量列表,可以为NSObject添加一个Category方法,用于打印列表,具体实现如下:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)printIvarList</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    Ivar *ivars = class_copyIvarList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;</div><div class="line">        Ivar ivar = ivars[i];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"name:%s------type:%s"</span>, ivar_getName(ivar),ivar_getTypeEncoding(ivar));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">name:_alertController------type:@<span class="string">"UIAlertController"</span></div><div class="line">name:_presenter------type:@<span class="string">"_UIAlertControllerShimPresenter"</span></div><div class="line">name:_retainedSelf------type:@<span class="string">"UIActionSheet"</span></div><div class="line">name:_actions------type:@<span class="string">"NSMutableArray"</span></div><div class="line">name:_cancelIndex------type:q</div><div class="line">name:_firstOtherButtonIndex------type:q</div><div class="line">name:_destructiveButtonIndex------type:q</div><div class="line">name:_actionSheetStyle------type:q</div><div class="line">name:_context------type:@</div><div class="line">name:_hasPreparedAlertActions------type:B</div><div class="line">name:_isPresented------type:B</div><div class="line">name:_alertControllerShouldDismiss------type:B</div><div class="line">name:_handlingAlertActionShouldDismiss------type:B</div><div class="line">name:_dismissingAlertController------type:B</div><div class="line">name:_delegate------type:@<span class="string">"&lt;UIActionSheetDelegate&gt;"</span>**</div></pre></td></tr></table></figure>
<p> 一看结果,好气哦,<code>UIAlertController</code>这个类是iOS8之后才允许使用的,算了,换用这个类重新打印一下吧,经过测试,<code>UIAlertAction</code>这个类含有可以设置标题的属性,属性列表大概是酱紫的:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">name:_checked------type:B</div><div class="line">name:_isPreferred------type:B</div><div class="line">name:_imageTintColor------type:@"UIColor"</div><div class="line">name:_titleTextColor------type:@"UIColor"</div><div class="line">name:_style------type:q</div><div class="line">name:_handler------type:@?</div><div class="line">name:_simpleHandler------type:@?</div><div class="line">name:_image------type:@"UIImage"</div><div class="line">name:_shouldDismissHandler------type:@?</div><div class="line">name:__descriptiveText------type:@"NSString"</div><div class="line">name:_contentViewController------type:@"UIViewController"</div><div class="line">name:_keyCommandInput------type:@"NSString"</div><div class="line">name:_keyCommandModifierFlags------type:q</div><div class="line">name:__representer------type:@"&lt;UIAlertActionViewRepresentation_Internal&gt;"</div><div class="line">name:__alertController------type:@"UIAlertController"</div></pre></td></tr></table></figure>
<p> 里面找一下,_titleTextColor就是它了.</p>
</li>
<li><p>找到了就试一下喽.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ac1 setValue:[<span class="built_in">UIColor</span> redColor] forKeyPath:<span class="string">@"_titleTextColor"</span>];</div></pre></td></tr></table></figure>
</li>
<li><p>run一下,完美.</p>
</li>
<li>其他.<br> 通过第2步,可以看到在iOS8上使用<code>UIActionSheet</code>也是可以达到同样的效果的,因为其中有_actions可以得到一个<code>UIAlertAction</code>的数组,重复上述步骤即可完成,以后适配iOS7的应用越来越少了,不考虑iOS7的适配,使用KVC可以便捷地实现这种UI效果,还是不错的.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每到深夜,总是有话想说说]]></title>
      <url>https://jiangdaohong.github.io./2016/10/02/%E6%AF%8F%E5%88%B0%E6%B7%B1%E5%A4%9C-%E6%80%BB%E6%98%AF%E6%9C%89%E8%AF%9D%E6%83%B3%E8%AF%B4%E8%AF%B4/</url>
      <content type="html"><![CDATA[<p>随便写写字<br><a id="more"></a></p>
<p>来杭州工作一年多了,记得上次十一,还在加班搞这个项目,一年过去了,还是这个项目,心累…做了很久的东西,没来得及上线就被砍了,虽说是搬砖,心里总还是不爽的.之前一直想写博客,但是网上大牛很多,博客写的很好,我写出来有什么用呢?内心还是希望记录一些东西.直到前一段时间比较空闲,就搭建了这个博客.</p>
<p>除了想有个地方说说话,之前记录多很多零散的东西,都保存在笔记软件里面,前一段才发现,里面实在太乱了,正好借着整理一下,以后查阅也方便.</p>
<p>就这样,话唠.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记一次关于null_resettable的性能优化]]></title>
      <url>https://jiangdaohong.github.io./2016/10/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8Enull-resettable%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>最近在进行项目优化的时候遇到了关于null_resettable的坑,记录一下,由于之前代码不在了,简单模拟一下当时的情况.<br><a id="more"></a></p>
<p>最近项目要正式上线,需要进行一定的性能方面的测试,由于之前的数据加载的方案几经变化,都没有出现严重的性能问题,也没有在意,结果一测试,结果让我大跌眼镜:性能简直差到天边d(･｀ω´･d*)!!!简单log一下看看那里耗时严重.</p>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>硬件:iPhone5C,系统,iOS9.0.2(越狱)<br>网络:辣鸡WiFi…<br>没有模拟器,之前引入第三方蓝牙库,只有真机包,坑…,要不然直接Instruments查看了,不过当时预测不是大问题,就直接log查看了.</p>
<h3 id="主要过程"><a href="#主要过程" class="headerlink" title="主要过程"></a>主要过程</h3><p>思路:由于之前是采取分段加载数据,之后采取一次性加载数据,同时进行4个网络请求,可能在网络方面有耗时操作,包括请求数据,解析数据;另一个就是存在频繁调用方法的低性能,导致运行慢.<br>测试数据是血糖数据,数据时间跨度为两年,模拟数据3600条,主要包括空腹血糖数据,以及数据记录时间等,用于绘制曲线图,曲线图以四小时为单位进行绘制,可知共有<code>365 * 2 * 6 = 4380</code>个点需要绘制,其中包括大量的时间比较,因为在同一时间区间,比如4:00-8:00只允许有一个数据进行绘制,因此这里还有一个数据去重操作.大概过程理清之后,打印一下时间:<br><img src="http://ww4.sinaimg.cn/large/006y8lVagw1f8e88oerjmj312e0megzu.jpg" alt=""></p>
<h3 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h3><p>简单看了一下时间分布,总共有18s,网络部分,网络请求7s,其中有接近1s的数据解析耗时;绘图部分,空腹血糖数据生成耗时10s.<br>耗时代码:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">DHLog(<span class="string">@"-----------fbg数据开始------------"</span>);</div><div class="line">   __block <span class="built_in">NSMutableArray</span> *fbgVals = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">   __block <span class="built_in">NSInteger</span> didAddIndex = <span class="number">-1</span>; <span class="comment">// 标记是否被添加过</span></div><div class="line">   <span class="built_in">NSInteger</span> listCount = (<span class="built_in">NSInteger</span>)<span class="keyword">self</span>.weekRecords.count;</div><div class="line">   <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = listCount<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">       <span class="comment">// 从远到近取出时间</span></div><div class="line">       RecordBG *bg = <span class="keyword">self</span>.weekRecords[i];</div><div class="line">       <span class="built_in">NSDate</span> *currentDate = [bg.happenTime dotString2Date];</div><div class="line">       <span class="built_in">NSInteger</span> xPosition = [DHChartTool getXAxisPointWithHour:currentDate.hour];</div><div class="line">       </div><div class="line">       <span class="built_in">NSInteger</span> index = [<span class="built_in">NSDate</span> daysWithinEraFromDate:from toDate:currentDate] * <span class="number">6</span> + xPosition + <span class="number">6</span>;</div><div class="line">       <span class="keyword">if</span> (didAddIndex != index) &#123;</div><div class="line">           didAddIndex = index;</div><div class="line">           [fbgVals addObject:[[ChartDataEntry alloc] initWithValue:bg.fbg xIndex:index data:bg]];</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">   &#125;</div><div class="line">   DHLog(<span class="string">@"-----------fbg数据OK------------"</span>);</div></pre></td></tr></table></figure></p>
<p>按照以上思路,继续打印时间,最后定位问题代码<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSInteger</span> index = [<span class="built_in">NSDate</span> daysWithinEraFromDate:from toDate:currentDate] * <span class="number">6</span> + xPosition + <span class="number">6</span>;</div></pre></td></tr></table></figure></p>
<p>进入看一下这行代码的功能,主要用于计算两个日期之间的整数天.代码实现如下:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSInteger</span>)daysWithinEraFromDate:(<span class="built_in">NSDate</span> *) startDate toDate:(<span class="built_in">NSDate</span> *) endDate</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSCalendar</span> *cal = [<span class="built_in">NSCalendar</span> currentCalendar];</div><div class="line">    <span class="built_in">NSDate</span> *s = [[startDate dateStringWithFormatString:<span class="string">@"yyyy-MM-dd"</span>] string2DateWithFormat:<span class="string">@"yyyy-MM-dd"</span>];</div><div class="line">    <span class="built_in">NSDate</span> *e = [[endDate dateStringWithFormatString:<span class="string">@"yyyy-MM-dd"</span>] string2DateWithFormat:<span class="string">@"yyyy-MM-dd"</span>];</div><div class="line">    <span class="built_in">NSInteger</span> startDay=[cal ordinalityOfUnit:<span class="built_in">NSDayCalendarUnit</span></div><div class="line">                                      inUnit: <span class="built_in">NSEraCalendarUnit</span> forDate:s];</div><div class="line">    <span class="built_in">NSInteger</span> endDay=[cal ordinalityOfUnit:<span class="built_in">NSDayCalendarUnit</span></div><div class="line">                                    inUnit: <span class="built_in">NSEraCalendarUnit</span> forDate:e];</div><div class="line">    <span class="keyword">return</span> (endDay-startDay);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看了一下这几行代码,<code>[endDate dateStringWithFormatString:@&quot;yyyy-MM-dd&quot;]</code>主要用于去掉日期的时分秒时间,<code>[cal ordinalityOfUnit:NSDayCalendarUnit inUnit:NSEraCalendarUnit forDate:s]</code>是系统提供的方法,进行单独测试,没发现问题.上面的方法实现如下:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)dateStringWithFormatString:(<span class="built_in">NSString</span> *)formatString &#123;</div><div class="line">    <span class="built_in">NSDateFormatter</span> *dateFormatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</div><div class="line">    [dateFormatter setDateFormat:formatString];</div><div class="line">    <span class="keyword">return</span> [dateFormatter stringFromDate:<span class="keyword">self</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里只是对系统方法进行简单调用,单看代码没问题,每个方法进入头文件看一下,其中一个关键字引起注意,想起了之前听说过<code>NSDate</code>有性能问题,当时没注意,现在看到这个关键字,猜测是这个属性引起的性能问题:</p>
<blockquote>
<p>NSDateFormatter.h<br>@property (null_resettable, copy) NSString *dateFormat;<br>使用null_resettable修饰的属性,字面意义,不可重置的,官方默认使用这个关键字,就是告诉开发者尽量不要重置这个属性的值,因为重置需要重写set和get,防止为空的情况下没有默认值,好了,就是这个坑.</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>定位到问题代码,优化考虑从两方面入手,一是避免调用这个方法,二是替换这个方法的实现,换用更好性能的实现.在原先的代码中,有很多地方调用<code>[NSDate daysWithinEraFromDate: toDate:]</code>,还有很多地方调用日期转字符串的方法.<br>首先,把简单调用日期转字符串的方法改为字符串截取方法,比如,只需要获取年月日的地方可以这样调用:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *dateStr = [[[[date dateByAddingDays:i] description] substringToIndex:<span class="number">10</span>] stringByReplacingOccurrencesOfString:<span class="string">@"-"</span> withString:<span class="string">@"/"</span>];</div></pre></td></tr></table></figure></p>
<p>这样就可以把日期转换为yyyy-MM-dd格式,注意,需要保证date的<code>description</code>返回标准格式,防止他人重写<code>description</code>带来隐患,<br>其次,把需要进行计算日期差的方法改为下面的实现:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSInteger</span>)dh_daysWithinEraFromDate:(<span class="built_in">NSString</span> *)startDate toDate:(<span class="built_in">NSString</span> *)endDate</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSCalendar</span> *cal = [<span class="built_in">NSCalendar</span> currentCalendar];</div><div class="line">    <span class="comment">// 截取年月日</span></div><div class="line">    <span class="built_in">NSString</span> *start = [startDate substringToIndex:<span class="number">10</span>];</div><div class="line">    <span class="built_in">NSString</span> *end = [endDate substringToIndex:<span class="number">10</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">NSDateFormatter</span> *formatter;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</div><div class="line">        [formatter setDateFormat:<span class="string">@"yyyy-MM-dd"</span>];</div><div class="line">        [formatter setLocale:[<span class="built_in">NSLocale</span> currentLocale]];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="comment">// 转成去掉时分秒的日期</span></div><div class="line">    <span class="built_in">NSDate</span> *s = [formatter dateFromString:start];</div><div class="line">    <span class="built_in">NSDate</span> *e = [formatter dateFromString:end];</div><div class="line">    </div><div class="line">    <span class="built_in">NSInteger</span> startDay=[cal ordinalityOfUnit:<span class="built_in">NSDayCalendarUnit</span></div><div class="line">                                      inUnit: <span class="built_in">NSEraCalendarUnit</span> forDate:s];</div><div class="line">    <span class="built_in">NSInteger</span> endDay=[cal ordinalityOfUnit:<span class="built_in">NSDayCalendarUnit</span></div><div class="line">                                    inUnit: <span class="built_in">NSEraCalendarUnit</span> forDate:e];</div><div class="line">    <span class="keyword">return</span> (endDay-startDay);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>经过这一番修改,绘制时间缩短到了1.5s,但是网络请求时间太久,接下来就是进行数据本地缓存,网络分段加载数据等方面网络部分的优化了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xcode命令行打包]]></title>
      <url>https://jiangdaohong.github.io./2016/09/25/Xcode%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>记录一下使用命令行进行打包<br><a id="more"></a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>最近公司进行内部测试,要求每天进行App打包上传,本来想搭建一个CI系统,但是实在没有精力(好吧,是没有成功╮(╯_╰)╭,搭建到一半下载git等插件的时候一直出问题,下次有时间再搞了),项目不大,但是每次打包要10分钟(里面有Swift混编,大坑),忍不了了,上网查了一下看到有一些编译优化指令,然后看CI的时候看到了自动打包命令,试了一下,打包时间可以缩短到3分钟以内,记录一下过程吧.</p>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><ol>
<li>Xcode中修改编译选项,修改为发布版证书和描述文件,或者修改编译Target</li>
<li>终端进入项目所在文件夹</li>
<li>执行命令xcodebuild clean</li>
<li><p>继续执行命令</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcodebuild -workspace appname.xcworkspace -scheme appname -configuration Release -derivedDataPath build</div></pre></td></tr></table></figure>
<p>这是有workspace的项目的指令,需要将appname替换为你的项目名<br>如果未使用workspace,用下面的命令就可以了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun -sdk iphoneos PackageApplication -v build/Release-iphoneos/app.app -o /path/appname.ipa</div></pre></td></tr></table></figure>
<p>后面的是输出路径以及打包app的名字</p>
</li>
<li><p>项目使用workspace,进行ipa输出,执行命令</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun -sdk iphoneos PackageApplication -v /ProjectPath/build/Build/Products/Release-iphoneos/appname.app -o /path/appname.ipa</div></pre></td></tr></table></figure>
<p>ProjectPath替换为你项目的路径,保证此路径下面有Release-iphoneos目录</p>
</li>
<li>发布项目,暂时手动发布😢</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reveal真机查看app]]></title>
      <url>https://jiangdaohong.github.io./2016/09/23/Reveal%E7%9C%9F%E6%9C%BA%E6%9F%A5%E7%9C%8Bapp/</url>
      <content type="html"><![CDATA[<p>记录一下使用Reveal的基本使用<br><a id="more"></a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>使用设备:iPhone5C,系统版本iOS9.0.2</li>
<li>Reveal版本:1.6.3</li>
<li>Cydia版本:1.1.26;Reveal Loader版本:1.0.0-1</li>
<li>Xcode版本:7.3.1</li>
</ol>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>一台越狱iOS设备</li>
<li>Cydia下载Reveal Loader,如果你是iOS最新的操作系统,建议下载最新的插件,<a href="https://github.com/heardrwt/RevealLoader" target="_blank" rel="external">下载地址</a></li>
<li>下载<a href="http://revealapp.com/download/" target="_blank" rel="external">Reveal</a>,查看官方使用说明</li>
<li>一定保证Reveal和越狱设备在同一网络环境下</li>
</ol>
<h3 id="真机查看app步骤"><a href="#真机查看app步骤" class="headerlink" title="真机查看app步骤"></a>真机查看app步骤</h3><ol>
<li>下载需要查看的app,这里演示查看系统的播客app</li>
<li>打开系统设置,找到Reveal,在里面找到需要查看的app, enable,界面如下图所示.<br><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f861nvo8guj20hs0vkjt2.jpg" alt="Reveal界面"><br><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f861ldv4ozj20hs0vkq5w.jpg" alt="reveal插件界面"></li>
<li>打开app</li>
<li>打开Reveal,选择连接查看的app,如下图<br><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f861pa9znxj20ia03qaam.jpg" alt="连接Reveal"></li>
<li>这样就可以查看app了,可以看到,播客app中间部分使用的控件名称以及布局方式<br><img src="http://ww2.sinaimg.cn/large/72f96cbagw1f861qucaq1j21kw0v213g.jpg" alt="查看app界面"></li>
</ol>
<h3 id="使用Reveal查看自己的app的简单方式"><a href="#使用Reveal查看自己的app的简单方式" class="headerlink" title="使用Reveal查看自己的app的简单方式"></a>使用Reveal查看自己的app的简单方式</h3><p>使用Reveal查看自己的app的方式很简单,只需要配置一下断点即可,官方给出了教程,可以点击<a href="http://support.revealapp.com/kb/getting-started/load-the-reveal-server-via-an-xcode-breakpoint" target="_blank" rel="external">这里</a>查看.</p>
<h3 id="简单记录利用符号断点查看App步骤"><a href="#简单记录利用符号断点查看App步骤" class="headerlink" title="简单记录利用符号断点查看App步骤"></a>简单记录利用符号断点查看App步骤</h3><ol>
<li>打开Xcode,选择<strong>View</strong> <strong>→ Navigators</strong> <strong>→ Show Breakpoint Navigator</strong></li>
<li>点击 <strong>+</strong> 按钮,选择<strong>Add Symbolic Breakpoint</strong>,如下图<br><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f862aw5twjj20ea06wabf.jpg" alt="添加图片"></li>
<li><p>进行断点编辑,如下图<br><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f862cendfrj20q40egq6w.jpg" alt="编辑断点"><br>  断点命令:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">expr (Class)NSClassFromString(@"IBARevealLoader") == nil ? (void )dlopen("/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/RevealServer.framework/RevealServer", 0x2) : ((void)0)</div></pre></td></tr></table></figure>
<p>如果命令无效,参看<a href="http://support.revealapp.com/kb/getting-started/load-the-reveal-server-via-an-xcode-breakpoint" target="_blank" rel="external">官方教程</a></p>
</li>
<li>进行断点设置,如下图<br><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f862fq6wfbj20s80ccgpf.jpg" alt="断点设置"></li>
<li>运行Xcode,接下来的步骤是重复真机查看app步骤4-5步.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装Chisel]]></title>
      <url>https://jiangdaohong.github.io./2016/09/22/%E5%AE%89%E8%A3%85Chisel/</url>
      <content type="html"><![CDATA[<p>记录一下使用Chisel的安装过程以及基本的命令<br><a id="more"></a></p>
<ol>
<li>使用 brew install chisel</li>
<li>记录默认命令的安装路径,默认路径是 /usr/local/opt/chisel/libexec/fblldb.py</li>
<li>用vim打开 <code>~./lldbinit</code> 文件,如果不存在,新建此文件</li>
<li><p>在文件中添加命令</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">command script <span class="keyword">import</span> 安装路径</div></pre></td></tr></table></figure>
</li>
<li><p>重启Xcode</p>
</li>
</ol>
<p>官方地址以及常用命令参考:<a href="https://github.com/facebook/chisel" target="_blank" rel="external">https://github.com/facebook/chisel</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tips]]></title>
      <url>https://jiangdaohong.github.io./2016/08/19/tips/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 主线程</div><div class="line">if (pthread_main_np() == 0) returnnil;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//处于开发阶段</div><div class="line">#ifdef DEBUG</div><div class="line">#define DHLog(...) NSLog(VA_ARGS)</div><div class="line">#else</div><div class="line">//处于发布阶段</div><div class="line">#define DHLog(...)</div><div class="line">#endif</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Format</div><div class="line">#define F(string, args...)                  [NSString stringWithFormat:string, args]</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[123]]></title>
      <url>https://jiangdaohong.github.io./2016/08/19/hello%20world/</url>
      <content type="html"><![CDATA[<p>hello world</p>
]]></content>
    </entry>
    
  
  
</search>
