<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>见习魔法师</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jiangdaohong.github.io./"/>
  <updated>2017-05-14T16:03:53.000Z</updated>
  <id>https://jiangdaohong.github.io./</id>
  
  <author>
    <name>jiangdaohong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈iOS复杂列表优化</title>
    <link href="https://jiangdaohong.github.io./2017/05/14/%E6%B5%85%E8%B0%88iOS%E5%A4%8D%E6%9D%82%E8%A1%A8%E4%BC%98%E5%8C%96/"/>
    <id>https://jiangdaohong.github.io./2017/05/14/浅谈iOS复杂表优化/</id>
    <published>2017-05-14T13:45:28.000Z</published>
    <updated>2017-05-14T16:03:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下最进项目改版的一些思考<br><a id="more"></a></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>由于原来首页列表需求多次大变动,加载<code>cell</code>的逻辑也跟着调整了很多次,<code>cell</code>的种类以及布局也变化很大,这次刚好进行重构;而且,原来的加载方式会大量进行子视图修改,有一定的潜在性能问题.</p>
<h3 id="需求分析及目标"><a href="#需求分析及目标" class="headerlink" title="需求分析及目标"></a>需求分析及目标</h3><ol>
<li><code>cell</code>布局更加灵活,以后增加新类型不需要修改控制器代码逻辑,简言之,视图和控制器解耦;</li>
<li>实现代码复用</li>
<li>解决潜在性能问题<br>在进行coding之前,可以参考一下几篇文章,里面对列表的论述多有裨益:<br><a href="https://objccn.io/issue-1-1/" target="_blank" rel="external">更轻量的 View Controllers</a><br><a href="https://objccn.io/issue-1-2/" target="_blank" rel="external">整洁的 Table View 代码</a><br><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">iOS 保持界面流畅的技巧</a></li>
</ol>
<p>前两篇介绍了如何编写低耦合的<code>UITableView</code>代码的思想,核心就是:</p>
<ol>
<li>将其<code>delegate</code>和<code>datasource</code>进行独立,创建单独的类进行管理,这个类是可以复用的,并且通过<code>blocks</code>的方法进行<code>cell</code>的创建于赋值,而控制器不需要了解<code>cell</code>的实现;</li>
<li>将数据操作集中到单独创建的类中,而数据模型有时候携带的数据还需要重新加工才可以使用,例如返回<code>yyyy-MM-dd HH:mm:ss</code>类型的时间,而我们需要的是<code>yyyy年MM月dd日</code>格式的字符串,类似这种处理可以放在模型的<code>category</code>中;</li>
<li>面对复杂的布局,比如当前页面中会显示多个控制器视图,类似<code>UITabBarController</code>结构,我们可以采用加载<code>Child Controller</code>的方式,将内聚程度高的代码写到所属控制器中;<br>这样,基本上就可以写出比较好,易于测试的<code>UITabelView</code>了,具体的代码可以参考原文,讲述的很详细了.</li>
</ol>
<p>第三篇博文主要讲解了如何进行性能优化,总结下来就是以下几点:</p>
<ol>
<li>CPU耗费资源的地方主要在<code>对象创建</code>,<code>对象调整</code>,<code>对象销毁</code>,<code>布局计算</code>,<code>Autolayout</code>,<code>文本计算</code>,<code>文本渲染</code>,<code>图片的解码</code>,<code>图像的绘制</code>等;</li>
<li>GPU资源的耗费主要集中在<code>纹理的渲染</code>,<code>视图的混合</code>,<code>图像的生成</code><br>针对以上几个方面,作者一一给出了解决方案,详细内容请<a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">参看原文</a><br>值得注意的是作者提出了<code>过早的优化是万恶之源</code>,当需求不明显或者性能问题不明显的时候尽量不要尝试优化,并给出了评测界面的方法,开源了一个查看<code>FPS</code>的小工具,地址<a href="https://github.com/ibireme/YYText/blob/master/Demo/YYTextDemo/YYFPSLabel.m" target="_blank" rel="external">戳一下</a><br>作者开源了一个开发套件,非常不错,里面附了一个微博的Feedlist demo,代码写的非常漂亮,准备借鉴他的做法,<a href="https://github.com/ibireme/YYKit" target="_blank" rel="external">demo地址</a></li>
</ol>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>看一下页面列表,大概是这样的:<br><img src="http://ww4.sinaimg.cn/large/006tKfTcly1ffl9xgm1hkj30ku0xeadx.jpg" alt="home page list"><br>首页返回的简化数据结构:</p>
<pre class=" language-objectivec"><code class="language-objectivec"><span class="token keyword">@interface</span> DHHomeItemInfo <span class="token punctuation">:</span> NSObject

<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> copy<span class="token punctuation">)</span> NSString <span class="token operator">*</span>itemInfoId<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> assign<span class="token punctuation">)</span> DHHomeItemType type<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**&lt; 类型:1、text 2、list*/</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> copy<span class="token punctuation">)</span> NSString <span class="token operator">*</span>title<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> NSData <span class="token operator">*</span>content<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**&lt; 返回的泛型数据,根据type进行解析*/</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> User <span class="token operator">*</span>user<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> NSDate <span class="token operator">*</span>updateTime<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> assign<span class="token punctuation">)</span> NSUInteger unreadTotal<span class="token punctuation">;</span>

<span class="token keyword">@end</span>
</code></pre>
<p>现在<code>cell</code>至少有两种布局,一种根据<code>list</code>显示若干<code>item</code>,一种显示为<code>text</code>,根据上图可以将 cell 划分三部分:</p>
<ol>
<li>顶部显示标题,包括姓名以及指标的名称,未读数,日期,分割线,实际上还有一个诊断的按钮, UI 上没有显示,诊断和标题有点击事件;</li>
<li>中部根据返回的数据类型,显示为文本或者若干 item, item 最多显示6个,并且可能有点击事件;</li>
<li>底部显示箭头,阴影以及一定的留白.</li>
</ol>
<p>首先,定义一个<code>DHHomeCell</code>类,用于显示所有的数据类型,在主页中进行设置;<br>接着,定义一个<code>DHHomeLayout</code>类,用于在子线程计算<code>cell</code>的布局等耗时操作,<code>cell</code>通过<code>layout</code>对象进行对象绑定,高度设置;<br>最后,定义一个<code>DHHomeCellDelegate</code>,用于传递点击事件.<br>这样,就把视图,数据处理以及交互进行了分离.</p>
<p><code>cell</code>中大概是这样的:</p>
<pre class=" language-objectivec"><code class="language-objectivec"><span class="token keyword">@class</span> DHHomeCell<span class="token punctuation">;</span>
<span class="token keyword">@protocol</span> DHHomeCellDelegate<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/// 顶部</span>
<span class="token keyword">@interface</span> DHHomeTitleView <span class="token punctuation">:</span> UIView
<span class="token comment" spellcheck="true">// ...顶部视图属性</span>
<span class="token comment" spellcheck="true">// 持有父视图cell</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> weak<span class="token punctuation">)</span> DHHomeCell <span class="token operator">*</span>cell<span class="token punctuation">;</span>

<span class="token keyword">@end</span>

<span class="token comment" spellcheck="true">/// 中部</span>
<span class="token comment" spellcheck="true">/// 文本</span>
<span class="token keyword">@interface</span> DHHomeTextLabel <span class="token punctuation">:</span> UILabel
<span class="token comment" spellcheck="true">// ...视图属性</span>
<span class="token comment" spellcheck="true">// 持有父视图cell</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> weak<span class="token punctuation">)</span> DHHomeCell <span class="token operator">*</span>cell<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> DHHomeLayout <span class="token operator">*</span>layout<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token comment" spellcheck="true">/// 单独指标的view</span>
<span class="token keyword">@interface</span> HDNewDataItemView <span class="token punctuation">:</span> UIView
<span class="token keyword">@end</span>

<span class="token comment" spellcheck="true">/// 底部视图</span>
<span class="token keyword">@interface</span> HDHomeBottomView <span class="token punctuation">:</span> UIView
<span class="token comment" spellcheck="true">// ...视图属性</span>
<span class="token comment" spellcheck="true">// 持有父视图cell</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> weak<span class="token punctuation">)</span> DHHomeCell <span class="token operator">*</span>cell<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> DHHomeLayout <span class="token operator">*</span>layout<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token comment" spellcheck="true">// 容器 view</span>
<span class="token keyword">@interface</span> DHHomeContentView<span class="token punctuation">:</span> UIView
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> UIView <span class="token operator">*</span>contentView<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/// 容器</span>

<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> DHHomeTitleView <span class="token operator">*</span>titleView<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 标题栏</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> DHDiagnoseButton <span class="token operator">*</span>diagnoseButton<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/// 诊断按钮</span>

<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> NSArray <span class="token operator">*</span>items<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">///指标 Array&lt;HDNewDataItemView></span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> DHHomeTextLabel <span class="token operator">*</span>contentTextLabel<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/// 文本</span>

<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> HDHomeBottomView <span class="token operator">*</span>contentTextLabel<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/// 底部</span>

<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> DHHomeLayout <span class="token operator">*</span>layout<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**&lt; 布局*/</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> weak<span class="token punctuation">)</span> DHHomeCell <span class="token operator">*</span>cell<span class="token punctuation">;</span>

<span class="token keyword">@end</span>

<span class="token keyword">@interface</span> DHHomeCell <span class="token punctuation">:</span> UITableViewCell

<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> weak<span class="token punctuation">)</span> id<span class="token operator">&lt;</span>DHHomeCellDelegate<span class="token operator">></span> delegate<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> DHHomeContentView <span class="token operator">*</span>dataContentView<span class="token punctuation">;</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setHomeLayout<span class="token punctuation">:</span><span class="token punctuation">(</span>DHHomeLayout <span class="token operator">*</span><span class="token punctuation">)</span>layout<span class="token punctuation">;</span>

<span class="token keyword">@end</span>

<span class="token comment" spellcheck="true">/// 代理方法</span>
<span class="token keyword">@protocol</span> DHHomeCellDelegate <span class="token operator">&lt;</span>NSObject<span class="token operator">></span>
<span class="token operator">@</span>optional
<span class="token comment" spellcheck="true">/// 点击了 Cell</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>cellDidClick<span class="token punctuation">:</span><span class="token punctuation">(</span>DHHomeCell <span class="token operator">*</span><span class="token punctuation">)</span>cell<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/// 点击了用户</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>cell<span class="token punctuation">:</span><span class="token punctuation">(</span>DHHomeCell <span class="token operator">*</span><span class="token punctuation">)</span>cell didClickUser<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>userId<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 点击诊断信息</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>cell<span class="token punctuation">:</span><span class="token punctuation">(</span>DHHomeCell <span class="token operator">*</span><span class="token punctuation">)</span>cell didClickDiagnose<span class="token punctuation">:</span><span class="token punctuation">(</span>DiagnoseInfo <span class="token operator">*</span><span class="token punctuation">)</span>info<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/// 点击了item</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>cell<span class="token punctuation">:</span><span class="token punctuation">(</span>DHHomeCell <span class="token operator">*</span><span class="token punctuation">)</span>cell didClickNewDataItemAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>index<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
</code></pre>
<p>所有的视图都通过<code>layout</code>的计算结果进行布局,当为<code>list</code>样式,<code>cell</code>中的<code>HDNewDataItemView</code>个数不确定,类似的,根据常见的九宫格布局,可以在初始化的时候一次性添加 6 个这样的子视图,默认全部隐藏,然后根据返回的<code>list</code>进行显示.</p>
<p>在<code>DHHomeLayout</code>中,可以定义一些处理好的数据以及计算的<code>frame</code>作为属性,方便进行缓存处理,实现大概是这样子的:</p>
<pre class=" language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// 子线程进行布局</span>
<span class="token keyword">@interface</span> DHHomeLayout <span class="token punctuation">:</span> NSObject

<span class="token operator">-</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>initWithWorkspaceItem<span class="token punctuation">:</span><span class="token punctuation">(</span>DHHomeItemInfo <span class="token operator">*</span><span class="token punctuation">)</span>item style<span class="token punctuation">:</span><span class="token punctuation">(</span>DHHomeItemType<span class="token punctuation">)</span>type<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 做一些其他更新</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>updateSomething<span class="token punctuation">;</span>

<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">,</span> readonly<span class="token punctuation">)</span> DHHomeItemInfo <span class="token operator">*</span>item<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> assign<span class="token punctuation">,</span> readonly<span class="token punctuation">)</span> DHHomeLayoutStyle style<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// item中一些深层次访问的对象,或者经过处理的若干属性,比如处理好的时间字符串</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> copy<span class="token punctuation">)</span> NSString <span class="token operator">*</span>updateTime<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// layout</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> assign<span class="token punctuation">)</span> CGFloat height<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**&lt; 总高度*/</span>

<span class="token comment" spellcheck="true">// 顶部视图高度以及子视图位置信息</span>
<span class="token comment" spellcheck="true">// ...若干</span>

<span class="token comment" spellcheck="true">// 中部视图位置信息</span>
<span class="token comment" spellcheck="true">// ...若干</span>

<span class="token comment" spellcheck="true">// 底部视图位置信息</span>
<span class="token comment" spellcheck="true">// ...若干</span>

<span class="token keyword">@end</span>
</code></pre>
<p>需要注意的是,其中一些属性,比如图片相关的设置,是需要在主线程中进行的.一些经常使用的图片或者创建耗时的对象可以使用<code>dispatch_once</code>代码块进行保存,都可以进行一定的性能优化,如果还是出现卡顿,确定问题后,可以借助开源的异步显示框架进行优化.<br>调用起来大概是这样子的:</p>
<pre class=" language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        DHHomeLayout <span class="token operator">*</span>layout <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>DHHomeLayout alloc<span class="token punctuation">]</span> initWithWorkspaceItem<span class="token punctuation">:</span>item style<span class="token punctuation">:</span>style<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>layouts addObject<span class="token punctuation">:</span>layout<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 多复制一下列表,测试长度</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>NSInteger i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>layouts addObjectsFromArray<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>layouts copy<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
            <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>tableView reloadData<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>NSInteger<span class="token punctuation">)</span>tableView<span class="token punctuation">:</span><span class="token punctuation">(</span>UITableView <span class="token operator">*</span><span class="token punctuation">)</span>tableView numberOfRowsInSection<span class="token punctuation">:</span><span class="token punctuation">(</span>NSInteger<span class="token punctuation">)</span>section <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _layouts<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>UITableViewCell <span class="token operator">*</span><span class="token punctuation">)</span>tableView<span class="token punctuation">:</span><span class="token punctuation">(</span>UITableView <span class="token operator">*</span><span class="token punctuation">)</span>tableView cellForRowAtIndexPath<span class="token punctuation">:</span><span class="token punctuation">(</span>NSIndexPath <span class="token operator">*</span><span class="token punctuation">)</span>indexPath <span class="token punctuation">{</span>

    NSString <span class="token operator">*</span>cellID <span class="token operator">=</span> <span class="token string">@"cell"</span><span class="token punctuation">;</span>
    DHHomeCell <span class="token operator">*</span>cell <span class="token operator">=</span> <span class="token punctuation">[</span>tableView dequeueReusableCellWithIdentifier<span class="token punctuation">:</span>cellID<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cell<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cell <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>DHHomeCell alloc<span class="token punctuation">]</span> initWithStyle<span class="token punctuation">:</span>UITableViewCellStyleDefault reuseIdentifier<span class="token punctuation">:</span>cellID<span class="token punctuation">]</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">[</span>cell setHomeLayout<span class="token punctuation">:</span>_layouts<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>CGFloat<span class="token punctuation">)</span>tableView<span class="token punctuation">:</span><span class="token punctuation">(</span>UITableView <span class="token operator">*</span><span class="token punctuation">)</span>tableView heightForRowAtIndexPath<span class="token punctuation">:</span><span class="token punctuation">(</span>NSIndexPath <span class="token operator">*</span><span class="token punctuation">)</span>indexPath <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>DHHomeLayout <span class="token operator">*</span><span class="token punctuation">)</span>_layouts<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span> height<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 一堆代理方法...</span>
</code></pre>
<p>这样,基本完成了复杂列表的重构.<br>还可以创建一个工具类或者<code>category</code>,将常用的处理方法进行封装,使用工具类处理,可以方便测试以及代码复用.</p>
<p>如果以后需求出现变动,只需要<code>cell</code>添加新视图,<code>layout</code>计算新的视图的布局,增加新的枚举类型即可完成布局.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下最进项目改版的一些思考&lt;br&gt;
    
    </summary>
    
    
      <category term="Performance" scheme="https://jiangdaohong.github.io./tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>WebView截图的一种思路</title>
    <link href="https://jiangdaohong.github.io./2017/02/13/WebView%E6%88%AA%E5%9B%BE%E7%9A%84%E4%B8%80%E7%A7%8D%E6%80%9D%E8%B7%AF/"/>
    <id>https://jiangdaohong.github.io./2017/02/13/WebView截图的一种思路/</id>
    <published>2017-02-13T02:06:07.000Z</published>
    <updated>2017-02-13T02:34:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>网页完整截图的方法<br><a id="more"></a></p>
<p>那天想起来一个APP分享的时候生成一张长图,想试一下,开始想的很简单:在webview加载完成的delegate里面,获取scroll view的layer,然后根据图形上下文获取image,保存相册即可.然而,失败了╮(╯▽╰)╭</p>
<h3 id="第一种方法-更改scroll-view的frame再截图"><a href="#第一种方法-更改scroll-view的frame再截图" class="headerlink" title="第一种方法:更改scroll view的frame再截图"></a>第一种方法:更改scroll view的frame再截图</h3><p>上面之所以无法截图,是因为scroll view的layer的实际需要截图的layer不是同一个东西,还没有加载出来的页面并没有显示在layer上?所以,只要改变scroll view的frame,使content size和frame的size一样就好了.核心代码:</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">- (UIImage *)captureScrollView:(UIScrollView *)scrollView{
    UIImage* image = nil;

    UIGraphicsBeginImageContextWithOptions(scrollView.contentSize, NO, [UIScreen mainScreen].scale);
    CGPoint originalContentOffset = scrollView.contentOffset;
    CGRect originalFrame = scrollView.frame;
    scrollView.contentOffset = CGPointZero;
    scrollView.frame = CGRectMake(0, 0, scrollView.contentSize.width, scrollView.contentSize.height);    

    [scrollView.layer renderInContext: UIGraphicsGetCurrentContext()];
    image = UIGraphicsGetImageFromCurrentImageContext();   
    UIGraphicsEndImageContext();

    scrollView.contentOffset = originalContentOffset;
    scrollView.frame = originalFrame;

    return image ? image : nil;
}
</code></pre>
<h3 id="KVC获取web-view私有容器变量"><a href="#KVC获取web-view私有容器变量" class="headerlink" title="KVC获取web view私有容器变量"></a>KVC获取web view私有容器变量</h3><p>web view是一个看起来简单,内部复杂的控件,获取一下私有变量列表,会发现有一个<code>_internal</code>私有变量,type是<code>UIWebViewInternal</code>,然后在<code>iOS runtime headers</code>可以看到这个类,点击<a href="https://github.com/search?utf8=✓&amp;q=repo%3Anst%2FiOS-Runtime-Headers+UIWebBrowserView&amp;type=Code&amp;ref=searchresults" target="_blank" rel="external">这里</a>,继续查看这个类的ivar list,</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">name:scroller------type:@"UIScrollView"
name:browserView------type:@"UIWebBrowserView"
name:checkeredPatternView------type:@"UICheckeredPatternView"
name:delegate------type:@"<UIWebViewDelegate>"
name:scalesPageToFit------type:b1
ame:isLoading------type:b1
name:hasOverriddenOrientationChangeEventHandling------type:b1
name:drawsCheckeredPattern------type:b1
name:webSelectionEnabled------type:b1
name:drawInWebThread------type:b1
name:inRotation------type:b1
name:didRotateEnclosingScrollView------type:b1
name:request------type:@"NSURLRequest"
name:clickedAlertButtonIndex------type:q
name:webViewDelegate------type:@"UIWebViewWebViewDelegate"
name:pdfHandler------type:@"UIWebPDFViewHandler"
</code></pre>
<p>好了,通过Xcode可以看到,进行web view内容显示的就是<code>UIWebBrowserView</code>这个类,接下来就好办了,直接上代码:</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">    // web view loading success
    UIView *browser = [webView valueForKeyPath:@"_internal.browserView"];
    UIImage* image = nil;
    UIGraphicsBeginImageContextWithOptions(browser.layer.frame.size, NO, [UIScreen mainScreen].scale);
    [browser.layer renderInContext: UIGraphicsGetCurrentContext()];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
</code></pre>
<p>KVC大法好!QAQ~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网页完整截图的方法&lt;br&gt;
    
    </summary>
    
    
      <category term="skill" scheme="https://jiangdaohong.github.io./tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>iOS端加载PDF文件实践</title>
    <link href="https://jiangdaohong.github.io./2017/02/07/iOS%E7%AB%AF%E5%8A%A0%E8%BD%BDPDF%E6%96%87%E4%BB%B6%E5%AE%9E%E8%B7%B5/"/>
    <id>https://jiangdaohong.github.io./2017/02/07/iOS端加载PDF文件实践/</id>
    <published>2017-02-07T08:10:16.000Z</published>
    <updated>2017-02-07T09:34:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中需要加载PDF文件,遇到一些小问题,记录一下.<br><a id="more"></a></p>
<h3 id="常见加载PDF的方式"><a href="#常见加载PDF的方式" class="headerlink" title="常见加载PDF的方式"></a>常见加载PDF的方式</h3><p>   iOS上面加载PDF一般分为两种方式,一种是使用web view,加载本地PDF文件或者网络PDF数据;另一种就是将PDF文件重新绘制,使用自定义view进行显示.两种方式各有优劣:第一种方式简单,粗暴,没有编辑的时候使用这种方式进行简单PDF浏览,能达到比较好的效果,缺点是不能进行编辑,显示的信息比较简略,而且web view本身是有内存问题的;自定义view的灵活性比较大,一般的阅读软件都是使用这种方式,可以分页显示,进行编辑等操作,缺点是与第一种方式相比下,需要写较多的代码以及考虑性能优化的问题.</p>
<h3 id="使用简单示例"><a href="#使用简单示例" class="headerlink" title="使用简单示例"></a>使用简单示例</h3><ol>
<li>第一种方式示例代码:<pre class=" language-objectivec"><code class="language-objectivec">NSURL <span class="token operator">*</span>url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSBundle mainBundle<span class="token punctuation">]</span> URLForResource<span class="token punctuation">:</span><span class="token string">@"demo"</span> withExtension<span class="token punctuation">:</span><span class="token string">@"pdf"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
NSURLRequest <span class="token operator">*</span>request <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSURLRequest alloc<span class="token punctuation">]</span> initWithURL<span class="token punctuation">:</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token punctuation">[</span>webView loadRequest<span class="token punctuation">:</span>request<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
由于有的PDF是有编码的,默认使用的是<code>UTF-8</code><pre class=" language-objectivec"><code class="language-objectivec">NSData <span class="token operator">*</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>NSData dataWithContentsOfFile<span class="token punctuation">:</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>webView loadData<span class="token punctuation">:</span>data MIMEType<span class="token punctuation">:</span><span class="token string">@"application/pdf"</span> textEncodingName<span class="token punctuation">:</span><span class="token string">@"UTF-8"</span> baseURL<span class="token punctuation">:</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>第二种方式示例代码:<br>这里有一篇<a href="http://blog.csdn.net/yiyaaixuexi/article/details/7645725" target="_blank" rel="external">博客</a>,<a href="https://github.com/ShadowLJia/PDFReader" target="_blank" rel="external">示例代码</a><br> <a href="http://blog.csdn.net/yiyaaixuexi/article/details/8209188" target="_blank" rel="external">创建PDF密码</a><br> <a href="http://blog.csdn.net/yiyaaixuexi/article/details/8035014" target="_blank" rel="external">PDF横竖屏切换</a><br>感谢念茜大神的博客.<br>简单来说,就是首先拿到文件,转为data,然后通过系统函数转为<code>CGContextRef</code>对象,然后<code>CGPDFDocumentGetNumberOfPages()</code>可以获取到PDF的页数,然后通过页数,<code>CG_EXTERN CGPDFPageRef __nullable CGPDFDocumentGetPage(
 CGPDFDocumentRef __nullable document, size_t pageNumber)
 CG_AVAILABLE_STARTING(__MAC_10_3, __IPHONE_2_0)</code>可以获取到指定页的PDF,然后进行PDF绘制就好了.<br>自定义view核心代码:<br>```objectivec</li>
</ol>
<ul>
<li>(void)drawRect:(CGRect)rect {<br>  // 坐标系转换<br>  CGContextTranslateCTM(context, 0.0, self.bounds.size.height);<br>  CGContextScaleCTM(context, 1.0, -1.0);<br>  long pageSum = CGPDFDocumentGetNumberOfPages(pdfDocument);<br>  pageNO = pageNO == 0 ? 1 : pageNo;<br>  CGPDFPageRef page = CGPDFDocumentGetPage(pdfDocument, pageNO);<br>  CGContextSaveGState(context);<br>  CGAffineTransform pdfTransform = CGPDFPageGetDrawingTransform(page, kCGPDFCropBox, self.bounds, 0, true);<br>  CGContextConcatCTM(context, pdfTransform);<br>  CGContextDrawPDFPage(context, page);<br>  CGContextRestoreGState(context);<br>}<br>```<h3 id="第二种方式的新问题"><a href="#第二种方式的新问题" class="headerlink" title="第二种方式的新问题"></a>第二种方式的新问题</h3>上面就是两种常见PDF的显示方式,但是第二种如果这么处理,会带来一个问题,就是如果进行放大处理,PDF会很模糊,看了一下<code>多看</code>的PDF显示,明显不是使用的第一种方式,但是放大之后依然很清晰,怎么处理的呢?答案是使用<code>CATiledLayer</code>替换自定义view的layer.<br>移动设备的图片处理能力终究是有限的,如果需要显示一张分辨率非常高的图片,直接用image view加载可能会爆内存,并且通常一张巨大的图片,比如地图,我们经常查看的是一部分而不是整体,为了高效绘图,苹果提供了<code>CATiledLayer</code>类,这个类可以很好地解决我们的问题.详细请参考苹果官方文档或者<ios核心动画高级技巧>的专用图层CATiledLayer章节.<br>示例代码:<br>```objectviec</ios核心动画高级技巧></li>
</ul>
<ul>
<li>(Class)layerClass {<br>  return [DHCATiledLayer class];<br>}</li>
</ul>
<p>//初始化方法</p>
<ul>
<li>(id)initWithFrame:(CGRect)frame {<br>  self = [super initWithFrame:frame];<br>  DHCATiledLayer<em> layer = (DHCATiledLayer </em>)[self layer];<br>  layer.levelsOfDetail = 10;<br>  layer.levelsOfDetailBias = 10;<br>  layer.tileSize = CGSizeMake(4086.0, 4086.0);<br>}<pre><code>这个类有隐式动画,集成并重写方法,动画时长为0即可:
```objectivec
+(CFTimeInterval)fadeDuration {
  return 0.0;
}
</code></pre><a href="http://adad184.com/2015/11/10/disable-uicollectionview-implicit-animation/" target="_blank" rel="external">这篇博客</a>里面写了如何去除UIView动画以及layer动画.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中需要加载PDF文件,遇到一些小问题,记录一下.&lt;br&gt;
    
    </summary>
    
    
      <category term="skill" scheme="https://jiangdaohong.github.io./tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>为peek view添加显示标题</title>
    <link href="https://jiangdaohong.github.io./2016/12/11/%E4%B8%BApeek-view%E6%B7%BB%E5%8A%A0%E6%98%BE%E7%A4%BA%E6%A0%87%E9%A2%98/"/>
    <id>https://jiangdaohong.github.io./2016/12/11/为peek-view添加显示标题/</id>
    <published>2016-12-11T10:50:05.000Z</published>
    <updated>2016-12-11T11:23:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>看到一些APP peek操作的时候会显示标题,模仿一下喽.<br><a id="more"></a></p>
<p>在玩APP的时候发现一些APP的peek出来的页面不太一样,显示的是有标题的,比如知乎首页和微博评论的按钮peek操作:</p>
<p><div align="center"><br><img src="http://ww2.sinaimg.cn/large/006tNc79gw1fan1wxdu44j305k027jr7.jpg" alt="weibo_peek"><br><img src="http://ww2.sinaimg.cn/large/006tNc79gw1fan1xn1ka9j305k025t8k.jpg" alt="weibo_pop"><br><img src="http://ww1.sinaimg.cn/large/006tNc79gw1fan1zf8f1aj305k01wjr6.jpg" alt="zhihu_peek"><br><img src="http://ww4.sinaimg.cn/large/006tNc79gw1fan1zufo7fj305k01yjr7.jpg" alt="weibo_pop"></div></p>
<p><div><br>简单分析一下:微博应该是用了navigation controller,而知乎则在pop的页面多了一个top视图,当peek的时候,可以看到多了一个标题的视图,真是简单粗暴.<br>实现一个微博的效果,简单Swift写一下:<br>peek页面</div></p>
<pre class=" language-swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token builtin">UIKit</span>
<span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token builtin">UIViewController</span> <span class="token punctuation">{</span>
    <span class="token keyword">internal</span> <span class="token keyword">let</span> tableView <span class="token operator">=</span> <span class="token function">UITableView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token builtin">UIScreen</span><span class="token punctuation">.</span><span class="token function">mainScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bounds<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token builtin">UITableViewStyle</span><span class="token punctuation">.</span><span class="token builtin">Plain</span><span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// Do any additional setup after loading the view, typically from a nib.</span>
        view<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span><span class="token function">greenColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        tableView<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
        tableView<span class="token punctuation">.</span>dataSource <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
        tableView<span class="token punctuation">.</span>tableFooterView <span class="token operator">=</span> <span class="token function">UIView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        view <span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>tableView<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">extension</span> <span class="token builtin">ViewController</span> <span class="token punctuation">:</span> <span class="token builtin">UITableViewDelegate</span><span class="token punctuation">,</span><span class="token builtin">UITableViewDataSource</span><span class="token punctuation">,</span><span class="token builtin">UIViewControllerPreviewingDelegate</span> <span class="token punctuation">{</span>
    <span class="token keyword">func</span> <span class="token function">tableView</span><span class="token punctuation">(</span>tableView<span class="token punctuation">:</span> <span class="token builtin">UITableView</span><span class="token punctuation">,</span> numberOfRowsInSection section<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">func</span> <span class="token function">tableView</span><span class="token punctuation">(</span>tableView<span class="token punctuation">:</span> <span class="token builtin">UITableView</span><span class="token punctuation">,</span> cellForRowAtIndexPath indexPath<span class="token punctuation">:</span> <span class="token builtin">NSIndexPath</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">UITableViewCell</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> tableViewCell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">dequeueReusableCellWithIdentifier</span><span class="token punctuation">(</span><span class="token string">"tableviewcell"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> tableViewCell <span class="token operator">==</span> <span class="token constant">nil</span> <span class="token punctuation">{</span>
            tableViewCell <span class="token operator">=</span> <span class="token function">UITableViewCell</span><span class="token punctuation">(</span>style<span class="token punctuation">:</span> <span class="token builtin">UITableViewCellStyle</span><span class="token punctuation">.</span><span class="token builtin">Default</span><span class="token punctuation">,</span> reuseIdentifier<span class="token punctuation">:</span> <span class="token string">"tableviewcell"</span><span class="token punctuation">)</span>
            tableViewCell<span class="token operator">?</span><span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>indexPath<span class="token punctuation">.</span>row<span class="token delimiter variable">)</span></span>"</span> <span class="token operator">+</span> <span class="token string">"行"</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> traitCollection<span class="token punctuation">.</span>forceTouchCapability <span class="token operator">==</span> <span class="token builtin">UIForceTouchCapability</span><span class="token punctuation">.</span><span class="token builtin">Available</span> <span class="token punctuation">{</span>
            <span class="token function">registerForPreviewingWithDelegate</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> sourceView<span class="token punctuation">:</span> tableViewCell<span class="token operator">!</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> tableViewCell<span class="token operator">!</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// UIViewControllerPreviewingDelegate</span>
    <span class="token keyword">func</span> <span class="token function">tableView</span><span class="token punctuation">(</span>tableView<span class="token punctuation">:</span> <span class="token builtin">UITableView</span><span class="token punctuation">,</span> didSelectRowAtIndexPath indexPath<span class="token punctuation">:</span> <span class="token builtin">NSIndexPath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        navigationController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">pushViewController</span><span class="token punctuation">(</span><span class="token function">DetailViewController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        tableView<span class="token punctuation">.</span><span class="token function">deselectRowAtIndexPath</span><span class="token punctuation">(</span>indexPath<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">func</span> <span class="token function">previewingContext</span><span class="token punctuation">(</span>previewingContext<span class="token punctuation">:</span> <span class="token builtin">UIViewControllerPreviewing</span><span class="token punctuation">,</span> viewControllerForLocation location<span class="token punctuation">:</span> <span class="token builtin">CGPoint</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">UIViewController</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/// 预览的应该包装一个UINavigationController,才会有title</span>
        <span class="token keyword">let</span> navc <span class="token operator">=</span> <span class="token function">UINavigationController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        navc<span class="token punctuation">.</span><span class="token function">addChildViewController</span><span class="token punctuation">(</span><span class="token function">DetailViewController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> navc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">func</span> <span class="token function">previewingContext</span><span class="token punctuation">(</span>previewingContext<span class="token punctuation">:</span> <span class="token builtin">UIViewControllerPreviewing</span><span class="token punctuation">,</span> commitViewController viewControllerToCommit<span class="token punctuation">:</span> <span class="token builtin">UIViewController</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/// pop的页面是UINavigationController的第一个子控制器</span>
        <span class="token function">showViewController</span><span class="token punctuation">(</span>viewControllerToCommit<span class="token punctuation">.</span>childViewControllers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sender<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>pop的页面:</p>
<pre class=" language-swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token builtin">UIKit</span>

<span class="token keyword">class</span> <span class="token class-name">DetailViewController</span><span class="token punctuation">:</span> <span class="token builtin">UIViewController</span> <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true">// Do any additional setup after loading the view.</span>
        view<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span><span class="token function">cyanColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        title <span class="token operator">=</span> <span class="token string">"评论"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这样就可以了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到一些APP peek操作的时候会显示标题,模仿一下喽.&lt;br&gt;
    
    </summary>
    
    
      <category term="3D touch" scheme="https://jiangdaohong.github.io./tags/3D-touch/"/>
    
  </entry>
  
  <entry>
    <title>APP本地化笔记</title>
    <link href="https://jiangdaohong.github.io./2016/12/10/APP%E5%9B%BD%E9%99%85%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    <id>https://jiangdaohong.github.io./2016/12/10/APP国际化笔记/</id>
    <published>2016-12-10T15:32:31.000Z</published>
    <updated>2016-12-12T05:08:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目需要做本地化,简单记录一下,这里的APP本地化特指iOS客户端的本地化.<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着移动互联网的发展,很多APP借着苹果的平台渐渐走向国际,甚至有些国内的公司面向的就是国外用户,我们现在做的产品就有这方面的需求,所以抽时间做了一下APP本地化.<br>一般来说,APP本地化主要是一些文字和图片,plist资源的本地化.文字一般就是UI控件上展示的文本,控件可能是纯代码创建的,也可能是xib或者storyboard上的控件;而图片则需要准备不同的资源文件.<br>下面介绍一下常用的本地化方法:</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>以普通的工程为例:</p>
<ol>
<li>新建工程,Info.plist中添加<code>Application has localized display name</code>,bool值为<code>YES</code>,<code>CFBundleDisplayName</code>和<code>CFBundleName</code>都设置为<code>$(PROJECT_NAME)</code>;</li>
<li>选择PROJECT-&gt;Info-&gt;Localizations,点击<code>+</code>,选择需要本地化的语言,我们选择Chinese(Simplified),然后弹出需要本地化的资源文件,需要的打钩,点击确定;</li>
<li>新建文件.选择iOS-&gt;Resource-&gt;String File,这里命名为Localizations.string;</li>
<li>选择新建的.string文件,右边属性栏有Localization,点击,弹出需要本地化的语言,随便选择一个,然后把需要本地化的语言都勾选上,点击文件,可以看到生成了不同语言的.string文件;</li>
<li>重复步骤3和步骤4,命名必须为<code>InfoPlist.strings</code>.</li>
<li>打开项目目录,把生成的本地化文件夹拖到项目中.</li>
</ol>
<h3 id="应用名称本地化"><a href="#应用名称本地化" class="headerlink" title="应用名称本地化"></a>应用名称本地化</h3><p>选择InfoPlist.strings,将需要显示的名称写到对应的文件里面即可:</p>
<pre class=" language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// 中文文件</span>
CFBundleDisplayName <span class="token operator">=</span> <span class="token string">"中文名字"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 英文文件</span>
CFBundleDisplayName <span class="token operator">=</span> <span class="token string">"English name"</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="文本本地化"><a href="#文本本地化" class="headerlink" title="文本本地化"></a>文本本地化</h3><p>以登陆按钮显示的标题为例,需要借助一个本地化方法才可以实现,首先在Localizations.string文件中分别写上对应的key-value:</p>
<pre class=" language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// 中文文件</span>
<span class="token string">"Login"</span> <span class="token operator">=</span> <span class="token string">"登陆"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 英文文件</span>
<span class="token string">"Login"</span> <span class="token operator">=</span> <span class="token string">"Login"</span><span class="token punctuation">;</span>
</code></pre>
<p>调用的地方</p>
<pre class=" language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// 前面是key,后面是注释,可为nil</span>
NSString <span class="token operator">*</span>loginString <span class="token operator">=</span> <span class="token function">NSLocalizedString</span><span class="token punctuation">(</span><span class="token string">@"Login"</span><span class="token punctuation">,</span> <span class="token string">@"login button title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>loginButton setTitle<span class="token punctuation">:</span>loginString forState<span class="token punctuation">:</span>UIControlStateNormal<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="图片资源和xib-plist资源的本地化"><a href="#图片资源和xib-plist资源的本地化" class="headerlink" title="图片资源和xib,plist资源的本地化"></a>图片资源和xib,plist资源的本地化</h3><p>图片本地化很简单,选中图片资源,点击属性栏的Localization选项,会自动把图片放到对应的语言文件夹下面,调用无需更改.<br>plist以及xib本地化方式和图片本地化方式大同小异.</p>
<h3 id="简化调用"><a href="#简化调用" class="headerlink" title="简化调用"></a>简化调用</h3><p>如果一开始没有做本地化的准备,但是突然要加入这项feature,这就需要快速完成,但是项目中的控件太多了怎么办?</p>
<ol>
<li>简单做法,修改继承,如替换UILabel为自定义Label,重写<code>setText:</code>,然后调用<code>NSLocalizedString(key,comment)</code>,这么做代价很大;</li>
<li><p>查看NSLocalizedString的实现:</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> NSLocalizedString(key, comment) \
</span>
     <span class="token punctuation">[</span><span class="token punctuation">[</span>NSBundle mainBundle<span class="token punctuation">]</span> localizedStringForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> value<span class="token punctuation">:</span>@<span class="token string">""</span> table<span class="token punctuation">:</span>nil<span class="token punctuation">]</span>
<span class="token macro property">#<span class="token directive keyword">define</span> NSLocalizedStringFromTable(key, tbl, comment) \
</span>
     <span class="token punctuation">[</span><span class="token punctuation">[</span>NSBundle mainBundle<span class="token punctuation">]</span> localizedStringForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> value<span class="token punctuation">:</span>@<span class="token string">""</span> table<span class="token punctuation">:</span><span class="token punctuation">(</span>tbl<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token macro property">#<span class="token directive keyword">define</span> NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \
</span>
     <span class="token punctuation">[</span>bundle localizedStringForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> value<span class="token punctuation">:</span>@<span class="token string">""</span> table<span class="token punctuation">:</span><span class="token punctuation">(</span>tbl<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token macro property">#<span class="token directive keyword">define</span> NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \
</span>
     <span class="token punctuation">[</span>bundle localizedStringForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> value<span class="token punctuation">:</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> table<span class="token punctuation">:</span><span class="token punctuation">(</span>tbl<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre>
<p>为了方便调用添加个宏定义:</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">undef</span> L</span>
<span class="token macro property">#<span class="token directive keyword">define</span> L(key) \
</span>
 <span class="token punctuation">[</span><span class="token punctuation">[</span>NSBundle mainBundle<span class="token punctuation">]</span> localizedStringForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> value<span class="token punctuation">:</span>@<span class="token string">""</span> table<span class="token punctuation">:</span>nil<span class="token punctuation">]</span>
</code></pre>
<p>然后一个一个替换/(ㄒoㄒ)/~~</p>
</li>
<li>替换完之后,用命令自动生成strings文件<pre class=" language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// 打开终端,定位到需要生成stings的文件,比如为LoginViewController.m,要生成DHLocalizations.strings</span>
<span class="token comment" spellcheck="true">// 字符串调用的地方</span>
NSString <span class="token operator">*</span>loginString <span class="token operator">=</span> <span class="token function">NSLocalizedStringFromTable</span><span class="token punctuation">(</span><span class="token string">@"Login"</span><span class="token punctuation">,</span><span class="token string">@"DHLocalizations"</span><span class="token punctuation">,</span> <span class="token string">@"login button title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>loginButton setTitle<span class="token punctuation">:</span>loginString forState<span class="token punctuation">:</span>UIControlStateNormal<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 执行如下命令</span>
genstrings LoginViewController<span class="token punctuation">.</span>m
<span class="token comment" spellcheck="true">// 查看文件夹,看到已经生成了DHLocalizations.strings文件</span>
</code></pre>
</li>
<li>批量生成命令<br>上个命令虽然能自动生成本地方资源文件,但是一次只能生成一个文件里面的本地化字符串,借助下面的命令可以进行批量生成<pre class=" language-shell"><code class="language-shell">// 进入终端,使用命令生成文件夹
mkdir en.lpro
// 遍历文件夹下.m文件,并执行genstrings命令
find ./ -name *.m -print0 | xargs -0 genstrings -o en.lproj
</code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3>感谢一下开发者的教程,放上教程链接<br><a href="https://my.oschina.net/u/1049180/blog/215695" target="_blank" rel="external">https://my.oschina.net/u/1049180/blog/215695</a><br>// 下面这篇文章讲述的很详细,图文并茂<br><a href="http://blog.csdn.net/q199109106q/article/details/8564615" target="_blank" rel="external">http://blog.csdn.net/q199109106q/article/details/8564615</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目需要做本地化,简单记录一下,这里的APP本地化特指iOS客户端的本地化.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自定义转场动画</title>
    <link href="https://jiangdaohong.github.io./2016/11/28/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    <id>https://jiangdaohong.github.io./2016/11/28/自定义转场动画/</id>
    <published>2016-11-28T12:43:58.000Z</published>
    <updated>2016-11-28T13:43:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久不用的东西,复习一下,先写一下转场动画吧O(∩_∩)O<br><a id="more"></a></p>
<p>直接开始,这篇博客分三部分,第一部分记述自定义modal动画,第二部记述自定义push动画,第三部分记一下常见动画的实现.</p>
<h3 id="modal动画"><a href="#modal动画" class="headerlink" title="modal动画"></a>modal动画</h3><p>下面简要写一下以modal的形式实现系统的push动画<br>主要步骤:</p>
<ol>
<li>新建两个view controller,记做FromVC,ToVC;</li>
<li>在FromVC中,实现<code>presentViewController:animated:completion</code>,ToVC对象设置<code>toVC.transitioningDelegate = self;</code>,fromVC遵守协议<code>UIViewControllerTransitioningDelegate</code>;</li>
<li>看一下<code>UIViewControllerTransitioningDelegate</code><br>```objectivec<br>// Asks your delegate for the transition animator object to use when presenting a view controller.</li>
</ol>
<ul>
<li>(nullable id <uiviewcontrolleranimatedtransitioning>)animationControllerForPresentedController:(UIViewController <em>)presented presentingController:(UIViewController </em>)presenting sourceController:(UIViewController *)source;<br>// Asks your delegate for the transition animator object to use when dismissing a view controller.</uiviewcontrolleranimatedtransitioning></li>
<li>(nullable id <uiviewcontrolleranimatedtransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed;<br>// Asks your delegate for the interactive animator object to use when presenting a view controller.</uiviewcontrolleranimatedtransitioning></li>
<li>(nullable id <uiviewcontrollerinteractivetransitioning>)interactionControllerForPresentation:(id <uiviewcontrolleranimatedtransitioning>)animator;<br>// Asks your delegate for the interactive animator object to use when dismissing a view controller.</uiviewcontrolleranimatedtransitioning></uiviewcontrollerinteractivetransitioning></li>
<li>(nullable id <uiviewcontrollerinteractivetransitioning>)interactionControllerForDismissal:(id <uiviewcontrolleranimatedtransitioning>)animator;<br>// Asks your delegate for the custom presentation controller to use for managing the view hierarchy when presenting a view controller.</uiviewcontrolleranimatedtransitioning></uiviewcontrollerinteractivetransitioning></li>
<li>(nullable UIPresentationController <em>)presentationControllerForPresentedViewController:(UIViewController </em>)presented presentingViewController:(UIViewController <em>)presenting sourceViewController:(UIViewController </em>)source NS_AVAILABLE_IOS(8_0);<br><code>``
通过文档可以看到,</code>UIViewControllerTransitioningDelegate`主要要实现前两个方法来获取present和dismiss的动画对象;</li>
</ul>
<ol>
<li>而动画对象需要遵守<code>UIViewControllerAnimatedTransitioning</code>协议,看一下这个协议需要实现的方法:<br>```objectivec<br>// This is used for percent driven interactive transitions, as well as for container controllers that have companion animations that might need to<br>// synchronize with the main animation. </li>
</ol>
<ul>
<li>(NSTimeInterval)transitionDuration:(nullable id <uiviewcontrollercontexttransitioning>)transitionContext;<br>// This method can only  be a nop if the transition is interactive and not a percentDriven interactive transition.</uiviewcontrollercontexttransitioning></li>
<li>(void)animateTransition:(id <uiviewcontrollercontexttransitioning>)transitionContext;<br>```<br>第一个方法返回的是动画执行的时间,第二个方法则是用于处理动画效果;</uiviewcontrollercontexttransitioning></li>
</ul>
<ol>
<li>首先实现present动画,新建一个<code>DHPresentAnimation</code>类,继承自<code>NSObject</code>,并且实现<code>UIViewControllerAnimatedTransitioning</code>中的两个方法,代码如下:<br>```objectivec<br>// 动画执行的时间</li>
</ol>
<ul>
<li>(NSTimeInterval)transitionDuration:(id <uiviewcontrollercontexttransitioning>)transitionContex<br>{<br>  return 0.3;<br>}</uiviewcontrollercontexttransitioning></li>
</ul>
<p>// 自定义动画</p>
<ul>
<li>(void)animateTransition:(id <uiviewcontrollercontexttransitioning>)transitionContext<br>{<br>  // 获取目标VC<br>  UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];<br>  // 获取最终要显示的VC的frame<br>  CGRect finalRect = [transitionContext finalFrameForViewController:toVC];<br>  // 设置目标VC的默认位置,这里定位在屏幕左侧<br>  toVC.view.frame = CGRectOffset(finalRect, -[[UIScreen mainScreen]bounds].size.width, 0);<br>  // 获取containerView,并将目标VC的view设置为它的子视图<br>  [[transitionContext containerView] addSubview:toVC.view];<br>  // 简单UIView动画,使toVC的view变换到最终要显示的位置和大小<br>  [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{<pre><code>  toVC.view.frame = finalRect;
</code></pre>  } completion:^(BOOL finished) {<br>  // 明确告诉上下文,结束动画<pre><code>  [transitionContext completeTransition:YES];
</code></pre>  }];<br>}<br>```</uiviewcontrollercontexttransitioning></li>
</ul>
<ol>
<li>在<code>FromVC</code>中,实现<code>UIViewControllerTransitioningDelegate</code>协议方法<br>```objectivec</li>
</ol>
<ul>
<li>(id <uiviewcontrolleranimatedtransitioning>)animationControllerForPresentedController:(UIViewController <em>)presented presentingController:(UIViewController </em>)presenting sourceController:(UIViewController *)source {<br>// 返回present自定义动画对象<br>  return [[DHPresentAnimation alloc] init];<br>}<br>```</uiviewcontrolleranimatedtransitioning></li>
</ul>
<ol>
<li>同理,实现dismiss动画,实现<code>FromVC</code>遵循协议中的另一个方法:<br> dismiss动画<br>```objectivec</li>
</ol>
<ul>
<li><p>(NSTimeInterval)transitionDuration:(id<uiviewcontrollercontexttransitioning>)transitionContext<br>{<br>  return 1.0;<br>}</uiviewcontrollercontexttransitioning></p>
</li>
<li><p>(void)animateTransition:(id<uiviewcontrollercontexttransitioning>)transitionContext<br>{<br>  UIViewController <em>fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];<br>  UIViewController </em>toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];</uiviewcontrollercontexttransitioning></p>
<p>  CGRect initRect  = [transitionContext initialFrameForViewController:fromVC];<br>  CGRect finalRect = CGRectOffset(initRect, -[[UIScreen mainScreen]bounds].size.width, 0);</p>
<p>  UIView *containerView = [transitionContext containerView];<br>  [containerView addSubview:toVC.view];<br>  [containerView sendSubviewToBack:toVC.view];</p>
<p>  [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{</p>
<pre><code>  fromVC.view.frame = finalRect;
</code></pre><p>  } completion:^(BOOL finished) {</p>
<pre><code>  [transitionContext completeTransition:YES];
</code></pre><p>  }];<br>}<br><code>协议方法:</code>objectivec</p>
</li>
<li>(id<uiviewcontrolleranimatedtransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed<br>{<br>  return [[DHDismissAnimation alloc] init];<br>}<br>```</uiviewcontrolleranimatedtransitioning></li>
</ul>
<ol>
<li><code>command + R</code>.<h3 id="push动画"><a href="#push动画" class="headerlink" title="push动画"></a>push动画</h3>待续<h3 id="常见动画的实现"><a href="#常见动画的实现" class="headerlink" title="常见动画的实现"></a>常见动画的实现</h3>待续</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不用的东西,复习一下,先写一下转场动画吧O(∩_∩)O&lt;br&gt;
    
    </summary>
    
    
      <category term="Animation" scheme="https://jiangdaohong.github.io./tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>初窥JSPatch</title>
    <link href="https://jiangdaohong.github.io./2016/11/20/%E5%88%9D%E7%AA%A5JSPatch/"/>
    <id>https://jiangdaohong.github.io./2016/11/20/初窥JSPatch/</id>
    <published>2016-11-20T09:28:23.000Z</published>
    <updated>2016-11-20T10:52:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hotfix是解决线上bug的重要手段之一,iOS开发中,如今流行的成熟解决方法之一就是JSPatch,本文主要是对JSPatch应用进行一定的介绍,并未做原理分析.<br><a id="more"></a></p>
<p>谈起hotfix,是个不小的话题,而JSPatch以他灵活,使用方便而且功能强大的特点,使它成为解决线上重大bug的”黑武器”,强大,危险.所以在开头要说明,不用使用JSPatch来修改一些小的错误,只有发生重大bug的时候才使用,原子弹固然威力大,但造成的后果也是影响深远的.一些界面可以采用其他方案替代,提高app的动态性,比如使用web view等方式,这里不做深究.下面开始介绍JSPatch.</p>
<p>JSPatch是微信读书团队的大神<a href="https://github.com/bang590/" target="_blank" rel="external">bang</a>的<a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">开源项目</a>,所以你是可以看到这个项目的核心源码,你可以通过CocoaPods集成到项目中,也可以手动集成,也可以通过SDK的方式集成,<a href="http://www.jspatch.com/Docs/intro" target="_blank" rel="external">这里</a>是JSPatch Platform的集成说明文档,简单来讲,如果你要自己搭建后台,进行修复包的部署等工作,直接使用开源代码即可,这种比较适用于大公司或者业务敏感,个性化定制功能的公司,而对公司来说,作为一般性需求或者只是在个人项目中使用的话,完全可以借助平台,而且平台也提供了付费功能.对于日请求量小于1w的用户是免费的.需要进行灰度测试,在线监控等功能,需要进行付费.</p>
<h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><pre class=" language-objectivec"><code class="language-objectivec">pod <span class="token string">'JSPatch'</span>
</code></pre>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class=" language-objectivec"><code class="language-objectivec"><span class="token punctuation">[</span>JSPatch startWithAppKey<span class="token punctuation">:</span><span class="token string">@"Your AppKey"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 可以多次调用用来同步服务器状态</span>
<span class="token punctuation">[</span>JSPatch sync<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 程序启动的时候开启JSEngine</span>
<span class="token punctuation">[</span>JPEngine startEngine<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 执行js代码</span>
<span class="token comment" spellcheck="true">// 官方示例</span>
<span class="token comment" spellcheck="true">// 直接调用js</span>
<span class="token punctuation">[</span>JPEngine evaluateScript<span class="token punctuation">:</span><span class="token string">@"\
 var alertView = require('UIAlertView').alloc().init();\
 alertView.setTitle('Alert');\
 alertView.setMessage('AlertView from js'); \
 alertView.addButtonWithTitle('OK');\
 alertView.show(); \
"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 执行网络js代码</span>
<span class="token punctuation">[</span>NSURLConnection sendAsynchronousRequest<span class="token punctuation">:</span><span class="token punctuation">[</span>NSURLRequest requestWithURL<span class="token punctuation">:</span><span class="token punctuation">[</span>NSURL URLWithString<span class="token punctuation">:</span><span class="token string">@"http://cnbang.net/test.js"</span><span class="token punctuation">]</span><span class="token punctuation">]</span> queue<span class="token punctuation">:</span><span class="token punctuation">[</span>NSOperationQueue mainQueue<span class="token punctuation">]</span> completionHandler<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSURLResponse <span class="token operator">*</span>response<span class="token punctuation">,</span> NSData <span class="token operator">*</span>data<span class="token punctuation">,</span> NSError <span class="token operator">*</span>connectionError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NSString <span class="token operator">*</span>script <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSString alloc<span class="token punctuation">]</span> initWithData<span class="token punctuation">:</span>data encoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>JPEngine evaluateScript<span class="token punctuation">:</span>script<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 执行本地js代码</span>
NSString <span class="token operator">*</span>sourcePath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSBundle mainBundle<span class="token punctuation">]</span> pathForResource<span class="token punctuation">:</span><span class="token string">@"sample"</span> ofType<span class="token punctuation">:</span><span class="token string">@"js"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
NSString <span class="token operator">*</span>script <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithContentsOfFile<span class="token punctuation">:</span>sourcePath encoding<span class="token punctuation">:</span>NSUTF8StringEncoding error<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>JPEngine evaluateScript<span class="token punctuation">:</span>script<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="API示例"><a href="#API示例" class="headerlink" title="API示例"></a>API示例</h3><p>调用OC类之前需要调用<code>require(class name)</code></p>
<pre class=" language-objective"><code class="language-objective">requare(`UIView`)
var view = UIView.alloc().init()
</code></pre>
<p>也可使用的时候再进行声明</p>
<pre class=" language-objective"><code class="language-objective">require(`UIColor`).redColor()
</code></pre>
<p>参数传递<br>和OC用法一样,直接进行传递即可</p>
<pre class=" language-objectivewc"><code class="language-objectivewc">var view = UIView.alloc().init();
var superView = UIView.alloc().init()
superView.addSubview(view)
</code></pre>
<p>defineClass<br>defineClass(classDeclaration, [properties,] instanceMethods, classMethods)<br>@param classDeclaration: 字符串，类名/父类名和Protocol<br>@param properties: 新增property，字符串数组，可省略<br>@param instanceMethods: 要添加或覆盖的实例方法<br>@param classMethods: 要添加或覆盖的类方法</p>
<pre class=" language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// OC</span>
<span class="token keyword">@implementation</span> JPTestObject

<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>tableView<span class="token punctuation">:</span><span class="token punctuation">(</span>UITableView <span class="token operator">*</span><span class="token punctuation">)</span>tableView didSelectRowAtIndexPath<span class="token punctuation">:</span><span class="token punctuation">(</span>NSIndexPath <span class="token operator">*</span><span class="token punctuation">)</span>indexPath <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
    <span class="token keyword">@end</span>
<span class="token comment" spellcheck="true">// JS</span>
<span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"JPTableViewController"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> tableView_didSelectRowAtIndexPath<span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span>tableView<span class="token punctuation">,</span> indexPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>把JSPatch的Log添加到自己的日志里面</p>
<pre class=" language-objectivec"><code class="language-objectivec"><span class="token punctuation">[</span>JSPatch setLogger<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//msg 是 JSPatch log 字符串，用你自定义的logger打出</span>
    <span class="token function">YOUR_APP_LOG</span><span class="token punctuation">(</span><span class="token string">@"%@"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>官方修复线上bug示例</p>
<pre class=" language-objectivec"><code class="language-objectivec"> <span class="token keyword">@implementation</span> XRTableViewController
 ⁃ <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>tableView<span class="token punctuation">:</span><span class="token punctuation">(</span>UITableView <span class="token operator">*</span><span class="token punctuation">)</span>tableView didSelectRowAtIndexPath<span class="token punctuation">:</span><span class="token punctuation">(</span>NSIndexPath <span class="token operator">*</span><span class="token punctuation">)</span>indexPath
    <span class="token punctuation">{</span>
    NSString <span class="token operator">*</span>content <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">[</span><span class="token punctuation">[</span>indexPath row<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可能会超出数组范围导致crash</span>
    XRViewController <span class="token operator">*</span>controller <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>JPViewController alloc<span class="token punctuation">]</span> initWithContent<span class="token punctuation">:</span>content<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController pushViewController<span class="token punctuation">:</span>controller<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
<span class="token comment" spellcheck="true">//main.js</span>
<span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"XRTableViewController"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  tableView_didSelectRowAtIndexPath<span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span>tableView<span class="token punctuation">,</span> indexPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    var row <span class="token operator">=</span> indexPath<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//加上判断越界的逻辑</span>
      var content <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">dataArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>
      var controller <span class="token operator">=</span> XRViewController<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initWithContent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">navigationController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pushViewController</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>脚本删除<br>如果是通过JSPatch Platform,在操作界面进行删除脚本即可;如果是自搭建平台,需要调用<code>JPCleaner</code>的clean方法,进行指定类的或者全部代码进行清除.<br>更多基本用法查阅官方文档:<a href="https://github.com/bang590/JSPatch/wiki/JSPatch-基础用法" target="_blank" rel="external">JSPatch基础用法</a></p>
<h3 id="传输安全问题"><a href="#传输安全问题" class="headerlink" title="传输安全问题"></a>传输安全问题</h3><p>由于JSPatch是通过运行时进行消息分发,因此功能强大, 因此一旦被黑客攻击,下发恶意补丁包,那app基本就会被彻底攻破,因此在使用JSPatch SDK的时候,对js文件进行了<a href="https://en.wikipedia.org/wiki/RSA" target="_blank" rel="external">RSA加密</a><br>主要流程就是对服务端进行js文件的MD5加密,然后使用RSA私钥对MD5进行一次加密,一起下发给客户端;<br>客户端拿到数据之后,RSA公钥进行解密,拿到MD5值,然后自己进行计算下载的js文件的MD5,进行校验,判断是否被修改,进行分情况处理.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.jspatch.com/Docs/intro" target="_blank" rel="external">JSPatch</a>官方文档说明;<br><a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">JSPatch github源代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hotfix是解决线上bug的重要手段之一,iOS开发中,如今流行的成熟解决方法之一就是JSPatch,本文主要是对JSPatch应用进行一定的介绍,并未做原理分析.&lt;br&gt;
    
    </summary>
    
    
      <category term="skill" scheme="https://jiangdaohong.github.io./tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发常用UI小技巧</title>
    <link href="https://jiangdaohong.github.io./2016/10/22/iOS%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8UI%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://jiangdaohong.github.io./2016/10/22/iOS开发常用UI小技巧/</id>
    <published>2016-10-22T14:55:16.000Z</published>
    <updated>2016-12-04T14:19:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下开发中常用的UI小技巧<br><a id="more"></a></p>
<ol>
<li><p>UINavigationBar相关设置</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC"> // 去阴影
 [[UINavigationBar appearance] setShadowImage:[UIImage new]];
 // 设置标题
 NSMutableDictionary *titleTextAttrs = [NSMutableDictionary dictionary];
 titleTextAttrs[NSForegroundColorAttributeName] = [UIColor whiteColor];
 titleTextAttrs[NSFontAttributeName] = [UIFont boldSystemFontOfSize:18];
 [[UINavigationBar appearance] setTitleTextAttributes:titleTextAttrs];
 // 设置渲染色
 [[UINavigationBar appearance] setTintColor:[UIColor whiteColor]];

 // 设置背景图片
 [[UINavigationBar appearance] setBackgroundImage:[[UIImage imageNamed:@"navc_bg_blue"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]     forBarMetrics:UIBarMetricsDefault];
</code></pre>
</li>
<li>UITabBar相关设置<pre class=" language-ObjectiveC"><code class="language-ObjectiveC"> // 去阴影
 [[UITabBar appearance] setShadowImage:[UIImage new];
 // 更换系统自带的tabbar
 DHTabBar *tabBar = [DHTabBar tabbar];
 [self setValue:tabBar forKeyPath:@"tabBar"];
</code></pre>
</li>
<li>UITabBarController<br>选中不同控制器显示不同的statusBar样式<br>```ObjectiveC</li>
</ol>
<ul>
<li>(UIStatusBarStyle)preferredStatusBarStyle<br>{<br>  return self.selectedViewController.preferredStatusBarStyle;<br>}<br>```</li>
</ul>
<ol>
<li>UITabbarController快速添加子控制器<br>```ObjectiveC<br>/**<ul>
<li>添加一个子控制器<br>*</li>
<li>@param childVC       子控制器</li>
<li>@param title         标题</li>
<li>@param image         图片</li>
<li>@param selectedImage 选中的图片<br>*/</li>
</ul>
</li>
</ol>
<ul>
<li><p>(void)addChildVc:(UIViewController <em>)childVC title:(NSString </em>)title image:(NSString <em>)image selectedImage:(NSString </em>)selectedImage<br>{<br>  // 设置子控制器的文字<br>  childVC.title = title;</p>
<p>  // 设置子控制器的图片<br>  childVC.tabBarItem.image = [[UIImage imageNamed:image]imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];<br>  childVC.tabBarItem.selectedImage = [[UIImage imageNamed:selectedImage]imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];</p>
<p>  // 设置文字的样式<br>  NSMutableDictionary <em>textAttrs = [NSMutableDictionary dictionary];<br>  textAttrs[NSForegroundColorAttributeName] = [UIColor itemColor];<br>  NSMutableDictionary </em>selectTextAttrs = [NSMutableDictionary dictionary];<br>  selectTextAttrs[NSForegroundColorAttributeName] = [UIColor themeColor];<br>  [childVC.tabBarItem setTitleTextAttributes:textAttrs forState:UIControlStateNormal];<br>  [childVC.tabBarItem setTitleTextAttributes:selectTextAttrs forState:UIControlStateSelected];</p>
<p>  // 添加为子控制器<br>  [self addChildViewController:childVC];<br>}<br>```</p>
</li>
</ul>
<ol>
<li>UINavigationController<br> 统一设置返回键样式<br>```ObjectiveC</li>
</ol>
<ul>
<li><p>(void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated<br>{<br>  if (self.viewControllers.count &gt; 0) {</p>
<pre><code>  // 自动显示和隐藏tabbar
  viewController.hidesBottomBarWhenPushed = YES;
  // 设置左边的返回按钮
  // UIBarButtonItem category 方法,快速修改图片
  viewController.navigationItem.leftBarButtonItem = [UIBarButtonItem
  itemWithTarget:self action:@selector(popVC) image:@&quot;wihteback_normal&quot;
  highImage:@&quot;wihteback_hign&quot;];
</code></pre><p>  }<br>  [super pushViewController:viewController animated:animated];<br>}<br><code>添加全屏返回手势</code>ObjectiveC<br>@property (nonatomic, strong) UIPanGestureRecognizer <em>pan; /**&lt; 返回手势</em>/<br>@property (nonatomic, assign) BOOL panGesEnable;           /<em>*&lt; 是否启用全屏手势</em>/</p>
</li>
<li><p>(void)viewDidLoad<br>{<br>  [super viewDidLoad];<br>  // 获取系统自带滑动手势的target对象<br>  id target = self.interactivePopGestureRecognizer.delegate;<br>  // 创建全屏滑动手势，调用系统自带滑动手势的target的action方法<br>  SEL action = NSSelectorFromString(@”handleNavigationTransition:”);<br>  UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:target action:action];<br>  // 设置手势代理，拦截手势触发<br>  pan.delegate = self;<br>  self.pan = pan;<br>  // 给导航控制器的view添加全屏滑动手势<br>  [self.view addGestureRecognizer:pan];<br>  // 禁止使用系统自带的滑动手势<br>  self.interactivePopGestureRecognizer.enabled = NO;<br>  // 默认启用<br>  self.panGesEnable = YES;<br>}</p>
</li>
<li><p>(BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer<br>{<br>  if (!self.panGesEnable) {</p>
<pre><code>  return NO;
</code></pre><p>  }<br>  return self.childViewControllers.count == 1 ? NO : YES;<br>}</p>
</li>
</ul>
<pre><code>6. UIColor
```ObjectiveC
// 使用16进制颜色
+ (UIColor *)colorWithRGBHex:(UInt32)hex
{
    int r = (hex &gt;&gt; 16) &amp; 0xFF;
    int g = (hex &gt;&gt; 8) &amp; 0xFF;
    int b = (hex) &amp; 0xFF;

    return [UIColor colorWithRed:r / 255.0f
                           green:g / 255.0f
                            blue:b / 255.0f
                           alpha:1.0f];
}

// 使用16进制颜色字符串格式
+ (UIColor *)colorWithHexString:(NSString *)stringToConvert
{
    NSString *cString = [[stringToConvert stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString];

    // String should be 6 or 8 characters
    if ([cString length] &lt; 6) {
        return [UIColor clearColor];
    }

    // strip 0X if it appears
    if ([cString hasPrefix:@&quot;0X&quot;])
        cString = [cString substringFromIndex:2];
    if ([cString hasPrefix:@&quot;#&quot;])
        cString = [cString substringFromIndex:1];
    if ([cString length] != 6)
        return [UIColor clearColor];

    NSScanner *scanner = [NSScanner scannerWithString:cString];
    unsigned hexNum;
    if (![scanner scanHexInt:&amp;hexNum]) return nil;
    return [UIColor colorWithRGBHex:hexNum];
}

// 常用颜色写成分类
+ (UIColor *)themeColor 
{
    return [UIColor colorWithRed:0 green:0 blue:0 alpha:1.0];
}
</code></pre><ol>
<li>UIImage<br>```ObjectiveC<br>// 根据颜色生成图片</li>
</ol>
<ul>
<li><p>(UIImage <em>)imageWithColor:(UIColor </em>)color<br>{<br>  return [self imageWithColor:color size:CGSizeMake(1, 1)];<br>}</p>
</li>
<li><p>(UIImage <em>)imageWithColor:(UIColor </em>)color size:(CGSize)size<br>{<br>  if (!color || size.width &lt;= 0 || size.height &lt;= 0) return nil;<br>  CGRect rect = CGRectMake(0.0f, 0.0f, size.width, size.height);<br>  UIGraphicsBeginImageContextWithOptions(rect.size, NO, 0);<br>  CGContextRef context = UIGraphicsGetCurrentContext();<br>  CGContextSetFillColorWithColor(context, color.CGColor);<br>  CGContextFillRect(context, rect);<br>  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();<br>  UIGraphicsEndImageContext();<br>  return image;<br>}<br>```</p>
</li>
</ul>
<ol>
<li>UIView &amp;&amp; UIViewController<br>为UIView快速添加边框<br> <a href="https://github.com/aaronn/UIView-Borders" target="_blank" rel="external">UIView+Borders.h</a><br>为UIView添加红点,数字等<br> <a href="https://github.com/weng1250/WZLBadge" target="_blank" rel="external">WZLBadge</a><br>根据视图找到控制器<br>```ObjectiveC</li>
</ol>
<ul>
<li>(UIViewController <em>)viewController<br>{<br>  for (UIView </em>view = self; view; view = view.superview) {<pre><code>  UIResponder *nextResponder = [view nextResponder];
  if ([nextResponder isKindOfClass:[UIViewController class]]) {
      return (UIViewController *)nextResponder;
  }
</code></pre>  }<br>  return nil;<br>}<br><code>获取某个范围内的图形</code>ObjectiveC</li>
<li>(UIImage <em>)imageFromView:(UIView </em>)theView atFrame:(CGRect)r<br>{<br>  UIGraphicsBeginImageContext(theView.frame.size);<br>  CGContextRef context = UIGraphicsGetCurrentContext();<br>  CGContextSaveGState(context);<br>  UIRectClip(r);<br>  [theView.layer renderInContext:context];<br>  UIImage *theImage = UIGraphicsGetImageFromCurrentImageContext();<br>  UIGraphicsEndImageContext();<br>  return  theImage;<br>}<br><code>UIView移除所有子视图</code>ObjectiveC</li>
<li>(void)removeAllSubviews<br>{<br>  while (self.subviews.count) {<pre><code>  [self.subviews.lastObject removeFromSuperview];
</code></pre>  }<br>}<br><code>UIViewController默认设置</code>ObjectiveC<br>self.automaticallyAdjustsScrollViewInsets = NO;<br>self.edgesForExtendedLayout = UIRectEdgeNone;</li>
<li>(UIEdgeInsets)contentInset<br>{<br>  return UIEdgeInsetsMake(64, 0, 0, 0);<br>}<br><code>网易云音乐启动动画</code>ObjectiveC<br>TestViewController <em>test = [[TestViewController alloc] init];<br>UIWindow </em>keyWindow = [UIApplication sharedApplication].keyWindow;<br>[UIView transitionWithView:keyWindow duration:0.5 options:UIViewAnimationOptionTransitionFlipFromLeft animations:^{<pre><code>  [UIApplication sharedApplication].keyWindow.rootViewController = test;
</code></pre>} completion:^(BOOL finished) {</li>
</ul>
<p>}];</p>
<pre><code>9. UITableViewCell &amp;&amp; UITableView &amp;&amp; UITableViewController
   table view cell选中背景
```ObjectiveC
- (void)setSelected:(BOOL)selected animated:(BOOL)animated 
{
    [super setSelected:selected animated:animated];
    if (selected) {
        // 选中
    } else {
        // 非选中
    }
}
</code></pre><p>   table view cell 左右间距,不填充整个table view</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">- (void)setFrame:(CGRect)frame
{
    frame.origin.x = LEFT_MARGIN;
    frame.size.width = kScreenWidth - LEFT_MARGIN * 2;
    [super setFrame:frame];
}
</code></pre>
<p>   table view cell 分割线</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">// 方法1,重写drawRect方法
- (void)drawRect:(CGRect)rect 
{
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetFillColorWithColor(context, [UIColor clearColor].CGColor);
    CGContextFillRect(context, rect);

    //上分割线
    CGContextSetStrokeColorWithColor(context,[UIColor whiteColor].CGColor);
    CGContextStrokeRect(context,CGRectMake(0,0,rect.size.width,1));

    //下分割线
    CGContextSetStrokeColorWithColor(context,[UIColor whiteColor].CGColor);
    CGContextStrokeRect(context,CGRectMake(0,rect.size.height-1,rect.size.width,1)); 
}
// 方法2,隐藏自带分割线,然后再content view的layer上添加1像素的layer
</code></pre>
<p>   table view 默认设置</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">// 背景色
tableView.backgroundColor = [UIColor viewBackgroundColor];
// 分割线样式去除
tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
// 表尾去除
tableView.tableFooterView = [UIView new];
// 表头去除
tableView.tableHeaderView = [UIView new];
// 区头默认有10高度,设置0无效,可以设置为0.01
</code></pre>
<p>   table view controller 添加3D Touch</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">// 1.遵循代理`UIViewControllerPreviewingDelegate`
// 2.注册cell
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath 
{
    DHCell *cell = [DHCell cellWithTableView:tableView];
    // 注册
    [self registerForPreviewingWithDelegate:self sourceView:cell];
    return cell;
}
// 3.需要跳转的目标控制器
- (UIViewController *)previewingContext:(id <UIViewControllerPreviewing>)previewingContext viewControllerForLocation:(CGPoint)location
{
    NSIndexPath *indexPath = [_tableView indexPathForCell:(UITableViewCell* )[previewingContext sourceView]];
    DestinationViewController *destinationVC = [[DestinationViewController alloc] init];
    UINavigationController *navc = [[UINavigationController alloc] initWithRootViewController:destinationVC];
    return navc;
}
- (void)previewingContext:(id <UIViewControllerPreviewing>)previewingContext commitViewController:(UIViewController *)viewControllerToCommit
{
    [self showViewController:viewControllerToCommit.childViewControllers[0] sender:self];
}
// 4.目标控制的操作,写在目标控制器的实现里面
- (NSArray<id<UIPreviewActionItem>> *)previewActionItems
{
    UIPreviewAction * action1 = [UIPreviewAction actionWithTitle:@"操作1" style:UIPreviewActionStyleDefault handler:^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController) {
        DHLog(@"操作1");
    }];

    UIPreviewAction * action2 = [UIPreviewAction actionWithTitle:@"操作2" style:UIPreviewActionStyleSelected handler:^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController) {
        DHLog(@"操作2");
    }];

    UIPreviewAction * action3 = [UIPreviewAction actionWithTitle:@"操作3" style:UIPreviewActionStyleDestructive handler:^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController) {
        DHLog(@"操作3");
    }];

    NSArray * actions = @[action1,action2,action3];
    return actions;
}
</code></pre>
<p>  app 添加 <code>Shortcuts</code></p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    UIApplicationShortcutItem *addItem = [[UIApplicationShortcutItem alloc] initWithType:SHORTCUT_TYPE_ADD localizedTitle:@"添加" localizedSubtitle:nil icon:    [UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeAdd]
    userInfo:@{@"infoKey": @"infoValue"}];
    [UIApplication sharedApplication].shortcutItems = @[addItem];
    return YES;

}
- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void(^)(BOOL succeeded))completionHandler
{
    if ([shortcutItem.type isEqualToString:SHORTCUT_TYPE_ADD]) {
        // do something
    }
}
</code></pre>
<ol>
<li>UIFont<br>添加自定义字体<br>第一步,Info.plist添加<code>Fonts provided by application</code> array,<code>item0</code>key,value 为字体文件名称全写;<br>第二步,打印所以字体,找到自定义字体所在family名称,根据名称找到具体字的名称;<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">NSArray *familays = [UIFont familyNames];
NAArray *names = [UIFont fontNamesForFamilyName:familyName];
</code></pre>
第三步,加载字体.<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">UIfont *customFont = [UIFont fontWithName:fontName size:fontSize];
</code></pre>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下开发中常用的UI小技巧&lt;br&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="https://jiangdaohong.github.io./tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>UIWebView清除缓存</title>
    <link href="https://jiangdaohong.github.io./2016/10/22/UIWebView%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98/"/>
    <id>https://jiangdaohong.github.io./2016/10/22/UIWebView清除缓存/</id>
    <published>2016-10-22T14:41:53.000Z</published>
    <updated>2016-10-22T14:50:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>webview清理缓存的正确姿势<br><a id="more"></a></p>
<p>最近项目中加了不少网页,有一些内容经常变动,未能及时刷新,网上找了一些方法,包括清除<code>NSURLCache</code>和写<code>js</code>进行清除,或者加载之前进行<code>reload</code>操作,发现都没效果,关掉网络还是可以加载出来😶后来发现想的复杂了,直接初始化<code>request</code>的时候缓存策略选择忽略本地缓存就好了,一声叹息…</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">NSURLRequest *request = [[NSURLRequest alloc] initWithURL:[NSURL URLWithString:urlStr] cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:HTTP_REQUSET_TIMEOUT_INTERVAL];
[webView loadRequest:request];
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webview清理缓存的正确姿势&lt;br&gt;
    
    </summary>
    
    
      <category term="DEBUG" scheme="https://jiangdaohong.github.io./tags/DEBUG/"/>
    
  </entry>
  
  <entry>
    <title>项目开发中的GCD实战应用</title>
    <link href="https://jiangdaohong.github.io./2016/10/22/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84GCD%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8/"/>
    <id>https://jiangdaohong.github.io./2016/10/22/项目开发中的GCD实战应用/</id>
    <published>2016-10-22T11:08:13.000Z</published>
    <updated>2016-11-13T04:23:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下项目中GCD的应用<br><a id="more"></a></p>
<p>GCD是apple提供的一组C语言的API,主要用于实现一些特殊的功能,比如并发编程等,虽然是C语言的接口,但是经过block封装,调用十分方便,因此在项目中应用十分广泛,现在总结一下我个人在项目中的使用.</p>
<h3 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h3><pre class=" language-ObjectiveC"><code class="language-ObjectiveC">NSTimeInterval delayTime = 5;
dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayTime * NSEC_PER_SEC)),     dispatch_get_main_queue(), ^{
        /// do someting on main thread
});
</code></pre>
<h3 id="快速创建单例"><a href="#快速创建单例" class="headerlink" title="快速创建单例"></a>快速创建单例</h3><pre class=" language-ObjectiveC"><code class="language-ObjectiveC">+ (instancetype)shareInstance
{
    static id shareInstance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        shareInstance = [[self alloc] init];
    });
    return shareInstance;
}
</code></pre>
<h3 id="异步执行代码"><a href="#异步执行代码" class="headerlink" title="异步执行代码"></a>异步执行代码</h3><pre class=" language-ObjectiveC"><code class="language-ObjectiveC">dispatch_sync(dispatch_get_global_queue(0, 0), ^{
    // do something ,global queue
    dispatch_sync(dispatch_get_main_queue(), ^{
        // main thread
    });
});
</code></pre>
<h3 id="顺序执行代码-相当于使用NSOperationQueue的Dependency"><a href="#顺序执行代码-相当于使用NSOperationQueue的Dependency" class="headerlink" title="顺序执行代码(相当于使用NSOperationQueue的Dependency)"></a>顺序执行代码(相当于使用<code>NSOperationQueue</code>的<code>Dependency</code>)</h3><p>1,2,3同时执行,4最后打印</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">dispatch_group_t serviceGroup = dispatch_group_create();

    dispatch_group_enter(serviceGroup);
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        NSLog(@"1---%@", [NSThread currentThread]);
        dispatch_group_leave(serviceGroup);
    });

    dispatch_group_enter(serviceGroup);
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        NSLog(@"2---%@", [NSThread currentThread]);
        dispatch_group_leave(serviceGroup);
    });

    dispatch_group_enter(serviceGroup);
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        NSLog(@"3---%@", [NSThread currentThread]);
        dispatch_group_leave(serviceGroup);
    });

    dispatch_group_notify(serviceGroup, dispatch_get_main_queue(), ^{
        NSLog(@"4----%@", [NSThread currentThread]); 
    });
</code></pre>
<p>1,2异步执行完毕再异步执行3,4</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">dispatch_queue_t barrierQueue = dispatch_queue_create("jiangdaohong.github.io", DISPATCH_QUEUE_CONCURRENT);
    dispatch_async(barrierQueue, ^(){
        NSLog(@"1");
    });
    dispatch_async(barrierQueue, ^(){
        NSLog(@"2");
    });
    dispatch_barrier_async(barrierQueue, ^(){
        NSLog(@"dispatch_barrier_async test");
    });
    dispatch_async(barrierQueue, ^(){
        NSLog(@"3");
    });
    dispatch_async(barrierQueue, ^(){
        NSLog(@"4");
    });
</code></pre>
<h3 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h3><p>由于NSURLSession没有提供同步请求,可以利用<code>semaphore</code>实现同步请求.</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">    NSURLSession *session = [NSURLSession sharedSession];
    // 创建信号
    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
    NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
        // 设置信号量
        dispatch_semaphore_signal(semaphore);
    }];

    [task resume];
    // 等待
    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);
</code></pre>
<h3 id="定时器-NSTimer不准"><a href="#定时器-NSTimer不准" class="headerlink" title="定时器(NSTimer不准)"></a>定时器(NSTimer不准)</h3><pre class=" language-ObjectiveC"><code class="language-ObjectiveC">//倒计时时间
__block int timeout = 60;
dispatch_queue_t queue = dispatch_get_global_queue(0, 0);
dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);
// 执行间隔1s
dispatch_source_set_timer(timer, dispatch_walltime(NULL, 0),1.0 * NSEC_PER_SEC, 0);
dispatch_source_set_event_handler(timer, ^{
    if(timeout <= 0){
        // 倒计时结束，关闭
        dispatch_source_cancel(timer);
        dispatch_async(dispatch_get_main_queue(), ^{
            // 主线程刷新UI
        });
    } else {
        int minutes = timeout / 60;
        int seconds = timeout % 60;
        dispatch_async(dispatch_get_main_queue(), ^{
            // 主线程刷新UI
        });
        timeout--;
    }
});
dispatch_resume(timer);
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下项目中GCD的应用&lt;br&gt;
    
    </summary>
    
    
      <category term="skill" scheme="https://jiangdaohong.github.io./tags/skill/"/>
    
      <category term="GCD" scheme="https://jiangdaohong.github.io./tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>项目开发中KVC的简单应用</title>
    <link href="https://jiangdaohong.github.io./2016/10/03/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%ADKVC%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
    <id>https://jiangdaohong.github.io./2016/10/03/项目开发中KVC的简单应用/</id>
    <published>2016-10-03T09:38:25.000Z</published>
    <updated>2016-10-06T07:47:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中有些时候使用KVC,可以节省很多的时间精力,实现快速开发</p>
<a id="more"></a>
<p>前一段时间有同学问我,能不能在不自定义UI的情况下,修改ActionSheet指定title的颜色,当时说很简单啊,Runtime获取实例变量列表,找到设置标题颜色的key,使用KVC就可以搞定.</p>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>编译条件: Xcode7.3.1;Project Deployment Target:iOS8.0.</p>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><ol>
<li>初始化一个ActionSheet.<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:@"title" delegate:nil cancelButtonTitle:@"cancle" destructiveButtonTitle:@"destructive" otherButtonTitles:@"other",@"other1", nil];
</code></pre>
</li>
<li>获取实例变量列表,可以为NSObject添加一个Category方法,用于打印列表,具体实现如下:<br>```ObjectiveC</li>
</ol>
<ul>
<li>(void)printIvarList<br>{<br>  unsigned int count = 0;<br>  Ivar *ivars = class_copyIvarList([self class], &amp;count);<br>  for (int i = 0; i&lt;count; i++) {<pre><code>  Ivar ivar = ivars[i];
  NSLog(@&quot;name:%s------type:%s&quot;, ivar_getName(ivar),ivar_getTypeEncoding(ivar));
</code></pre>  }<br>}<pre><code>结果如下:
```Python
name:_alertController------type:@&quot;UIAlertController&quot;
name:_presenter------type:@&quot;_UIAlertControllerShimPresenter&quot;
name:_retainedSelf------type:@&quot;UIActionSheet&quot;
name:_actions------type:@&quot;NSMutableArray&quot;
name:_cancelIndex------type:q
name:_firstOtherButtonIndex------type:q
name:_destructiveButtonIndex------type:q
name:_actionSheetStyle------type:q
name:_context------type:@
name:_hasPreparedAlertActions------type:B
name:_isPresented------type:B
name:_alertControllerShouldDismiss------type:B
name:_handlingAlertActionShouldDismiss------type:B
name:_dismissingAlertController------type:B
name:_delegate------type:@&quot;&lt;UIActionSheetDelegate&gt;&quot;**
</code></pre>  一看结果,好气哦,<code>UIAlertController</code>这个类是iOS8之后才允许使用的,算了,换用这个类重新打印一下吧,经过测试,<code>UIAlertAction</code>这个类含有可以设置标题的属性,属性列表大概是酱紫的:<pre class=" language-Python"><code class="language-Python">name:_checked------type:B
name:_isPreferred------type:B
name:_imageTintColor------type:@"UIColor"
name:_titleTextColor------type:@"UIColor"
name:_style------type:q
name:_handler------type:@?
name:_simpleHandler------type:@?
name:_image------type:@"UIImage"
name:_shouldDismissHandler------type:@?
name:__descriptiveText------type:@"NSString"
name:_contentViewController------type:@"UIViewController"
name:_keyCommandInput------type:@"NSString"
name:_keyCommandModifierFlags------type:q
name:__representer------type:@"<UIAlertActionViewRepresentation_Internal>"
name:__alertController------type:@"UIAlertController"
</code></pre>
  里面找一下,_titleTextColor就是它了.</li>
</ul>
<ol>
<li>找到了就试一下喽.<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">[ac1 setValue:[UIColor redColor] forKeyPath:@"_titleTextColor"];
</code></pre>
</li>
<li>run一下,完美.</li>
<li>其他.<br> 通过第2步,可以看到在iOS8上使用<code>UIActionSheet</code>也是可以达到同样的效果的,因为其中有_actions可以得到一个<code>UIAlertAction</code>的数组,重复上述步骤即可完成,以后适配iOS7的应用越来越少了,不考虑iOS7的适配,使用KVC可以便捷地实现这种UI效果,还是不错的.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中有些时候使用KVC,可以节省很多的时间精力,实现快速开发&lt;/p&gt;
    
    </summary>
    
    
      <category term="skill" scheme="https://jiangdaohong.github.io./tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>每到深夜,总是有话想说说</title>
    <link href="https://jiangdaohong.github.io./2016/10/02/%E6%AF%8F%E5%88%B0%E6%B7%B1%E5%A4%9C-%E6%80%BB%E6%98%AF%E6%9C%89%E8%AF%9D%E6%83%B3%E8%AF%B4%E8%AF%B4/"/>
    <id>https://jiangdaohong.github.io./2016/10/02/每到深夜-总是有话想说说/</id>
    <published>2016-10-02T14:30:17.000Z</published>
    <updated>2016-10-02T14:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>随便写写字<br><a id="more"></a></p>
<p>来杭州工作一年多了,记得上次十一,还在加班搞这个项目,一年过去了,还是这个项目,心累…做了很久的东西,没来得及上线就被砍了,虽说是搬砖,心里总还是不爽的.之前一直想写博客,但是网上大牛很多,博客写的很好,我写出来有什么用呢?内心还是希望记录一些东西.直到前一段时间比较空闲,就搭建了这个博客.</p>
<p>除了想有个地方说说话,之前记录多很多零散的东西,都保存在笔记软件里面,前一段才发现,里面实在太乱了,正好借着整理一下,以后查阅也方便.</p>
<p>就这样,话唠.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随便写写字&lt;br&gt;
    
    </summary>
    
    
      <category term="我说" scheme="https://jiangdaohong.github.io./tags/%E6%88%91%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>记一次关于null_resettable的性能优化</title>
    <link href="https://jiangdaohong.github.io./2016/10/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8Enull-resettable%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://jiangdaohong.github.io./2016/10/02/记一次关于null-resettable的性能优化/</id>
    <published>2016-10-02T12:14:19.000Z</published>
    <updated>2016-10-06T07:48:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在进行项目优化的时候遇到了关于null_resettable的坑,记录一下,由于之前代码不在了,简单模拟一下当时的情况.<br><a id="more"></a></p>
<p>最近项目要正式上线,需要进行一定的性能方面的测试,由于之前的数据加载的方案几经变化,都没有出现严重的性能问题,也没有在意,结果一测试,结果让我大跌眼镜:性能简直差到天边d(･｀ω´･d*)!!!简单log一下看看那里耗时严重.</p>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>硬件:iPhone5C,系统,iOS9.0.2(越狱)<br>网络:辣鸡WiFi…<br>没有模拟器,之前引入第三方蓝牙库,只有真机包,坑…,要不然直接Instruments查看了,不过当时预测不是大问题,就直接log查看了.</p>
<h3 id="主要过程"><a href="#主要过程" class="headerlink" title="主要过程"></a>主要过程</h3><p>思路:由于之前是采取分段加载数据,之后采取一次性加载数据,同时进行4个网络请求,可能在网络方面有耗时操作,包括请求数据,解析数据;另一个就是存在频繁调用方法的低性能,导致运行慢.<br>测试数据是血糖数据,数据时间跨度为两年,模拟数据3600条,主要包括空腹血糖数据,以及数据记录时间等,用于绘制曲线图,曲线图以四小时为单位进行绘制,可知共有<code>365 * 2 * 6 = 4380</code>个点需要绘制,其中包括大量的时间比较,因为在同一时间区间,比如4:00-8:00只允许有一个数据进行绘制,因此这里还有一个数据去重操作.大概过程理清之后,打印一下时间:<br><img src="http://ww4.sinaimg.cn/large/006y8lVagw1f8e88oerjmj312e0megzu.jpg" alt=""></p>
<h3 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h3><p>简单看了一下时间分布,总共有18s,网络部分,网络请求7s,其中有接近1s的数据解析耗时;绘图部分,空腹血糖数据生成耗时10s.<br>耗时代码:</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">    DHLog(@"-----------fbg数据开始------------");
    __block NSMutableArray *fbgVals = [NSMutableArray array];
    __block NSInteger didAddIndex = -1; // 标记是否被添加过
    NSInteger listCount = (NSInteger)self.weekRecords.count;
    for (NSInteger i = listCount-1; i >= 0; i--) {
        // 从远到近取出时间
        RecordBG *bg = self.weekRecords[i];
        NSDate *currentDate = [bg.happenTime dotString2Date];
        NSInteger xPosition = [DHChartTool getXAxisPointWithHour:currentDate.hour];

        NSInteger index = [NSDate daysWithinEraFromDate:from toDate:currentDate] * 6 + xPosition + 6;
        if (didAddIndex != index) {
            didAddIndex = index;
            [fbgVals addObject:[[ChartDataEntry alloc] initWithValue:bg.fbg xIndex:index data:bg]];
        }

    }
    DHLog(@"-----------fbg数据OK------------");
</code></pre>
<p>按照以上思路,继续打印时间,最后定位问题代码</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">    NSInteger index = [NSDate daysWithinEraFromDate:from toDate:currentDate] * 6 + xPosition + 6;
</code></pre>
<p>进入看一下这行代码的功能,主要用于计算两个日期之间的整数天.代码实现如下:</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">+ (NSInteger)daysWithinEraFromDate:(NSDate *) startDate toDate:(NSDate *) endDate
{
    NSCalendar *cal = [NSCalendar currentCalendar];
    NSDate *s = [[startDate dateStringWithFormatString:@"yyyy-MM-dd"] string2DateWithFormat:@"yyyy-MM-dd"];
    NSDate *e = [[endDate dateStringWithFormatString:@"yyyy-MM-dd"] string2DateWithFormat:@"yyyy-MM-dd"];
    NSInteger startDay=[cal ordinalityOfUnit:NSDayCalendarUnit
                                      inUnit: NSEraCalendarUnit forDate:s];
    NSInteger endDay=[cal ordinalityOfUnit:NSDayCalendarUnit
                                    inUnit: NSEraCalendarUnit forDate:e];
    return (endDay-startDay);
}
</code></pre>
<p>看了一下这几行代码,<code>[endDate dateStringWithFormatString:@&quot;yyyy-MM-dd&quot;]</code>主要用于去掉日期的时分秒时间,<code>[cal ordinalityOfUnit:NSDayCalendarUnit inUnit:NSEraCalendarUnit forDate:s]</code>是系统提供的方法,进行单独测试,没发现问题.上面的方法实现如下:</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">- (NSString *)dateStringWithFormatString:(NSString *)formatString {
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:formatString];
    return [dateFormatter stringFromDate:self];
}
</code></pre>
<p>这里只是对系统方法进行简单调用,单看代码没问题,每个方法进入头文件看一下,其中一个关键字引起注意,想起了之前听说过<code>NSDate</code>有性能问题,当时没注意,现在看到这个关键字,猜测是这个属性引起的性能问题:</p>
<blockquote>
<p>NSDateFormatter.h<br>@property (null_resettable, copy) NSString *dateFormat;<br>使用null_resettable修饰的属性,字面意义,不可重置的,官方默认使用这个关键字,就是告诉开发者尽量不要重置这个属性的值,因为重置需要重写set和get,防止为空的情况下没有默认值,好了,就是这个坑.</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>定位到问题代码,优化考虑从两方面入手,一是避免调用这个方法,二是替换这个方法的实现,换用更好性能的实现.在原先的代码中,有很多地方调用<code>[NSDate daysWithinEraFromDate: toDate:]</code>,还有很多地方调用日期转字符串的方法.<br>首先,把简单调用日期转字符串的方法改为字符串截取方法,比如,只需要获取年月日的地方可以这样调用:</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">NSString *dateStr = [[[[date dateByAddingDays:i] description] substringToIndex:10] stringByReplacingOccurrencesOfString:@"-" withString:@"/"];
</code></pre>
<p>这样就可以把日期转换为yyyy-MM-dd格式,注意,需要保证date的<code>description</code>返回标准格式,防止他人重写<code>description</code>带来隐患,<br>其次,把需要进行计算日期差的方法改为下面的实现:</p>
<pre class=" language-ObjectiveC"><code class="language-ObjectiveC">+ (NSInteger)dh_daysWithinEraFromDate:(NSString *)startDate toDate:(NSString *)endDate
{
    NSCalendar *cal = [NSCalendar currentCalendar];
    // 截取年月日
    NSString *start = [startDate substringToIndex:10];
    NSString *end = [endDate substringToIndex:10];

    static NSDateFormatter *formatter;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        formatter = [[NSDateFormatter alloc] init];
        [formatter setDateFormat:@"yyyy-MM-dd"];
        [formatter setLocale:[NSLocale currentLocale]];
    });

    // 转成去掉时分秒的日期
    NSDate *s = [formatter dateFromString:start];
    NSDate *e = [formatter dateFromString:end];

    NSInteger startDay=[cal ordinalityOfUnit:NSDayCalendarUnit
                                      inUnit: NSEraCalendarUnit forDate:s];
    NSInteger endDay=[cal ordinalityOfUnit:NSDayCalendarUnit
                                    inUnit: NSEraCalendarUnit forDate:e];
    return (endDay-startDay);
}
</code></pre>
<p>经过这一番修改,绘制时间缩短到了1.5s,但是网络请求时间太久,接下来就是进行数据本地缓存,网络分段加载数据等方面网络部分的优化了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在进行项目优化的时候遇到了关于null_resettable的坑,记录一下,由于之前代码不在了,简单模拟一下当时的情况.&lt;br&gt;
    
    </summary>
    
    
      <category term="Performance" scheme="https://jiangdaohong.github.io./tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Xcode命令行打包</title>
    <link href="https://jiangdaohong.github.io./2016/09/25/Xcode%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%8C%85/"/>
    <id>https://jiangdaohong.github.io./2016/09/25/Xcode命令行打包/</id>
    <published>2016-09-25T12:59:52.000Z</published>
    <updated>2016-09-25T13:36:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下使用命令行进行打包<br><a id="more"></a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>最近公司进行内部测试,要求每天进行App打包上传,本来想搭建一个CI系统,但是实在没有精力(好吧,是没有成功╮(╯_╰)╭,搭建到一半下载git等插件的时候一直出问题,下次有时间再搞了),项目不大,但是每次打包要10分钟(里面有Swift混编,大坑),忍不了了,上网查了一下看到有一些编译优化指令,然后看CI的时候看到了自动打包命令,试了一下,打包时间可以缩短到3分钟以内,记录一下过程吧.</p>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><ol>
<li>Xcode中修改编译选项,修改为发布版证书和描述文件,或者修改编译Target</li>
<li>终端进入项目所在文件夹</li>
<li>执行命令xcodebuild clean</li>
<li><p>继续执行命令</p>
<pre class=" language-Python"><code class="language-Python">xcodebuild -workspace appname.xcworkspace -scheme appname -configuration Release -derivedDataPath build
</code></pre>
<p>这是有workspace的项目的指令,需要将appname替换为你的项目名<br>如果未使用workspace,用下面的命令就可以了</p>
<pre class=" language-Python"><code class="language-Python">xcrun -sdk iphoneos PackageApplication -v build/Release-iphoneos/app.app -o /path/appname.ipa
</code></pre>
<p>后面的是输出路径以及打包app的名字</p>
</li>
<li><p>项目使用workspace,进行ipa输出,执行命令</p>
<pre class=" language-Python"><code class="language-Python">xcrun -sdk iphoneos PackageApplication -v /ProjectPath/build/Build/Products/Release-iphoneos/appname.app -o /path/appname.ipa
</code></pre>
<p>ProjectPath替换为你项目的路径,保证此路径下面有Release-iphoneos目录</p>
</li>
<li>发布项目,暂时手动发布😢</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下使用命令行进行打包&lt;br&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="https://jiangdaohong.github.io./tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>Reveal真机查看app</title>
    <link href="https://jiangdaohong.github.io./2016/09/23/Reveal%E7%9C%9F%E6%9C%BA%E6%9F%A5%E7%9C%8Bapp/"/>
    <id>https://jiangdaohong.github.io./2016/09/23/Reveal真机查看app/</id>
    <published>2016-09-23T01:43:17.000Z</published>
    <updated>2017-03-15T05:40:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下使用Reveal的基本使用<br><a id="more"></a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>使用设备:iPhone5C,系统版本iOS9.0.2</li>
<li>Reveal版本:1.6.3</li>
<li>Cydia版本:1.1.26;Reveal Loader版本:1.0.0-1</li>
<li>Xcode版本:7.3.1</li>
</ol>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>一台越狱iOS设备</li>
<li>Cydia下载Reveal Loader,如果你是iOS最新的操作系统,建议下载最新的插件,<a href="https://github.com/heardrwt/RevealLoader" target="_blank" rel="external">下载地址</a></li>
<li>下载<a href="http://revealapp.com/download/" target="_blank" rel="external">Reveal</a>,查看官方使用说明</li>
<li>一定保证Reveal和越狱设备在同一网络环境下</li>
</ol>
<h3 id="真机查看app步骤"><a href="#真机查看app步骤" class="headerlink" title="真机查看app步骤"></a>真机查看app步骤</h3><ol>
<li>下载需要查看的app,这里演示查看系统的播客app</li>
<li>打开系统设置,找到Reveal,在里面找到需要查看的app, enable,界面如下图所示.<br><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f861nvo8guj20hs0vkjt2.jpg" alt="Reveal界面"><br><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f861ldv4ozj20hs0vkq5w.jpg" alt="reveal插件界面"></li>
<li>打开app</li>
<li>打开Reveal,选择连接查看的app,如下图<br><img src="http://ww1.sinaimg.cn/large/72f96cbajw1f861pa9znxj20ia03qaam.jpg" alt="连接Reveal"></li>
<li>这样就可以查看app了,可以看到,播客app中间部分使用的控件名称以及布局方式<br><img src="http://ww2.sinaimg.cn/large/72f96cbagw1f861qucaq1j21kw0v213g.jpg" alt="查看app界面"></li>
</ol>
<h3 id="使用Reveal查看自己的app的简单方式"><a href="#使用Reveal查看自己的app的简单方式" class="headerlink" title="使用Reveal查看自己的app的简单方式"></a>使用Reveal查看自己的app的简单方式</h3><p>使用Reveal查看自己的app的方式很简单,只需要配置一下断点即可,官方给出了教程,可以点击<a href="http://support.revealapp.com/kb/getting-started/load-the-reveal-server-via-an-xcode-breakpoint" target="_blank" rel="external">这里</a>查看.</p>
<h3 id="简单记录利用符号断点查看App步骤"><a href="#简单记录利用符号断点查看App步骤" class="headerlink" title="简单记录利用符号断点查看App步骤"></a>简单记录利用符号断点查看App步骤</h3><ol>
<li>打开Xcode,选择<strong>View</strong> <strong>→ Navigators</strong> <strong>→ Show Breakpoint Navigator</strong></li>
<li>点击 <strong>+</strong> 按钮,选择<strong>Add Symbolic Breakpoint</strong>,如下图<br><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f862aw5twjj20ea06wabf.jpg" alt="添加图片"></li>
<li>进行断点编辑,如下图<br><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f862cendfrj20q40egq6w.jpg" alt="编辑断点"><br>  断点命令:<pre class=" language-Python"><code class="language-Python">expr (Class)NSClassFromString(@"IBARevealLoader") == nil ? (void )dlopen("/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/RevealServer.framework/RevealServer", 0x2) : ((void)0)
</code></pre>
如果命令无效,参看<a href="http://support.revealapp.com/kb/getting-started/load-the-reveal-server-via-an-xcode-breakpoint" target="_blank" rel="external">官方教程</a></li>
<li>进行断点设置,如下图<br><img src="http://ww1.sinaimg.cn/large/72f96cbagw1f862fq6wfbj20s80ccgpf.jpg" alt="断点设置"></li>
<li>运行Xcode,接下来的步骤是重复真机查看app步骤4-5步.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下使用Reveal的基本使用&lt;br&gt;
    
    </summary>
    
    
      <category term="DEBUG" scheme="https://jiangdaohong.github.io./tags/DEBUG/"/>
    
  </entry>
  
  <entry>
    <title>安装Chisel</title>
    <link href="https://jiangdaohong.github.io./2016/09/22/%E5%AE%89%E8%A3%85Chisel/"/>
    <id>https://jiangdaohong.github.io./2016/09/22/安装Chisel/</id>
    <published>2016-09-22T02:53:22.000Z</published>
    <updated>2017-03-15T05:39:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下使用Chisel的安装过程以及基本的命令<br><a id="more"></a></p>
<ol>
<li>使用 brew install chisel</li>
<li>记录默认命令的安装路径,默认路径是 /usr/local/opt/chisel/libexec/fblldb.py</li>
<li>用vim打开 <code>~./lldbinit</code> 文件,如果不存在,新建此文件</li>
<li>在文件中添加命令<br>``` Python<br>command script import 安装路径</li>
</ol>
<p>```</p>
<ol>
<li>重启Xcode</li>
</ol>
<p>官方地址以及常用命令参考:<a href="https://github.com/facebook/chisel" target="_blank" rel="external">https://github.com/facebook/chisel</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下使用Chisel的安装过程以及基本的命令&lt;br&gt;
    
    </summary>
    
    
      <category term="DEBUG" scheme="https://jiangdaohong.github.io./tags/DEBUG/"/>
    
  </entry>
  
  <entry>
    <title>Tips</title>
    <link href="https://jiangdaohong.github.io./2016/08/19/tips/"/>
    <id>https://jiangdaohong.github.io./2016/08/19/tips/</id>
    <published>2016-08-19T09:59:16.000Z</published>
    <updated>2016-08-20T11:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>    // 主线程
    if (pthread_main_np() == 0) returnnil;
</code></pre><pre><code>    //处于开发阶段
    #ifdef DEBUG
    #define DHLog(...) NSLog(VA_ARGS)
    #else
    //处于发布阶段
    #define DHLog(...)
    #endif
</code></pre><pre><code>    //Format
    #define F(string, args...)                  [NSString stringWithFormat:string, args]
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;    // 主线程
    if (pthread_main_np() == 0) returnnil;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;    //处于开发阶段
    #ifdef DEBUG
    #define DHLog(...
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>123</title>
    <link href="https://jiangdaohong.github.io./2016/08/19/hello%20world/"/>
    <id>https://jiangdaohong.github.io./2016/08/19/hello world/</id>
    <published>2016-08-19T02:40:55.000Z</published>
    <updated>2016-08-19T08:04:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>hello world</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello world&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
